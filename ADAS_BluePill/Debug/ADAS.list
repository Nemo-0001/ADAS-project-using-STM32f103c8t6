
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007208  08007208  00017208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800761c  0800761c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800761c  0800761c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800761c  0800761c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d4  080077f8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080077f8  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfce  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002514  00000000  00000000  0002c20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2c  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019df6  00000000  00000000  0002feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108fd  00000000  00000000  00049ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc7e  00000000  00000000  0005a59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000460c  00000000  00000000  000e7220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000eb82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080071ec 	.word	0x080071ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080071ec 	.word	0x080071ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <DC_MOTOR_Init>:
#include "DC_MOTOR.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0ac      	sub	sp, #176	; 0xb0
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t ARR_Value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint8_t i = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4ab2      	ldr	r2, [pc, #712]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000c6e:	015b      	lsls	r3, r3, #5
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4ab1      	ldr	r2, [pc, #708]	; (8000f3c <DC_MOTOR_Init+0x328>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d008      	beq.n	8000c8c <DC_MOTOR_Init+0x78>
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4aae      	ldr	r2, [pc, #696]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000c7e:	015b      	lsls	r3, r3, #5
 8000c80:	4413      	add	r3, r2
 8000c82:	3304      	adds	r3, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4aad      	ldr	r2, [pc, #692]	; (8000f3c <DC_MOTOR_Init+0x328>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10c      	bne.n	8000ca6 <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4bac      	ldr	r3, [pc, #688]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4aab      	ldr	r2, [pc, #684]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4ba9      	ldr	r3, [pc, #676]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	e058      	b.n	8000d58 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4aa3      	ldr	r2, [pc, #652]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000caa:	015b      	lsls	r3, r3, #5
 8000cac:	4413      	add	r3, r2
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4aa4      	ldr	r2, [pc, #656]	; (8000f44 <DC_MOTOR_Init+0x330>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d008      	beq.n	8000cc8 <DC_MOTOR_Init+0xb4>
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4a9f      	ldr	r2, [pc, #636]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000cba:	015b      	lsls	r3, r3, #5
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4aa0      	ldr	r2, [pc, #640]	; (8000f44 <DC_MOTOR_Init+0x330>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d10c      	bne.n	8000ce2 <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b9d      	ldr	r3, [pc, #628]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a9c      	ldr	r2, [pc, #624]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b9a      	ldr	r3, [pc, #616]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	e03a      	b.n	8000d58 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a94      	ldr	r2, [pc, #592]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	4413      	add	r3, r2
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a96      	ldr	r2, [pc, #600]	; (8000f48 <DC_MOTOR_Init+0x334>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d008      	beq.n	8000d04 <DC_MOTOR_Init+0xf0>
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a90      	ldr	r2, [pc, #576]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a92      	ldr	r2, [pc, #584]	; (8000f48 <DC_MOTOR_Init+0x334>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d10c      	bne.n	8000d1e <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b8e      	ldr	r3, [pc, #568]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a8d      	ldr	r2, [pc, #564]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b8b      	ldr	r3, [pc, #556]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	e01c      	b.n	8000d58 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a85      	ldr	r2, [pc, #532]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a88      	ldr	r2, [pc, #544]	; (8000f4c <DC_MOTOR_Init+0x338>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d008      	beq.n	8000d40 <DC_MOTOR_Init+0x12c>
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a81      	ldr	r2, [pc, #516]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000d32:	015b      	lsls	r3, r3, #5
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a84      	ldr	r2, [pc, #528]	; (8000f4c <DC_MOTOR_Init+0x338>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d10b      	bne.n	8000d58 <DC_MOTOR_Init+0x144>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a7e      	ldr	r2, [pc, #504]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <DC_MOTOR_Init+0x32c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4a77      	ldr	r2, [pc, #476]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000d5c:	015b      	lsls	r3, r3, #5
 8000d5e:	4413      	add	r3, r2
 8000d60:	3308      	adds	r3, #8
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a70      	ldr	r2, [pc, #448]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000d78:	015b      	lsls	r3, r3, #5
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fc61 	bl	800264c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	4413      	add	r3, r2
 8000d92:	330a      	adds	r3, #10
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000daa:	015b      	lsls	r3, r3, #5
 8000dac:	4413      	add	r3, r2
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fc47 	bl	800264c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4a5d      	ldr	r2, [pc, #372]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000dc2:	015b      	lsls	r3, r3, #5
 8000dc4:	4413      	add	r3, r2
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000dcc:	015b      	lsls	r3, r3, #5
 8000dce:	4413      	add	r3, r2
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f001 fdbc 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4a56      	ldr	r2, [pc, #344]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000de0:	015b      	lsls	r3, r3, #5
 8000de2:	4413      	add	r3, r2
 8000de4:	3304      	adds	r3, #4
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4a53      	ldr	r2, [pc, #332]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000dec:	015b      	lsls	r3, r3, #5
 8000dee:	4413      	add	r3, r2
 8000df0:	330a      	adds	r3, #10
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	f001 fdac 	bl	8002954 <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000e08:	e009      	b.n	8000e1e <DC_MOTOR_Init+0x20a>
	{
		ARR_Value *= 2;
 8000e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000e14:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a45      	ldr	r2, [pc, #276]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000e22:	015b      	lsls	r3, r3, #5
 8000e24:	4413      	add	r3, r2
 8000e26:	331c      	adds	r3, #28
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3eb      	bcc.n	8000e0a <DC_MOTOR_Init+0x1f6>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000e36:	015b      	lsls	r3, r3, #5
 8000e38:	4413      	add	r3, r2
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <DC_MOTOR_Init+0x33c>)
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000e4c:	015b      	lsls	r3, r3, #5
 8000e4e:	4413      	add	r3, r2
 8000e50:	3318      	adds	r3, #24
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PSC_Value--;
 8000e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	ARR_Value -= 2;
 8000e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e72:	3b02      	subs	r3, #2
 8000e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	4413      	add	r3, r2
 8000e80:	330c      	adds	r3, #12
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
	htim.Init.Prescaler = PSC_Value;
 8000e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e8a:	61fb      	str	r3, [r7, #28]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
	htim.Init.Period = ARR_Value;
 8000e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_Base_Init(&htim);
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 f988 	bl	80031b8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000eb0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fed0 	bl	8003c60 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fa19 	bl	80032fc <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000ed4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fb94 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee4:	2360      	movs	r3, #96	; 0x60
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	4413      	add	r3, r2
 8000efc:	3310      	adds	r3, #16
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fdeb 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f93a 	bl	800218c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <DC_MOTOR_Init+0x324>)
 8000f1c:	015b      	lsls	r3, r3, #5
 8000f1e:	4413      	add	r3, r2
 8000f20:	3310      	adds	r3, #16
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fa3e 	bl	80033ac <HAL_TIM_PWM_Start>
}
 8000f30:	bf00      	nop
 8000f32:	37b0      	adds	r7, #176	; 0xb0
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	08007218 	.word	0x08007218
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40011400 	.word	0x40011400
 8000f50:	000f4240 	.word	0x000f4240

08000f54 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d11f      	bne.n	8000fac <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4a40      	ldr	r2, [pc, #256]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000f70:	015b      	lsls	r3, r3, #5
 8000f72:	4413      	add	r3, r2
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3308      	adds	r3, #8
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	f001 fce5 	bl	8002954 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4a38      	ldr	r2, [pc, #224]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	4413      	add	r3, r2
 8000f92:	3304      	adds	r3, #4
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000f9a:	015b      	lsls	r3, r3, #5
 8000f9c:	4413      	add	r3, r2
 8000f9e:	330a      	adds	r3, #10
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 fcd5 	bl	8002954 <HAL_GPIO_WritePin>
 8000faa:	e021      	b.n	8000ff0 <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d11e      	bne.n	8000ff0 <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	4413      	add	r3, r2
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f001 fcc2 	bl	8002954 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3304      	adds	r3, #4
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	4413      	add	r3, r2
 8000fe4:	330a      	adds	r3, #10
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f001 fcb2 	bl	8002954 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3310      	adds	r3, #16
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d108      	bne.n	8001012 <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8001004:	015b      	lsls	r3, r3, #5
 8001006:	4413      	add	r3, r2
 8001008:	330c      	adds	r3, #12
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8001010:	e029      	b.n	8001066 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	4413      	add	r3, r2
 800101a:	3310      	adds	r3, #16
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d108      	bne.n	8001034 <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	4413      	add	r3, r2
 800102a:	330c      	adds	r3, #12
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	88ba      	ldrh	r2, [r7, #4]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001032:	e018      	b.n	8001066 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	4413      	add	r3, r2
 800103c:	3310      	adds	r3, #16
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d108      	bne.n	8001056 <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <DC_MOTOR_Start+0x11c>)
 8001048:	015b      	lsls	r3, r3, #5
 800104a:	4413      	add	r3, r2
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	88ba      	ldrh	r2, [r7, #4]
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001054:	e007      	b.n	8001066 <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <DC_MOTOR_Start+0x11c>)
 800105a:	015b      	lsls	r3, r3, #5
 800105c:	4413      	add	r3, r2
 800105e:	330c      	adds	r3, #12
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	88ba      	ldrh	r2, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08007218 	.word	0x08007218

08001074 <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a2e      	ldr	r2, [pc, #184]	; (800113c <DC_MOTOR_Stop+0xc8>)
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	4413      	add	r3, r2
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a2c      	ldr	r2, [pc, #176]	; (800113c <DC_MOTOR_Stop+0xc8>)
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	4413      	add	r3, r2
 8001090:	3308      	adds	r3, #8
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	f001 fc5c 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010a0:	015b      	lsls	r3, r3, #5
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a24      	ldr	r2, [pc, #144]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	4413      	add	r3, r2
 80010b0:	330a      	adds	r3, #10
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f001 fc4c 	bl	8002954 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010c0:	015b      	lsls	r3, r3, #5
 80010c2:	4413      	add	r3, r2
 80010c4:	3310      	adds	r3, #16
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d108      	bne.n	80010de <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	4413      	add	r3, r2
 80010d4:	330c      	adds	r3, #12
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 80010dc:	e029      	b.n	8001132 <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	4413      	add	r3, r2
 80010e6:	3310      	adds	r3, #16
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d108      	bne.n	8001100 <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <DC_MOTOR_Stop+0xc8>)
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4413      	add	r3, r2
 80010f6:	330c      	adds	r3, #12
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010fe:	e018      	b.n	8001132 <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <DC_MOTOR_Stop+0xc8>)
 8001104:	015b      	lsls	r3, r3, #5
 8001106:	4413      	add	r3, r2
 8001108:	3310      	adds	r3, #16
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d108      	bne.n	8001122 <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <DC_MOTOR_Stop+0xc8>)
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4413      	add	r3, r2
 8001118:	330c      	adds	r3, #12
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001120:	e007      	b.n	8001132 <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <DC_MOTOR_Stop+0xc8>)
 8001126:	015b      	lsls	r3, r3, #5
 8001128:	4413      	add	r3, r2
 800112a:	330c      	adds	r3, #12
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	08007218 	.word	0x08007218

08001140 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800114c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	4987      	ldr	r1, [pc, #540]	; (80013a0 <HCSR04_Init+0x260>)
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a84      	ldr	r2, [pc, #528]	; (80013a4 <HCSR04_Init+0x264>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10c      	bne.n	80011b0 <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <HCSR04_Init+0x268>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a83      	ldr	r2, [pc, #524]	; (80013a8 <HCSR04_Init+0x268>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HCSR04_Init+0x268>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	e046      	b.n	800123e <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	497b      	ldr	r1, [pc, #492]	; (80013a0 <HCSR04_Init+0x260>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HCSR04_Init+0x26c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10c      	bne.n	80011e0 <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <HCSR04_Init+0x268>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <HCSR04_Init+0x268>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HCSR04_Init+0x268>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	e02e      	b.n	800123e <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	496f      	ldr	r1, [pc, #444]	; (80013a0 <HCSR04_Init+0x260>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <HCSR04_Init+0x270>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10c      	bne.n	8001210 <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <HCSR04_Init+0x268>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a6b      	ldr	r2, [pc, #428]	; (80013a8 <HCSR04_Init+0x268>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b69      	ldr	r3, [pc, #420]	; (80013a8 <HCSR04_Init+0x268>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e016      	b.n	800123e <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	4963      	ldr	r1, [pc, #396]	; (80013a0 <HCSR04_Init+0x260>)
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <HCSR04_Init+0x274>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <HCSR04_Init+0xfe>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HCSR04_Init+0x268>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a5f      	ldr	r2, [pc, #380]	; (80013a8 <HCSR04_Init+0x268>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b5d      	ldr	r3, [pc, #372]	; (80013a8 <HCSR04_Init+0x268>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4957      	ldr	r1, [pc, #348]	; (80013a0 <HCSR04_Init+0x260>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	3304      	adds	r3, #4
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	643b      	str	r3, [r7, #64]	; 0x40
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2302      	movs	r3, #2
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	494f      	ldr	r1, [pc, #316]	; (80013a0 <HCSR04_Init+0x260>)
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f001 f9e9 	bl	800264c <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4948      	ldr	r1, [pc, #288]	; (80013a0 <HCSR04_Init+0x260>)
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3308      	adds	r3, #8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001290:	4849      	ldr	r0, [pc, #292]	; (80013b8 <HCSR04_Init+0x278>)
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4403      	add	r3, r0
 800129c:	3304      	adds	r3, #4
 800129e:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	493f      	ldr	r1, [pc, #252]	; (80013a0 <HCSR04_Init+0x260>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3308      	adds	r3, #8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012b6:	4840      	ldr	r0, [pc, #256]	; (80013b8 <HCSR04_Init+0x278>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4403      	add	r3, r0
 80012c2:	3308      	adds	r3, #8
 80012c4:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	493b      	ldr	r1, [pc, #236]	; (80013b8 <HCSR04_Init+0x278>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3302      	adds	r3, #2
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4936      	ldr	r1, [pc, #216]	; (80013b8 <HCSR04_Init+0x278>)
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	331c      	adds	r3, #28
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	4931      	ldr	r1, [pc, #196]	; (80013b8 <HCSR04_Init+0x278>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3308      	adds	r3, #8
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10a      	bne.n	800131a <HCSR04_Init+0x1da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	492c      	ldr	r1, [pc, #176]	; (80013b8 <HCSR04_Init+0x278>)
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3308      	adds	r3, #8
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4920      	ldr	r1, [pc, #128]	; (80013a0 <HCSR04_Init+0x260>)
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	330c      	adds	r3, #12
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <HCSR04_Init+0x206>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	4921      	ldr	r1, [pc, #132]	; (80013b8 <HCSR04_Init+0x278>)
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3320      	adds	r3, #32
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e04f      	b.n	80013e6 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4915      	ldr	r1, [pc, #84]	; (80013a0 <HCSR04_Init+0x260>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	330c      	adds	r3, #12
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d10a      	bne.n	8001372 <HCSR04_Init+0x232>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	4916      	ldr	r1, [pc, #88]	; (80013b8 <HCSR04_Init+0x278>)
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3320      	adds	r3, #32
 800136c:	2202      	movs	r2, #2
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e039      	b.n	80013e6 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	490a      	ldr	r1, [pc, #40]	; (80013a0 <HCSR04_Init+0x260>)
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	330c      	adds	r3, #12
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d119      	bne.n	80013bc <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	490b      	ldr	r1, [pc, #44]	; (80013b8 <HCSR04_Init+0x278>)
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3320      	adds	r3, #32
 8001398:	2204      	movs	r2, #4
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e023      	b.n	80013e6 <HCSR04_Init+0x2a6>
 800139e:	bf00      	nop
 80013a0:	08007258 	.word	0x08007258
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40011400 	.word	0x40011400
 80013b8:	200001f0 	.word	0x200001f0
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	4941      	ldr	r1, [pc, #260]	; (80014c4 <HCSR04_Init+0x384>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	330c      	adds	r3, #12
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d109      	bne.n	80013e6 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	493c      	ldr	r1, [pc, #240]	; (80014c8 <HCSR04_Init+0x388>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3320      	adds	r3, #32
 80013e2:	2208      	movs	r2, #8
 80013e4:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4936      	ldr	r1, [pc, #216]	; (80014c4 <HCSR04_Init+0x384>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3308      	adds	r3, #8
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	4932      	ldr	r1, [pc, #200]	; (80014c8 <HCSR04_Init+0x388>)
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	3304      	adds	r3, #4
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	492b      	ldr	r1, [pc, #172]	; (80014c8 <HCSR04_Init+0x388>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3308      	adds	r3, #8
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f001 febc 	bl	80031b8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	4619      	mov	r1, r3
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f002 fc07 	bl	8003c60 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f002 f84c 	bl	80034f0 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	4619      	mov	r1, r3
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f003 f8d0 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	4911      	ldr	r1, [pc, #68]	; (80014c4 <HCSR04_Init+0x384>)
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	330c      	adds	r3, #12
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4619      	mov	r1, r3
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f002 fa91 	bl	80039bc <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f001 fedc 	bl	8003258 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <HCSR04_Init+0x384>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	330c      	adds	r3, #12
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	6838      	ldr	r0, [r7, #0]
 80014b6:	f002 f873 	bl	80035a0 <HAL_TIM_IC_Start_IT>
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	; 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08007258 	.word	0x08007258
 80014c8:	200001f0 	.word	0x200001f0

080014cc <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e023      	b.n	8001526 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <HCSR04_TMR_OVF_ISR+0x6c>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4403      	add	r3, r0
 80014f0:	3308      	adds	r3, #8
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4299      	cmp	r1, r3
 80014f6:	d113      	bne.n	8001520 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <HCSR04_TMR_OVF_ISR+0x70>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3302      	adds	r3, #2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	b298      	uxth	r0, r3
 800150e:	490b      	ldr	r1, [pc, #44]	; (800153c <HCSR04_TMR_OVF_ISR+0x70>)
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3302      	adds	r3, #2
 800151c:	4602      	mov	r2, r0
 800151e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d9d8      	bls.n	80014de <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	08007258 	.word	0x08007258
 800153c:	200001f0 	.word	0x200001f0

08001540 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e22a      	b.n	80019ac <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	486b      	ldr	r0, [pc, #428]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4403      	add	r3, r0
 8001568:	3308      	adds	r3, #8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4299      	cmp	r1, r3
 800156e:	f040 821a 	bne.w	80019a6 <HCSR04_TMR_IC_ISR+0x466>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7f19      	ldrb	r1, [r3, #28]
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	4865      	ldr	r0, [pc, #404]	; (8001710 <HCSR04_TMR_IC_ISR+0x1d0>)
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4403      	add	r3, r0
 8001584:	3320      	adds	r3, #32
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4299      	cmp	r1, r3
 800158a:	f040 820c 	bne.w	80019a6 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	495f      	ldr	r1, [pc, #380]	; (8001710 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80b8 	bne.w	8001714 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	4959      	ldr	r1, [pc, #356]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	330c      	adds	r3, #12
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	7bfc      	ldrb	r4, [r7, #15]
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f002 fc14 	bl	8003de8 <HAL_TIM_ReadCapturedValue>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4953      	ldr	r1, [pc, #332]	; (8001710 <HCSR04_TMR_IC_ISR+0x1d0>)
 80015c4:	4623      	mov	r3, r4
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4423      	add	r3, r4
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	330c      	adds	r3, #12
 80015d0:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	494e      	ldr	r1, [pc, #312]	; (8001710 <HCSR04_TMR_IC_ISR+0x1d0>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	4949      	ldr	r1, [pc, #292]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	330c      	adds	r3, #12
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d108      	bne.n	800160c <HCSR04_TMR_IC_ISR+0xcc>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020a 	bic.w	r2, r2, #10
 8001608:	621a      	str	r2, [r3, #32]
 800160a:	e02f      	b.n	800166c <HCSR04_TMR_IC_ISR+0x12c>
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	493f      	ldr	r1, [pc, #252]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	330c      	adds	r3, #12
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b04      	cmp	r3, #4
 8001620:	d108      	bne.n	8001634 <HCSR04_TMR_IC_ISR+0xf4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	e01b      	b.n	800166c <HCSR04_TMR_IC_ISR+0x12c>
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	4935      	ldr	r1, [pc, #212]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	330c      	adds	r3, #12
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b08      	cmp	r3, #8
 8001648:	d108      	bne.n	800165c <HCSR04_TMR_IC_ISR+0x11c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	e007      	b.n	800166c <HCSR04_TMR_IC_ISR+0x12c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	330c      	adds	r3, #12
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HCSR04_TMR_IC_ISR+0x154>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0202 	orr.w	r2, r2, #2
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	e02f      	b.n	80016f4 <HCSR04_TMR_IC_ISR+0x1b4>
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	491d      	ldr	r1, [pc, #116]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	330c      	adds	r3, #12
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d108      	bne.n	80016bc <HCSR04_TMR_IC_ISR+0x17c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e01b      	b.n	80016f4 <HCSR04_TMR_IC_ISR+0x1b4>
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	4913      	ldr	r1, [pc, #76]	; (800170c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	330c      	adds	r3, #12
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d108      	bne.n	80016e4 <HCSR04_TMR_IC_ISR+0x1a4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e007      	b.n	80016f4 <HCSR04_TMR_IC_ISR+0x1b4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f2:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	4906      	ldr	r1, [pc, #24]	; (8001710 <HCSR04_TMR_IC_ISR+0x1d0>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3302      	adds	r3, #2
 8001704:	2200      	movs	r2, #0
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	e14d      	b.n	80019a6 <HCSR04_TMR_IC_ISR+0x466>
 800170a:	bf00      	nop
 800170c:	08007258 	.word	0x08007258
 8001710:	200001f0 	.word	0x200001f0
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	49ac      	ldr	r1, [pc, #688]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 813e 	bne.w	80019a6 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	49a7      	ldr	r1, [pc, #668]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3308      	adds	r3, #8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	49a2      	ldr	r1, [pc, #648]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	3308      	adds	r3, #8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	489c      	ldr	r0, [pc, #624]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4403      	add	r3, r0
 8001762:	3308      	adds	r3, #8
 8001764:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	4998      	ldr	r1, [pc, #608]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	330c      	adds	r3, #12
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	7bfc      	ldrb	r4, [r7, #15]
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f002 fb33 	bl	8003de8 <HAL_TIM_ReadCapturedValue>
 8001782:	4602      	mov	r2, r0
 8001784:	4990      	ldr	r1, [pc, #576]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001786:	4623      	mov	r3, r4
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4423      	add	r3, r4
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3310      	adds	r3, #16
 8001792:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	498c      	ldr	r1, [pc, #560]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3310      	adds	r3, #16
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	4887      	ldr	r0, [pc, #540]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4403      	add	r3, r0
 80017b4:	3302      	adds	r3, #2
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	461c      	mov	r4, r3
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	4882      	ldr	r0, [pc, #520]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3308      	adds	r3, #8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	fb04 f303 	mul.w	r3, r4, r3
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	4419      	add	r1, r3
 80017d6:	487c      	ldr	r0, [pc, #496]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4403      	add	r3, r0
 80017e2:	3310      	adds	r3, #16
 80017e4:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	4977      	ldr	r1, [pc, #476]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3310      	adds	r3, #16
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	4873      	ldr	r0, [pc, #460]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	330c      	adds	r3, #12
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	1ac9      	subs	r1, r1, r3
 800180e:	486e      	ldr	r0, [pc, #440]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4403      	add	r3, r0
 800181a:	3314      	adds	r3, #20
 800181c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	4969      	ldr	r1, [pc, #420]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	3314      	adds	r3, #20
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fdd7 	bl	80003e4 <__aeabi_ui2d>
 8001836:	a362      	add	r3, pc, #392	; (adr r3, 80019c0 <HCSR04_TMR_IC_ISR+0x480>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fe4c 	bl	80004d8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	4960      	ldr	r1, [pc, #384]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3310      	adds	r3, #16
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fdbe 	bl	80003e4 <__aeabi_ui2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe ff5c 	bl	800072c <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	7bfc      	ldrb	r4, [r7, #15]
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f903 	bl	8000a88 <__aeabi_d2f>
 8001882:	4602      	mov	r2, r0
 8001884:	4950      	ldr	r1, [pc, #320]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001886:	4623      	mov	r3, r4
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4423      	add	r3, r4
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3318      	adds	r3, #24
 8001892:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	494c      	ldr	r1, [pc, #304]	; (80019c8 <HCSR04_TMR_IC_ISR+0x488>)
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	4948      	ldr	r1, [pc, #288]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	330c      	adds	r3, #12
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d108      	bne.n	80018ce <HCSR04_TMR_IC_ISR+0x38e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 020a 	bic.w	r2, r2, #10
 80018ca:	621a      	str	r2, [r3, #32]
 80018cc:	e02f      	b.n	800192e <HCSR04_TMR_IC_ISR+0x3ee>
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	493e      	ldr	r1, [pc, #248]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	330c      	adds	r3, #12
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d108      	bne.n	80018f6 <HCSR04_TMR_IC_ISR+0x3b6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e01b      	b.n	800192e <HCSR04_TMR_IC_ISR+0x3ee>
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	4934      	ldr	r1, [pc, #208]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	330c      	adds	r3, #12
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d108      	bne.n	800191e <HCSR04_TMR_IC_ISR+0x3de>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e007      	b.n	800192e <HCSR04_TMR_IC_ISR+0x3ee>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	4926      	ldr	r1, [pc, #152]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	330c      	adds	r3, #12
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <HCSR04_TMR_IC_ISR+0x412>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a12      	ldr	r2, [r2, #32]
 800194e:	621a      	str	r2, [r3, #32]
 8001950:	e029      	b.n	80019a6 <HCSR04_TMR_IC_ISR+0x466>
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	491d      	ldr	r1, [pc, #116]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	330c      	adds	r3, #12
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d106      	bne.n	8001976 <HCSR04_TMR_IC_ISR+0x436>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e017      	b.n	80019a6 <HCSR04_TMR_IC_ISR+0x466>
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	4914      	ldr	r1, [pc, #80]	; (80019cc <HCSR04_TMR_IC_ISR+0x48c>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	330c      	adds	r3, #12
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d106      	bne.n	800199a <HCSR04_TMR_IC_ISR+0x45a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e005      	b.n	80019a6 <HCSR04_TMR_IC_ISR+0x466>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	f67f add1 	bls.w	8001556 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	bf00      	nop
 80019c0:	b020c49c 	.word	0xb020c49c
 80019c4:	3f916872 	.word	0x3f916872
 80019c8:	200001f0 	.word	0x200001f0
 80019cc:	08007258 	.word	0x08007258

080019d0 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	/* float Distance_meters = gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;

	float Distance_centimeters = Distance_meters * 100.0; */

	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4906      	ldr	r1, [pc, #24]	; (80019f8 <HCSR04_Read+0x28>)
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3318      	adds	r3, #24
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200001f0 	.word	0x200001f0

080019fc <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	4923      	ldr	r1, [pc, #140]	; (8001a98 <HCSR04_Trigger+0x9c>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	491f      	ldr	r1, [pc, #124]	; (8001a98 <HCSR04_Trigger+0x9c>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3304      	adds	r3, #4
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f000 ff92 	bl	8002954 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HCSR04_Trigger+0xa0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HCSR04_Trigger+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HCSR04_Trigger+0xa8>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	005a      	lsls	r2, r3, #1
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HCSR04_Trigger+0xa4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HCSR04_Trigger+0xa8>)
 8001a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HCSR04_Trigger+0xa0>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f8      	bhi.n	8001a56 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <HCSR04_Trigger+0x9c>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	79fa      	ldrb	r2, [r7, #7]
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <HCSR04_Trigger+0x9c>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	3304      	adds	r3, #4
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f000 ff63 	bl	8002954 <HAL_GPIO_WritePin>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	08007258 	.word	0x08007258
 8001a9c:	e000e010 	.word	0xe000e010
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_GPIO_Init+0xb8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|LED_Pin
 8001b04:	2200      	movs	r2, #0
 8001b06:	f241 4133 	movw	r1, #5171	; 0x1433
 8001b0a:	4816      	ldr	r0, [pc, #88]	; (8001b64 <MX_GPIO_Init+0xbc>)
 8001b0c:	f000 ff22 	bl	8002954 <HAL_GPIO_WritePin>
                          |L298_IN3_Pin|L298_IN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_GPIO_Init+0xc0>)
 8001b18:	f000 ff1c 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|LED_Pin
 8001b1c:	f241 4333 	movw	r3, #5171	; 0x1433
 8001b20:	613b      	str	r3, [r7, #16]
                          |L298_IN3_Pin|L298_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <MX_GPIO_Init+0xbc>)
 8001b36:	f000 fd89 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8001b3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_GPIO_Init+0xc0>)
 8001b54:	f000 fd7a 	bl	800264c <HAL_GPIO_Init>

}
 8001b58:	bf00      	nop
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	40010800 	.word	0x40010800

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b72:	f000 fbd7 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b76:	f000 f863 	bl	8001c40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Sys_Init();
 8001b7a:	f000 f89d 	bl	8001cb8 <Sys_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7e:	f7ff ff93 	bl	8001aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b82:	f000 fb33 	bl	80021ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Local variables begin*/
  float Front_Distance = 0.0, Right_Distance = 0.0, Left_Distance = 0.0;
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	Right_Distance = HCSR04_Read(HCSR04_SENSOR1);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff ff19 	bl	80019d0 <HCSR04_Read>
 8001b9e:	60b8      	str	r0, [r7, #8]
    Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff ff15 	bl	80019d0 <HCSR04_Read>
 8001ba6:	60f8      	str	r0, [r7, #12]
	Left_Distance = HCSR04_Read(HCSR04_SENSOR3);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7ff ff11 	bl	80019d0 <HCSR04_Read>
 8001bae:	6078      	str	r0, [r7, #4]


	// Perform obstacle avoidance logic
	if (Right_Distance < THRESHOLD_DISTANCE || Front_Distance < THRESHOLD_DISTANCE || Left_Distance < THRESHOLD_DISTANCE) {
 8001bb0:	4922      	ldr	r1, [pc, #136]	; (8001c3c <main+0xd0>)
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f7ff f806 	bl	8000bc4 <__aeabi_fcmplt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10d      	bne.n	8001bda <main+0x6e>
 8001bbe:	491f      	ldr	r1, [pc, #124]	; (8001c3c <main+0xd0>)
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7fe ffff 	bl	8000bc4 <__aeabi_fcmplt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <main+0x6e>
 8001bcc:	491b      	ldr	r1, [pc, #108]	; (8001c3c <main+0xd0>)
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fff8 	bl	8000bc4 <__aeabi_fcmplt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d02a      	beq.n	8001c30 <main+0xc4>
		// Obstacle detected
		// Choose appropriate avoidance maneuver
	    if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	68b8      	ldr	r0, [r7, #8]
 8001bde:	f7fe fff1 	bl	8000bc4 <__aeabi_fcmplt>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <main+0x90>
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	68b8      	ldr	r0, [r7, #8]
 8001bec:	f7fe ffea 	bl	8000bc4 <__aeabi_fcmplt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <main+0x90>
	    	// Obstacle is closer to sensor 1
	    	move_left();
 8001bf6:	f000 f8e5 	bl	8001dc4 <move_left>
 8001bfa:	e018      	b.n	8001c2e <main+0xc2>
	    } else if (Front_Distance < Right_Distance && Front_Distance < Left_Distance) {
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7fe ffe0 	bl	8000bc4 <__aeabi_fcmplt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00e      	beq.n	8001c28 <main+0xbc>
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7fe ffd9 	bl	8000bc4 <__aeabi_fcmplt>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <main+0xbc>
	    	// Obstacle is closer to sensor 2
	    	stop();
 8001c18:	f000 f8e4 	bl	8001de4 <stop>
	    	move_backward();
 8001c1c:	f000 f8b2 	bl	8001d84 <move_backward>
	    	HAL_Delay(50);
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f000 fbe1 	bl	80023e8 <HAL_Delay>
 8001c26:	e002      	b.n	8001c2e <main+0xc2>

	    } else {
	    	// Obstacle is closer to sensor 3
	        move_right();
 8001c28:	f000 f8bc 	bl	8001da4 <move_right>
	    if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 8001c2c:	e002      	b.n	8001c34 <main+0xc8>
 8001c2e:	e001      	b.n	8001c34 <main+0xc8>
	    }
	} else {
		// No obstacle detected
	    move_forward();
 8001c30:	f000 f898 	bl	8001d64 <move_forward>
	}
	HAL_Delay(100);
 8001c34:	2064      	movs	r0, #100	; 0x64
 8001c36:	f000 fbd7 	bl	80023e8 <HAL_Delay>
	Right_Distance = HCSR04_Read(HCSR04_SENSOR1);
 8001c3a:	e7ad      	b.n	8001b98 <main+0x2c>
 8001c3c:	41a00000 	.word	0x41a00000

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b090      	sub	sp, #64	; 0x40
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb8b 	bl	800536a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fe85 	bl	8002984 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8001c80:	f000 f8ba 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 f8f2 	bl	8002e88 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001caa:	f000 f8a5 	bl	8001df8 <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3740      	adds	r7, #64	; 0x40
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <Sys_Init>:

/* USER CODE BEGIN 4 */
static void Sys_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HCSR04_Init(HCSR04_SENSOR1, &htim4);
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <Sys_Init+0x40>)
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff fa3e 	bl	8001140 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR2, &htim4);
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <Sys_Init+0x40>)
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff fa3a 	bl	8001140 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR3, &htim3);
 8001ccc:	490b      	ldr	r1, [pc, #44]	; (8001cfc <Sys_Init+0x44>)
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f7ff fa36 	bl	8001140 <HCSR04_Init>
    DC_MOTOR_Init(DC_MOTOR1);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7fe ff9d 	bl	8000c14 <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR2);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7fe ff9a 	bl	8000c14 <DC_MOTOR_Init>
    DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff f935 	bl	8000f54 <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff f930 	bl	8000f54 <DC_MOTOR_Start>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002a4 	.word	0x200002a4
 8001cfc:	2000025c 	.word	0x2000025c

08001d00 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fc19 	bl	8001540 <HCSR04_TMR_IC_ISR>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_OVF_ISR(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fbd4 	bl	80014cc <HCSR04_TMR_OVF_ISR>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <SysTick_CallBack>:

void SysTick_CallBack(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	TRIG_Ticks++;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <SysTick_CallBack+0x34>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <SysTick_CallBack+0x34>)
 8001d3a:	801a      	strh	r2, [r3, #0]
    if(TRIG_Ticks >= 10) // Each 10msec
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <SysTick_CallBack+0x34>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d90b      	bls.n	8001d5c <SysTick_CallBack+0x30>
    {
    	HCSR04_Trigger(HCSR04_SENSOR1);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fe59 	bl	80019fc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR2);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7ff fe56 	bl	80019fc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR3);
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7ff fe53 	bl	80019fc <HCSR04_Trigger>
    	TRIG_Ticks = 0;
 8001d56:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <SysTick_CallBack+0x34>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	801a      	strh	r2, [r3, #0]
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200002ec 	.word	0x200002ec

08001d64 <move_forward>:

void move_forward(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 0xffff);
 8001d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff f8f0 	bl	8000f54 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 0xffff);
 8001d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f7ff f8ea 	bl	8000f54 <DC_MOTOR_Start>
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <move_backward>:


void move_backward(void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 0xffff);
 8001d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff f8e0 	bl	8000f54 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 0xffff);
 8001d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff f8da 	bl	8000f54 <DC_MOTOR_Start>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <move_right>:


void move_right(void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, 0xffff);
 8001da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dac:	2101      	movs	r1, #1
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff f8d0 	bl	8000f54 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, 0xffff);
 8001db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db8:	2101      	movs	r1, #1
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff f8ca 	bl	8000f54 <DC_MOTOR_Start>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <move_left>:


void move_left(void){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, 0xffff);
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff f8c0 	bl	8000f54 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CW, 0xffff);
 8001dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f8ba 	bl	8000f54 <DC_MOTOR_Start>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <stop>:


void stop(void){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	DC_MOTOR_Stop(DC_MOTOR1);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff f943 	bl	8001074 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff f940 	bl	8001074 <DC_MOTOR_Stop>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x60>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_MspInit+0x60>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <NMI_Handler+0x4>

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eae:	f000 fa7f 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 8001eb2:	f7ff ff3b 	bl	8001d2c <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM3_IRQHandler+0x10>)
 8001ec2:	f001 fc73 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000025c 	.word	0x2000025c

08001ed0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM4_IRQHandler+0x10>)
 8001ed6:	f001 fc69 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002a4 	.word	0x200002a4

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <_kill>:

int _kill(int pid, int sig)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001efc:	f003 fa88 	bl	8005410 <__errno>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2216      	movs	r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
  return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_exit>:

void _exit (int status)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffe7 	bl	8001ef2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f24:	e7fe      	b.n	8001f24 <_exit+0x12>

08001f26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e00a      	b.n	8001f4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f38:	f3af 8000 	nop.w
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf0      	blt.n	8001f38 <_read+0x12>
  }

  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e009      	b.n	8001f86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf1      	blt.n	8001f72 <_write+0x12>
  }
  return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_close>:

int _close(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_isatty>:

int _isatty(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f003 f9f2 	bl	8005410 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20005000 	.word	0x20005000
 8002058:	00000400 	.word	0x00000400
 800205c:	200002f0 	.word	0x200002f0
 8002060:	20000488 	.word	0x20000488

08002064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_Base_MspInit>:

/* USER CODE END 0 */


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d10c      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020a8:	e062      	b.n	8002170 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_TIM_Base_MspInit+0x10c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12c      	bne.n	800210e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b4:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	61d3      	str	r3, [r2, #28]
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a29      	ldr	r2, [pc, #164]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Echo3_Pin;
 80020e4:	2340      	movs	r3, #64	; 0x40
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(Echo3_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 0320 	add.w	r3, r7, #32
 80020f4:	4619      	mov	r1, r3
 80020f6:	4822      	ldr	r0, [pc, #136]	; (8002180 <HAL_TIM_Base_MspInit+0x110>)
 80020f8:	f000 faa8 	bl	800264c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	201d      	movs	r0, #29
 8002102:	f000 fa6c 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002106:	201d      	movs	r0, #29
 8002108:	f000 fa85 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 800210c:	e030      	b.n	8002170 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM4)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_TIM_Base_MspInit+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12b      	bne.n	8002170 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a16      	ldr	r2, [pc, #88]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_TIM_Base_MspInit+0x108>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin;
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 800215c:	f000 fa76 	bl	800264c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	201e      	movs	r0, #30
 8002166:	f000 fa3a 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800216a:	201e      	movs	r0, #30
 800216c:	f000 fa53 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 8002170:	bf00      	nop
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40000400 	.word	0x40000400
 8002180:	40010800 	.word	0x40010800
 8002184:	40000800 	.word	0x40000800
 8002188:	40010c00 	.word	0x40010c00

0800218c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d117      	bne.n	80021dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_TIM_MspPostInit+0x58>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_TIM_MspPostInit+0x58>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_TIM_MspPostInit+0x58>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = L298_ENA_Pin|L298_ENB_Pin;
 80021c4:	2306      	movs	r3, #6
 80021c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	4619      	mov	r1, r3
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <HAL_TIM_MspPostInit+0x5c>)
 80021d8:	f000 fa38 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021dc:	bf00      	nop
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010800 	.word	0x40010800

080021ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <MX_USART1_UART_Init+0x50>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 80021f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002224:	f002 fa62 	bl	80046ec <HAL_UART_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800222e:	f7ff fde3 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200002f4 	.word	0x200002f4
 800223c:	40013800 	.word	0x40013800

08002240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_UART_MspInit+0x8c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d131      	bne.n	80022c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_UART_MspInit+0x90>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_UART_MspInit+0x90>)
 8002266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_UART_MspInit+0x90>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_UART_MspInit+0x90>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_UART_MspInit+0x90>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_UART_MspInit+0x90>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <HAL_UART_MspInit+0x94>)
 80022a6:	f000 f9d1 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_UART_MspInit+0x94>)
 80022c0:	f000 f9c4 	bl	800264c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010800 	.word	0x40010800

080022d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	; (8002310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	; (800231c <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022fe:	f7ff feb1 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002302:	f003 f88b 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002306:	f7ff fc31 	bl	8001b6c <main>
  bx lr
 800230a:	4770      	bx	lr
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002314:	08007624 	.word	0x08007624
  ldr r2, =_sbss
 8002318:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800231c:	20000488 	.word	0x20000488

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x28>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x28>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f947 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	200f      	movs	r0, #15
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff fd60 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f95f 	bl	8002632 <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f000 f927 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x1c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x20>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_IncTick+0x20>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000008 	.word	0x20000008
 80023d0:	20000338 	.word	0x20000338

080023d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <HAL_GetTick+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000338 	.word	0x20000338

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffe0 	bl	80023d4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000008 	.word	0x20000008

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <__NVIC_EnableIRQ+0x34>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff90 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff2d 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff42 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff90 	bl	8002520 <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5f 	bl	80024cc <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff35 	bl	8002494 <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e169      	b.n	8002934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002660:	2201      	movs	r2, #1
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8158 	bne.w	800292e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a9a      	ldr	r2, [pc, #616]	; (80028ec <HAL_GPIO_Init+0x2a0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d05e      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002688:	4a98      	ldr	r2, [pc, #608]	; (80028ec <HAL_GPIO_Init+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d875      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800268e:	4a98      	ldr	r2, [pc, #608]	; (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d058      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002694:	4a96      	ldr	r2, [pc, #600]	; (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d86f      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800269a:	4a96      	ldr	r2, [pc, #600]	; (80028f4 <HAL_GPIO_Init+0x2a8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d052      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026a0:	4a94      	ldr	r2, [pc, #592]	; (80028f4 <HAL_GPIO_Init+0x2a8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d869      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026a6:	4a94      	ldr	r2, [pc, #592]	; (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04c      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026ac:	4a92      	ldr	r2, [pc, #584]	; (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d863      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026b2:	4a92      	ldr	r2, [pc, #584]	; (80028fc <HAL_GPIO_Init+0x2b0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d046      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026b8:	4a90      	ldr	r2, [pc, #576]	; (80028fc <HAL_GPIO_Init+0x2b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d85d      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026be:	2b12      	cmp	r3, #18
 80026c0:	d82a      	bhi.n	8002718 <HAL_GPIO_Init+0xcc>
 80026c2:	2b12      	cmp	r3, #18
 80026c4:	d859      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <HAL_GPIO_Init+0x80>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002733 	.word	0x08002733
 80026d8:	08002775 	.word	0x08002775
 80026dc:	0800277b 	.word	0x0800277b
 80026e0:	0800277b 	.word	0x0800277b
 80026e4:	0800277b 	.word	0x0800277b
 80026e8:	0800277b 	.word	0x0800277b
 80026ec:	0800277b 	.word	0x0800277b
 80026f0:	0800277b 	.word	0x0800277b
 80026f4:	0800277b 	.word	0x0800277b
 80026f8:	0800277b 	.word	0x0800277b
 80026fc:	0800277b 	.word	0x0800277b
 8002700:	0800277b 	.word	0x0800277b
 8002704:	0800277b 	.word	0x0800277b
 8002708:	0800277b 	.word	0x0800277b
 800270c:	0800277b 	.word	0x0800277b
 8002710:	08002729 	.word	0x08002729
 8002714:	0800273d 	.word	0x0800273d
 8002718:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_GPIO_Init+0x2b4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800271e:	e02c      	b.n	800277a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e029      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	3304      	adds	r3, #4
 800272e:	623b      	str	r3, [r7, #32]
          break;
 8002730:	e024      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	3308      	adds	r3, #8
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e01f      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	330c      	adds	r3, #12
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e01a      	b.n	800277c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800274e:	2304      	movs	r3, #4
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e013      	b.n	800277c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	611a      	str	r2, [r3, #16]
          break;
 8002766:	e009      	b.n	800277c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002768:	2308      	movs	r3, #8
 800276a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	615a      	str	r2, [r3, #20]
          break;
 8002772:	e003      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x130>
          break;
 800277a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2bff      	cmp	r3, #255	; 0xff
 8002780:	d801      	bhi.n	8002786 <HAL_GPIO_Init+0x13a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	e001      	b.n	800278a <HAL_GPIO_Init+0x13e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d802      	bhi.n	8002798 <HAL_GPIO_Init+0x14c>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x152>
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	3b08      	subs	r3, #8
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	210f      	movs	r1, #15
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80b1 	beq.w	800292e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027cc:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_GPIO_Init+0x2b8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027e4:	4a48      	ldr	r2, [pc, #288]	; (8002908 <HAL_GPIO_Init+0x2bc>)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a40      	ldr	r2, [pc, #256]	; (800290c <HAL_GPIO_Init+0x2c0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_Init+0x1ec>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_GPIO_Init+0x2c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1e8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <HAL_GPIO_Init+0x2c8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1e4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3d      	ldr	r2, [pc, #244]	; (8002918 <HAL_GPIO_Init+0x2cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1e0>
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 800282c:	2304      	movs	r3, #4
 800282e:	e004      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002830:	2302      	movs	r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002838:	2300      	movs	r3, #0
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	4093      	lsls	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800284a:	492f      	ldr	r1, [pc, #188]	; (8002908 <HAL_GPIO_Init+0x2bc>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	492c      	ldr	r1, [pc, #176]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002872:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	4928      	ldr	r1, [pc, #160]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4922      	ldr	r1, [pc, #136]	; (800291c <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_GPIO_Init+0x2d0>)
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	491e      	ldr	r1, [pc, #120]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4918      	ldr	r1, [pc, #96]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4914      	ldr	r1, [pc, #80]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d021      	beq.n	8002920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
 80028e8:	e021      	b.n	800292e <HAL_GPIO_Init+0x2e2>
 80028ea:	bf00      	nop
 80028ec:	10320000 	.word	0x10320000
 80028f0:	10310000 	.word	0x10310000
 80028f4:	10220000 	.word	0x10220000
 80028f8:	10210000 	.word	0x10210000
 80028fc:	10120000 	.word	0x10120000
 8002900:	10110000 	.word	0x10110000
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	40010800 	.word	0x40010800
 8002910:	40010c00 	.word	0x40010c00
 8002914:	40011000 	.word	0x40011000
 8002918:	40011400 	.word	0x40011400
 800291c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	43db      	mvns	r3, r3
 8002928:	4909      	ldr	r1, [pc, #36]	; (8002950 <HAL_GPIO_Init+0x304>)
 800292a:	4013      	ands	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f ae8e 	bne.w	8002660 <HAL_GPIO_Init+0x14>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	372c      	adds	r7, #44	; 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e272      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8087 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a4:	4b92      	ldr	r3, [pc, #584]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d00c      	beq.n	80029ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b0:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d112      	bne.n	80029e2 <HAL_RCC_OscConfig+0x5e>
 80029bc:	4b8c      	ldr	r3, [pc, #560]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d06c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x12c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d168      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e24c      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x76>
 80029ec:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a7f      	ldr	r2, [pc, #508]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	e02e      	b.n	8002a58 <HAL_RCC_OscConfig+0xd4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x98>
 8002a02:	4b7b      	ldr	r3, [pc, #492]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7a      	ldr	r2, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b78      	ldr	r3, [pc, #480]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a77      	ldr	r2, [pc, #476]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xd4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0xbc>
 8002a26:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a71      	ldr	r2, [pc, #452]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6f      	ldr	r3, [pc, #444]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6e      	ldr	r2, [pc, #440]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xd4>
 8002a40:	4b6b      	ldr	r3, [pc, #428]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fcb8 	bl	80023d4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff fcb4 	bl	80023d4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e200      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe4>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fca4 	bl	80023d4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff fca0 	bl	80023d4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1ec      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x10c>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aca:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x18c>
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x176>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1c0      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4939      	ldr	r1, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7ff fc59 	bl	80023d4 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff fc55 	bl	80023d4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1a1      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4927      	ldr	r1, [pc, #156]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff fc38 	bl	80023d4 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff fc34 	bl	80023d4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e180      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d03a      	beq.n	8002c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d019      	beq.n	8002bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fc18 	bl	80023d4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff fc14 	bl	80023d4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e160      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f000 fad8 	bl	800317c <RCC_Delay>
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7ff fbfe 	bl	80023d4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bda:	e00f      	b.n	8002bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7ff fbfa 	bl	80023d4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d908      	bls.n	8002bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e146      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	42420000 	.word	0x42420000
 8002bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e9      	bne.n	8002bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a6 	beq.w	8002d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b8b      	ldr	r3, [pc, #556]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b85      	ldr	r3, [pc, #532]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b82      	ldr	r3, [pc, #520]	; (8002e4c <HAL_RCC_OscConfig+0x4c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x4c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fbbb 	bl	80023d4 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7ff fbb7 	bl	80023d4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e103      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x4c8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x312>
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	e02d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x36e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x334>
 8002c9e:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a69      	ldr	r2, [pc, #420]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	e01c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x36e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x356>
 8002cc0:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a60      	ldr	r2, [pc, #384]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x36e>
 8002cda:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a5a      	ldr	r2, [pc, #360]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a57      	ldr	r2, [pc, #348]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fb6b 	bl	80023d4 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7ff fb67 	bl	80023d4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0b1      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ee      	beq.n	8002d02 <HAL_RCC_OscConfig+0x37e>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff fb55 	bl	80023d4 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7ff fb51 	bl	80023d4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e09b      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8087 	beq.w	8002e7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d061      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d146      	bne.n	8002e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7ff fb25 	bl	80023d4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7ff fb21 	bl	80023d4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e06d      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d108      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4921      	ldr	r1, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a19      	ldr	r1, [r3, #32]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	491b      	ldr	r1, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7ff faf5 	bl	80023d4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dee:	f7ff faf1 	bl	80023d4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e03d      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x46a>
 8002e0c:	e035      	b.n	8002e7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7ff fade 	bl	80023d4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7ff fada 	bl	80023d4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e026      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x498>
 8002e3a:	e01e      	b.n	8002e7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e019      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x500>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d0      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4965      	ldr	r1, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d040      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e073      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06b      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4936      	ldr	r1, [pc, #216]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7ff fa2c 	bl	80023d4 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7ff fa28 	bl	80023d4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e053      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d210      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0207 	bic.w	r2, r3, #7
 8002fbe:	4922      	ldr	r1, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1cc>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f98a 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	08007294 	.word	0x08007294
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b490      	push	{r4, r7}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCC_GetSysClockFreq+0xac>)
 8003064:	1d3c      	adds	r4, r7, #4
 8003066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800306c:	f240 2301 	movw	r3, #513	; 0x201
 8003070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x40>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x46>
 800309a:	e02b      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800309e:	623b      	str	r3, [r7, #32]
      break;
 80030a0:	e02b      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3328      	adds	r3, #40	; 0x28
 80030ac:	443b      	add	r3, r7
 80030ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	3328      	adds	r3, #40	; 0x28
 80030ca:	443b      	add	r3, r7
 80030cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d6:	fb03 f202 	mul.w	r2, r3, r2
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e004      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	623b      	str	r3, [r7, #32]
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030f6:	623b      	str	r3, [r7, #32]
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc90      	pop	{r4, r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	08007208 	.word	0x08007208
 800310c:	40021000 	.word	0x40021000
 8003110:	007a1200 	.word	0x007a1200
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	080072a4 	.word	0x080072a4

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	080072a4 	.word	0x080072a4

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000000 	.word	0x20000000
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe ff46 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fe56 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d001      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e03a      	b.n	80032e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_TIM_Base_Start_IT+0x98>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x58>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d010      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	e007      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f839 	bl	800339a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fdb4 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x24>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e022      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d109      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e015      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x58>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e05e      	b.n	80034dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800342c:	e013      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x92>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	e00b      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344c:	e003      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f8af 	bl	80045c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_TIM_PWM_Start+0x138>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d107      	bne.n	800347e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_TIM_PWM_Start+0x138>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_TIM_PWM_Start+0x13c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_TIM_PWM_Start+0x140>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d010      	beq.n	80034da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	e007      	b.n	80034da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800

080034f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e041      	b.n	8003586 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f839 	bl	800358e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 fcba 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0x1a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e013      	b.n	80035e2 <HAL_TIM_IC_Start_IT+0x42>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d104      	bne.n	80035ca <HAL_TIM_IC_Start_IT+0x2a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e00b      	b.n	80035e2 <HAL_TIM_IC_Start_IT+0x42>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d104      	bne.n	80035da <HAL_TIM_IC_Start_IT+0x3a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e003      	b.n	80035e2 <HAL_TIM_IC_Start_IT+0x42>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_TIM_IC_Start_IT+0x54>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e013      	b.n	800361c <HAL_TIM_IC_Start_IT+0x7c>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d104      	bne.n	8003604 <HAL_TIM_IC_Start_IT+0x64>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e00b      	b.n	800361c <HAL_TIM_IC_Start_IT+0x7c>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d104      	bne.n	8003614 <HAL_TIM_IC_Start_IT+0x74>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e003      	b.n	800361c <HAL_TIM_IC_Start_IT+0x7c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361a:	b2db      	uxtb	r3, r3
 800361c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003624:	7bbb      	ldrb	r3, [r7, #14]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0b3      	b.n	8003796 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_TIM_IC_Start_IT+0x9e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800363c:	e013      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xc6>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d104      	bne.n	800364e <HAL_TIM_IC_Start_IT+0xae>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	e00b      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xc6>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0xbe>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	e003      	b.n	8003666 <HAL_TIM_IC_Start_IT+0xc6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_TIM_IC_Start_IT+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003674:	e013      	b.n	800369e <HAL_TIM_IC_Start_IT+0xfe>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d104      	bne.n	8003686 <HAL_TIM_IC_Start_IT+0xe6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003684:	e00b      	b.n	800369e <HAL_TIM_IC_Start_IT+0xfe>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d104      	bne.n	8003696 <HAL_TIM_IC_Start_IT+0xf6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003694:	e003      	b.n	800369e <HAL_TIM_IC_Start_IT+0xfe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d841      	bhi.n	8003728 <HAL_TIM_IC_Start_IT+0x188>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_TIM_IC_Start_IT+0x10c>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	08003729 	.word	0x08003729
 80036b4:	08003729 	.word	0x08003729
 80036b8:	08003729 	.word	0x08003729
 80036bc:	080036f3 	.word	0x080036f3
 80036c0:	08003729 	.word	0x08003729
 80036c4:	08003729 	.word	0x08003729
 80036c8:	08003729 	.word	0x08003729
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003729 	.word	0x08003729
 80036d4:	08003729 	.word	0x08003729
 80036d8:	08003729 	.word	0x08003729
 80036dc:	08003717 	.word	0x08003717
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0202 	orr.w	r2, r2, #2
 80036ee:	60da      	str	r2, [r3, #12]
      break;
 80036f0:	e01b      	b.n	800372a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0204 	orr.w	r2, r2, #4
 8003700:	60da      	str	r2, [r3, #12]
      break;
 8003702:	e012      	b.n	800372a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	60da      	str	r2, [r3, #12]
      break;
 8003714:	e009      	b.n	800372a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0210 	orr.w	r2, r2, #16
 8003724:	60da      	str	r2, [r3, #12]
      break;
 8003726:	e000      	b.n	800372a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003728:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 ff45 	bl	80045c2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_TIM_IC_Start_IT+0x200>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_TIM_IC_Start_IT+0x1c0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d009      	beq.n	8003760 <HAL_TIM_IC_Start_IT+0x1c0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_TIM_IC_Start_IT+0x204>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_IC_Start_IT+0x1c0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_TIM_IC_Start_IT+0x208>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d010      	beq.n	8003794 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	e007      	b.n	8003794 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0202 	mvn.w	r2, #2
 80037d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fe fa86 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb3a 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb40 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fa5c 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fb10 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb16 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0208 	mvn.w	r2, #8
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fe fa32 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fae6 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 faec 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe fa08 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fabc 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fac2 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0201 	mvn.w	r2, #1
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe f9f3 	bl	8001d16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 febf 	bl	80046da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa86 	bl	8003e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0220 	mvn.w	r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fe8a 	bl	80046c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e082      	b.n	8003adc <HAL_TIM_IC_ConfigChannel+0x120>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11b      	bne.n	8003a1c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f000 fc42 	bl	800427c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 020c 	bic.w	r2, r2, #12
 8003a06:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6999      	ldr	r1, [r3, #24]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	619a      	str	r2, [r3, #24]
 8003a1a:	e05a      	b.n	8003ad2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d11c      	bne.n	8003a5c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f000 fcab 	bl	800438c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a44:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6999      	ldr	r1, [r3, #24]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	619a      	str	r2, [r3, #24]
 8003a5a:	e03a      	b.n	8003ad2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d11b      	bne.n	8003a9a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f000 fcf6 	bl	8004462 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 020c 	bic.w	r2, r2, #12
 8003a84:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69d9      	ldr	r1, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
 8003a98:	e01b      	b.n	8003ad2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f000 fd15 	bl	80044d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003abc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0ac      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	f200 809f 	bhi.w	8003c4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b0e:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003c4d 	.word	0x08003c4d
 8003b1c:	08003c4d 	.word	0x08003c4d
 8003b20:	08003c4d 	.word	0x08003c4d
 8003b24:	08003b89 	.word	0x08003b89
 8003b28:	08003c4d 	.word	0x08003c4d
 8003b2c:	08003c4d 	.word	0x08003c4d
 8003b30:	08003c4d 	.word	0x08003c4d
 8003b34:	08003bcb 	.word	0x08003bcb
 8003b38:	08003c4d 	.word	0x08003c4d
 8003b3c:	08003c4d 	.word	0x08003c4d
 8003b40:	08003c4d 	.word	0x08003c4d
 8003b44:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fa0c 	bl	8003f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
      break;
 8003b86:	e062      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fa52 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
      break;
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fa9b 	bl	800410c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0208 	orr.w	r2, r2, #8
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0204 	bic.w	r2, r2, #4
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	61da      	str	r2, [r3, #28]
      break;
 8003c08:	e021      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fae5 	bl	80041e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69d9      	ldr	r1, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	61da      	str	r2, [r3, #28]
      break;
 8003c4a:	e000      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_ConfigClockSource+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0b3      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x180>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d03e      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0xd0>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	f200 8087 	bhi.w	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbe:	f000 8085 	beq.w	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	d87f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d01a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xa2>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d87b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cd0:	2b60      	cmp	r3, #96	; 0x60
 8003cd2:	d050      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x116>
 8003cd4:	2b60      	cmp	r3, #96	; 0x60
 8003cd6:	d877      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cd8:	2b50      	cmp	r3, #80	; 0x50
 8003cda:	d03c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xf6>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d873      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d058      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x136>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d86f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ce8:	2b30      	cmp	r3, #48	; 0x30
 8003cea:	d064      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d060      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d05a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d00:	e062      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f000 fc37 	bl	8004584 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
      break;
 8003d2e:	e04e      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f000 fc20 	bl	8004584 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d52:	609a      	str	r2, [r3, #8]
      break;
 8003d54:	e03b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fae4 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2150      	movs	r1, #80	; 0x50
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fbee 	bl	8004550 <TIM_ITRx_SetConfig>
      break;
 8003d74:	e02b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fb3e 	bl	8004404 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2160      	movs	r1, #96	; 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fbde 	bl	8004550 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e01b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fac4 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fbce 	bl	8004550 <TIM_ITRx_SetConfig>
      break;
 8003db4:	e00b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fbc5 	bl	8004550 <TIM_ITRx_SetConfig>
        break;
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	d831      	bhi.n	8003e60 <HAL_TIM_ReadCapturedValue+0x78>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e57 	.word	0x08003e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	60fb      	str	r3, [r7, #12]

      break;
 8003e40:	e00f      	b.n	8003e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	60fb      	str	r3, [r7, #12]

      break;
 8003e4a:	e00a      	b.n	8003e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	60fb      	str	r3, [r7, #12]

      break;
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	60fb      	str	r3, [r7, #12]

      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e60:	bf00      	nop
  }

  return tmpreg;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
	...

08003ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0302 	bic.w	r3, r3, #2
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <TIM_OC1_SetConfig+0xc8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10c      	bne.n	8003fe2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0308 	bic.w	r3, r3, #8
 8003fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <TIM_OC1_SetConfig+0xc8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d111      	bne.n	800400e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	621a      	str	r2, [r3, #32]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0210 	bic.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0320 	bic.w	r3, r3, #32
 8004082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <TIM_OC2_SetConfig+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10d      	bne.n	80040b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC2_SetConfig+0xd0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d113      	bne.n	80040e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	40012c00 	.word	0x40012c00

0800410c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <TIM_OC3_SetConfig+0xd0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10d      	bne.n	8004186 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_OC3_SetConfig+0xd0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d113      	bne.n	80041b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	621a      	str	r2, [r3, #32]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00

080041e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800422a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <TIM_OC4_SetConfig+0x98>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d109      	bne.n	8004254 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00

0800427c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <TIM_TI1_SetConfig+0xa8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_TI1_SetConfig+0x46>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d007      	beq.n	80042c2 <TIM_TI1_SetConfig+0x46>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <TIM_TI1_SetConfig+0xac>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_TI1_SetConfig+0x46>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <TIM_TI1_SetConfig+0xb0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <TIM_TI1_SetConfig+0x4a>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <TIM_TI1_SetConfig+0x4c>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e003      	b.n	80042e6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 030a 	and.w	r3, r3, #10
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	031b      	lsls	r3, r3, #12
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f023 0210 	bic.w	r2, r3, #16
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	031b      	lsls	r3, r3, #12
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004516:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	b29b      	uxth	r3, r3
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800452a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	f043 0307 	orr.w	r3, r3, #7
 8004572:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	609a      	str	r2, [r3, #8]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2201      	movs	r2, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	401a      	ands	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
	...

0800460c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e046      	b.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d009      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10c      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800

080046c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03f      	b.n	800477e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd fd94 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f829 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047c2:	f023 030c 	bic.w	r3, r3, #12
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <UART_SetConfig+0x114>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe fcb0 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	e002      	b.n	80047fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7fe fc98 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 80047fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009a      	lsls	r2, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <UART_SetConfig+0x118>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	0119      	lsls	r1, r3, #4
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <UART_SetConfig+0x118>)
 8004836:	fba3 0302 	umull	r0, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2064      	movs	r0, #100	; 0x64
 800483e:	fb00 f303 	mul.w	r3, r0, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	; 0x32
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004854:	4419      	add	r1, r3
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009a      	lsls	r2, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	fbb2 f2f3 	udiv	r2, r2, r3
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <UART_SetConfig+0x118>)
 800486e:	fba3 0302 	umull	r0, r3, r3, r2
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2064      	movs	r0, #100	; 0x64
 8004876:	fb00 f303 	mul.w	r3, r0, r3
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	3332      	adds	r3, #50	; 0x32
 8004880:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <UART_SetConfig+0x118>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	440a      	add	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40013800 	.word	0x40013800
 80048a0:	51eb851f 	.word	0x51eb851f

080048a4 <__cvt>:
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048aa:	461f      	mov	r7, r3
 80048ac:	bfbb      	ittet	lt
 80048ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048b2:	461f      	movlt	r7, r3
 80048b4:	2300      	movge	r3, #0
 80048b6:	232d      	movlt	r3, #45	; 0x2d
 80048b8:	b088      	sub	sp, #32
 80048ba:	4614      	mov	r4, r2
 80048bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048c0:	7013      	strb	r3, [r2, #0]
 80048c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048c8:	f023 0820 	bic.w	r8, r3, #32
 80048cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048d0:	d005      	beq.n	80048de <__cvt+0x3a>
 80048d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048d6:	d100      	bne.n	80048da <__cvt+0x36>
 80048d8:	3501      	adds	r5, #1
 80048da:	2302      	movs	r3, #2
 80048dc:	e000      	b.n	80048e0 <__cvt+0x3c>
 80048de:	2303      	movs	r3, #3
 80048e0:	aa07      	add	r2, sp, #28
 80048e2:	9204      	str	r2, [sp, #16]
 80048e4:	aa06      	add	r2, sp, #24
 80048e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048ea:	e9cd 3500 	strd	r3, r5, [sp]
 80048ee:	4622      	mov	r2, r4
 80048f0:	463b      	mov	r3, r7
 80048f2:	f000 fe51 	bl	8005598 <_dtoa_r>
 80048f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048fa:	4606      	mov	r6, r0
 80048fc:	d102      	bne.n	8004904 <__cvt+0x60>
 80048fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004900:	07db      	lsls	r3, r3, #31
 8004902:	d522      	bpl.n	800494a <__cvt+0xa6>
 8004904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004908:	eb06 0905 	add.w	r9, r6, r5
 800490c:	d110      	bne.n	8004930 <__cvt+0x8c>
 800490e:	7833      	ldrb	r3, [r6, #0]
 8004910:	2b30      	cmp	r3, #48	; 0x30
 8004912:	d10a      	bne.n	800492a <__cvt+0x86>
 8004914:	2200      	movs	r2, #0
 8004916:	2300      	movs	r3, #0
 8004918:	4620      	mov	r0, r4
 800491a:	4639      	mov	r1, r7
 800491c:	f7fc f844 	bl	80009a8 <__aeabi_dcmpeq>
 8004920:	b918      	cbnz	r0, 800492a <__cvt+0x86>
 8004922:	f1c5 0501 	rsb	r5, r5, #1
 8004926:	f8ca 5000 	str.w	r5, [sl]
 800492a:	f8da 3000 	ldr.w	r3, [sl]
 800492e:	4499      	add	r9, r3
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	4620      	mov	r0, r4
 8004936:	4639      	mov	r1, r7
 8004938:	f7fc f836 	bl	80009a8 <__aeabi_dcmpeq>
 800493c:	b108      	cbz	r0, 8004942 <__cvt+0x9e>
 800493e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004942:	2230      	movs	r2, #48	; 0x30
 8004944:	9b07      	ldr	r3, [sp, #28]
 8004946:	454b      	cmp	r3, r9
 8004948:	d307      	bcc.n	800495a <__cvt+0xb6>
 800494a:	4630      	mov	r0, r6
 800494c:	9b07      	ldr	r3, [sp, #28]
 800494e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004950:	1b9b      	subs	r3, r3, r6
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	b008      	add	sp, #32
 8004956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	9107      	str	r1, [sp, #28]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e7f0      	b.n	8004944 <__cvt+0xa0>

08004962 <__exponent>:
 8004962:	4603      	mov	r3, r0
 8004964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004966:	2900      	cmp	r1, #0
 8004968:	f803 2b02 	strb.w	r2, [r3], #2
 800496c:	bfb6      	itet	lt
 800496e:	222d      	movlt	r2, #45	; 0x2d
 8004970:	222b      	movge	r2, #43	; 0x2b
 8004972:	4249      	neglt	r1, r1
 8004974:	2909      	cmp	r1, #9
 8004976:	7042      	strb	r2, [r0, #1]
 8004978:	dd2a      	ble.n	80049d0 <__exponent+0x6e>
 800497a:	f10d 0207 	add.w	r2, sp, #7
 800497e:	4617      	mov	r7, r2
 8004980:	260a      	movs	r6, #10
 8004982:	fb91 f5f6 	sdiv	r5, r1, r6
 8004986:	4694      	mov	ip, r2
 8004988:	fb06 1415 	mls	r4, r6, r5, r1
 800498c:	3430      	adds	r4, #48	; 0x30
 800498e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004992:	460c      	mov	r4, r1
 8004994:	2c63      	cmp	r4, #99	; 0x63
 8004996:	4629      	mov	r1, r5
 8004998:	f102 32ff 	add.w	r2, r2, #4294967295
 800499c:	dcf1      	bgt.n	8004982 <__exponent+0x20>
 800499e:	3130      	adds	r1, #48	; 0x30
 80049a0:	f1ac 0402 	sub.w	r4, ip, #2
 80049a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049a8:	4622      	mov	r2, r4
 80049aa:	1c41      	adds	r1, r0, #1
 80049ac:	42ba      	cmp	r2, r7
 80049ae:	d30a      	bcc.n	80049c6 <__exponent+0x64>
 80049b0:	f10d 0209 	add.w	r2, sp, #9
 80049b4:	eba2 020c 	sub.w	r2, r2, ip
 80049b8:	42bc      	cmp	r4, r7
 80049ba:	bf88      	it	hi
 80049bc:	2200      	movhi	r2, #0
 80049be:	4413      	add	r3, r2
 80049c0:	1a18      	subs	r0, r3, r0
 80049c2:	b003      	add	sp, #12
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049ce:	e7ed      	b.n	80049ac <__exponent+0x4a>
 80049d0:	2330      	movs	r3, #48	; 0x30
 80049d2:	3130      	adds	r1, #48	; 0x30
 80049d4:	7083      	strb	r3, [r0, #2]
 80049d6:	70c1      	strb	r1, [r0, #3]
 80049d8:	1d03      	adds	r3, r0, #4
 80049da:	e7f1      	b.n	80049c0 <__exponent+0x5e>

080049dc <_printf_float>:
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	b091      	sub	sp, #68	; 0x44
 80049e2:	460c      	mov	r4, r1
 80049e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049e8:	4616      	mov	r6, r2
 80049ea:	461f      	mov	r7, r3
 80049ec:	4605      	mov	r5, r0
 80049ee:	f000 fcc5 	bl	800537c <_localeconv_r>
 80049f2:	6803      	ldr	r3, [r0, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	9309      	str	r3, [sp, #36]	; 0x24
 80049f8:	f7fb fbaa 	bl	8000150 <strlen>
 80049fc:	2300      	movs	r3, #0
 80049fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004a00:	f8d8 3000 	ldr.w	r3, [r8]
 8004a04:	900a      	str	r0, [sp, #40]	; 0x28
 8004a06:	3307      	adds	r3, #7
 8004a08:	f023 0307 	bic.w	r3, r3, #7
 8004a0c:	f103 0208 	add.w	r2, r3, #8
 8004a10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a14:	f8d4 b000 	ldr.w	fp, [r4]
 8004a18:	f8c8 2000 	str.w	r2, [r8]
 8004a1c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a20:	4652      	mov	r2, sl
 8004a22:	4643      	mov	r3, r8
 8004a24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a28:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	4650      	mov	r0, sl
 8004a34:	4b9c      	ldr	r3, [pc, #624]	; (8004ca8 <_printf_float+0x2cc>)
 8004a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a38:	f7fb ffe8 	bl	8000a0c <__aeabi_dcmpun>
 8004a3c:	bb70      	cbnz	r0, 8004a9c <_printf_float+0xc0>
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a42:	4650      	mov	r0, sl
 8004a44:	4b98      	ldr	r3, [pc, #608]	; (8004ca8 <_printf_float+0x2cc>)
 8004a46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a48:	f7fb ffc2 	bl	80009d0 <__aeabi_dcmple>
 8004a4c:	bb30      	cbnz	r0, 8004a9c <_printf_float+0xc0>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2300      	movs	r3, #0
 8004a52:	4650      	mov	r0, sl
 8004a54:	4641      	mov	r1, r8
 8004a56:	f7fb ffb1 	bl	80009bc <__aeabi_dcmplt>
 8004a5a:	b110      	cbz	r0, 8004a62 <_printf_float+0x86>
 8004a5c:	232d      	movs	r3, #45	; 0x2d
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a62:	4a92      	ldr	r2, [pc, #584]	; (8004cac <_printf_float+0x2d0>)
 8004a64:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <_printf_float+0x2d4>)
 8004a66:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a6a:	bf94      	ite	ls
 8004a6c:	4690      	movls	r8, r2
 8004a6e:	4698      	movhi	r8, r3
 8004a70:	2303      	movs	r3, #3
 8004a72:	f04f 0a00 	mov.w	sl, #0
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	f02b 0304 	bic.w	r3, fp, #4
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	4633      	mov	r3, r6
 8004a80:	4621      	mov	r1, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	9700      	str	r7, [sp, #0]
 8004a86:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a88:	f000 f9d6 	bl	8004e38 <_printf_common>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f040 8090 	bne.w	8004bb2 <_printf_float+0x1d6>
 8004a92:	f04f 30ff 	mov.w	r0, #4294967295
 8004a96:	b011      	add	sp, #68	; 0x44
 8004a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4643      	mov	r3, r8
 8004aa0:	4650      	mov	r0, sl
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	f7fb ffb2 	bl	8000a0c <__aeabi_dcmpun>
 8004aa8:	b148      	cbz	r0, 8004abe <_printf_float+0xe2>
 8004aaa:	f1b8 0f00 	cmp.w	r8, #0
 8004aae:	bfb8      	it	lt
 8004ab0:	232d      	movlt	r3, #45	; 0x2d
 8004ab2:	4a80      	ldr	r2, [pc, #512]	; (8004cb4 <_printf_float+0x2d8>)
 8004ab4:	bfb8      	it	lt
 8004ab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004aba:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <_printf_float+0x2dc>)
 8004abc:	e7d3      	b.n	8004a66 <_printf_float+0x8a>
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	d142      	bne.n	8004b4e <_printf_float+0x172>
 8004ac8:	2306      	movs	r3, #6
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	9206      	str	r2, [sp, #24]
 8004ad0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ad2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ad6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ad8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004adc:	9203      	str	r2, [sp, #12]
 8004ade:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ae2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	4652      	mov	r2, sl
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	4628      	mov	r0, r5
 8004af0:	4643      	mov	r3, r8
 8004af2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004af4:	f7ff fed6 	bl	80048a4 <__cvt>
 8004af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004afa:	4680      	mov	r8, r0
 8004afc:	2947      	cmp	r1, #71	; 0x47
 8004afe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b00:	d108      	bne.n	8004b14 <_printf_float+0x138>
 8004b02:	1cc8      	adds	r0, r1, #3
 8004b04:	db02      	blt.n	8004b0c <_printf_float+0x130>
 8004b06:	6863      	ldr	r3, [r4, #4]
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	dd40      	ble.n	8004b8e <_printf_float+0x1b2>
 8004b0c:	f1a9 0902 	sub.w	r9, r9, #2
 8004b10:	fa5f f989 	uxtb.w	r9, r9
 8004b14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b18:	d81f      	bhi.n	8004b5a <_printf_float+0x17e>
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	3901      	subs	r1, #1
 8004b1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b22:	910d      	str	r1, [sp, #52]	; 0x34
 8004b24:	f7ff ff1d 	bl	8004962 <__exponent>
 8004b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b2a:	4682      	mov	sl, r0
 8004b2c:	1813      	adds	r3, r2, r0
 8004b2e:	2a01      	cmp	r2, #1
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	dc02      	bgt.n	8004b3a <_printf_float+0x15e>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	07d2      	lsls	r2, r2, #31
 8004b38:	d501      	bpl.n	8004b3e <_printf_float+0x162>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d09b      	beq.n	8004a7e <_printf_float+0xa2>
 8004b46:	232d      	movs	r3, #45	; 0x2d
 8004b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b4c:	e797      	b.n	8004a7e <_printf_float+0xa2>
 8004b4e:	2947      	cmp	r1, #71	; 0x47
 8004b50:	d1bc      	bne.n	8004acc <_printf_float+0xf0>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ba      	bne.n	8004acc <_printf_float+0xf0>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7b7      	b.n	8004aca <_printf_float+0xee>
 8004b5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b5e:	d118      	bne.n	8004b92 <_printf_float+0x1b6>
 8004b60:	2900      	cmp	r1, #0
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	dd0b      	ble.n	8004b7e <_printf_float+0x1a2>
 8004b66:	6121      	str	r1, [r4, #16]
 8004b68:	b913      	cbnz	r3, 8004b70 <_printf_float+0x194>
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	07d0      	lsls	r0, r2, #31
 8004b6e:	d502      	bpl.n	8004b76 <_printf_float+0x19a>
 8004b70:	3301      	adds	r3, #1
 8004b72:	440b      	add	r3, r1
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	f04f 0a00 	mov.w	sl, #0
 8004b7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b7c:	e7df      	b.n	8004b3e <_printf_float+0x162>
 8004b7e:	b913      	cbnz	r3, 8004b86 <_printf_float+0x1aa>
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	07d2      	lsls	r2, r2, #31
 8004b84:	d501      	bpl.n	8004b8a <_printf_float+0x1ae>
 8004b86:	3302      	adds	r3, #2
 8004b88:	e7f4      	b.n	8004b74 <_printf_float+0x198>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7f2      	b.n	8004b74 <_printf_float+0x198>
 8004b8e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b94:	4299      	cmp	r1, r3
 8004b96:	db05      	blt.n	8004ba4 <_printf_float+0x1c8>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	6121      	str	r1, [r4, #16]
 8004b9c:	07d8      	lsls	r0, r3, #31
 8004b9e:	d5ea      	bpl.n	8004b76 <_printf_float+0x19a>
 8004ba0:	1c4b      	adds	r3, r1, #1
 8004ba2:	e7e7      	b.n	8004b74 <_printf_float+0x198>
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	bfcc      	ite	gt
 8004ba8:	2201      	movgt	r2, #1
 8004baa:	f1c1 0202 	rsble	r2, r1, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	e7e0      	b.n	8004b74 <_printf_float+0x198>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	055a      	lsls	r2, r3, #21
 8004bb6:	d407      	bmi.n	8004bc8 <_printf_float+0x1ec>
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	4642      	mov	r2, r8
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d12b      	bne.n	8004c1e <_printf_float+0x242>
 8004bc6:	e764      	b.n	8004a92 <_printf_float+0xb6>
 8004bc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bcc:	f240 80dd 	bls.w	8004d8a <_printf_float+0x3ae>
 8004bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f7fb fee6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d033      	beq.n	8004c48 <_printf_float+0x26c>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <_printf_float+0x2e0>)
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	f43f af51 	beq.w	8004a92 <_printf_float+0xb6>
 8004bf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	db02      	blt.n	8004bfe <_printf_float+0x222>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	07d8      	lsls	r0, r3, #31
 8004bfc:	d50f      	bpl.n	8004c1e <_printf_float+0x242>
 8004bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f af42 	beq.w	8004a92 <_printf_float+0xb6>
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	f104 091a 	add.w	r9, r4, #26
 8004c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	4543      	cmp	r3, r8
 8004c1c:	dc09      	bgt.n	8004c32 <_printf_float+0x256>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	079b      	lsls	r3, r3, #30
 8004c22:	f100 8104 	bmi.w	8004e2e <_printf_float+0x452>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	bfb8      	it	lt
 8004c2e:	4618      	movlt	r0, r3
 8004c30:	e731      	b.n	8004a96 <_printf_float+0xba>
 8004c32:	2301      	movs	r3, #1
 8004c34:	464a      	mov	r2, r9
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f af28 	beq.w	8004a92 <_printf_float+0xb6>
 8004c42:	f108 0801 	add.w	r8, r8, #1
 8004c46:	e7e6      	b.n	8004c16 <_printf_float+0x23a>
 8004c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc38      	bgt.n	8004cc0 <_printf_float+0x2e4>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <_printf_float+0x2e0>)
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f af1a 	beq.w	8004a92 <_printf_float+0xb6>
 8004c5e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d102      	bne.n	8004c6c <_printf_float+0x290>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	07d9      	lsls	r1, r3, #31
 8004c6a:	d5d8      	bpl.n	8004c1e <_printf_float+0x242>
 8004c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f af0b 	beq.w	8004a92 <_printf_float+0xb6>
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	f104 0a1a 	add.w	sl, r4, #26
 8004c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c86:	425b      	negs	r3, r3
 8004c88:	454b      	cmp	r3, r9
 8004c8a:	dc01      	bgt.n	8004c90 <_printf_float+0x2b4>
 8004c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c8e:	e794      	b.n	8004bba <_printf_float+0x1de>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4652      	mov	r2, sl
 8004c94:	4631      	mov	r1, r6
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	f43f aef9 	beq.w	8004a92 <_printf_float+0xb6>
 8004ca0:	f109 0901 	add.w	r9, r9, #1
 8004ca4:	e7ee      	b.n	8004c84 <_printf_float+0x2a8>
 8004ca6:	bf00      	nop
 8004ca8:	7fefffff 	.word	0x7fefffff
 8004cac:	080072ac 	.word	0x080072ac
 8004cb0:	080072b0 	.word	0x080072b0
 8004cb4:	080072b4 	.word	0x080072b4
 8004cb8:	080072b8 	.word	0x080072b8
 8004cbc:	080072bc 	.word	0x080072bc
 8004cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bfa8      	it	ge
 8004cc8:	461a      	movge	r2, r3
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	4691      	mov	r9, r2
 8004cce:	dc37      	bgt.n	8004d40 <_printf_float+0x364>
 8004cd0:	f04f 0b00 	mov.w	fp, #0
 8004cd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cd8:	f104 021a 	add.w	r2, r4, #26
 8004cdc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ce0:	ebaa 0309 	sub.w	r3, sl, r9
 8004ce4:	455b      	cmp	r3, fp
 8004ce6:	dc33      	bgt.n	8004d50 <_printf_float+0x374>
 8004ce8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cec:	429a      	cmp	r2, r3
 8004cee:	db3b      	blt.n	8004d68 <_printf_float+0x38c>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	07da      	lsls	r2, r3, #31
 8004cf4:	d438      	bmi.n	8004d68 <_printf_float+0x38c>
 8004cf6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cfa:	eba2 0903 	sub.w	r9, r2, r3
 8004cfe:	eba2 020a 	sub.w	r2, r2, sl
 8004d02:	4591      	cmp	r9, r2
 8004d04:	bfa8      	it	ge
 8004d06:	4691      	movge	r9, r2
 8004d08:	f1b9 0f00 	cmp.w	r9, #0
 8004d0c:	dc34      	bgt.n	8004d78 <_printf_float+0x39c>
 8004d0e:	f04f 0800 	mov.w	r8, #0
 8004d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d16:	f104 0a1a 	add.w	sl, r4, #26
 8004d1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	eba3 0309 	sub.w	r3, r3, r9
 8004d24:	4543      	cmp	r3, r8
 8004d26:	f77f af7a 	ble.w	8004c1e <_printf_float+0x242>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f aeac 	beq.w	8004a92 <_printf_float+0xb6>
 8004d3a:	f108 0801 	add.w	r8, r8, #1
 8004d3e:	e7ec      	b.n	8004d1a <_printf_float+0x33e>
 8004d40:	4613      	mov	r3, r2
 8004d42:	4631      	mov	r1, r6
 8004d44:	4642      	mov	r2, r8
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d1c0      	bne.n	8004cd0 <_printf_float+0x2f4>
 8004d4e:	e6a0      	b.n	8004a92 <_printf_float+0xb6>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f ae99 	beq.w	8004a92 <_printf_float+0xb6>
 8004d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d62:	f10b 0b01 	add.w	fp, fp, #1
 8004d66:	e7b9      	b.n	8004cdc <_printf_float+0x300>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	d1bf      	bne.n	8004cf6 <_printf_float+0x31a>
 8004d76:	e68c      	b.n	8004a92 <_printf_float+0xb6>
 8004d78:	464b      	mov	r3, r9
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	eb08 020a 	add.w	r2, r8, sl
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	d1c2      	bne.n	8004d0e <_printf_float+0x332>
 8004d88:	e683      	b.n	8004a92 <_printf_float+0xb6>
 8004d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	dc01      	bgt.n	8004d94 <_printf_float+0x3b8>
 8004d90:	07db      	lsls	r3, r3, #31
 8004d92:	d539      	bpl.n	8004e08 <_printf_float+0x42c>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4642      	mov	r2, r8
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f ae77 	beq.w	8004a92 <_printf_float+0xb6>
 8004da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	f43f ae6f 	beq.w	8004a92 <_printf_float+0xb6>
 8004db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004db8:	2200      	movs	r2, #0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004dc0:	f7fb fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc4:	b9d8      	cbnz	r0, 8004dfe <_printf_float+0x422>
 8004dc6:	f109 33ff 	add.w	r3, r9, #4294967295
 8004dca:	f108 0201 	add.w	r2, r8, #1
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d10e      	bne.n	8004df6 <_printf_float+0x41a>
 8004dd8:	e65b      	b.n	8004a92 <_printf_float+0xb6>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	464a      	mov	r2, r9
 8004dde:	4631      	mov	r1, r6
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b8      	blx	r7
 8004de4:	3001      	adds	r0, #1
 8004de6:	f43f ae54 	beq.w	8004a92 <_printf_float+0xb6>
 8004dea:	f108 0801 	add.w	r8, r8, #1
 8004dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4543      	cmp	r3, r8
 8004df4:	dcf1      	bgt.n	8004dda <_printf_float+0x3fe>
 8004df6:	4653      	mov	r3, sl
 8004df8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dfc:	e6de      	b.n	8004bbc <_printf_float+0x1e0>
 8004dfe:	f04f 0800 	mov.w	r8, #0
 8004e02:	f104 091a 	add.w	r9, r4, #26
 8004e06:	e7f2      	b.n	8004dee <_printf_float+0x412>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	e7df      	b.n	8004dce <_printf_float+0x3f2>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	464a      	mov	r2, r9
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f43f ae3a 	beq.w	8004a92 <_printf_float+0xb6>
 8004e1e:	f108 0801 	add.w	r8, r8, #1
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e26:	1a5b      	subs	r3, r3, r1
 8004e28:	4543      	cmp	r3, r8
 8004e2a:	dcf0      	bgt.n	8004e0e <_printf_float+0x432>
 8004e2c:	e6fb      	b.n	8004c26 <_printf_float+0x24a>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f104 0919 	add.w	r9, r4, #25
 8004e36:	e7f4      	b.n	8004e22 <_printf_float+0x446>

08004e38 <_printf_common>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	4699      	mov	r9, r3
 8004e40:	688a      	ldr	r2, [r1, #8]
 8004e42:	690b      	ldr	r3, [r1, #16]
 8004e44:	4607      	mov	r7, r0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfb8      	it	lt
 8004e4a:	4613      	movlt	r3, r2
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e52:	460c      	mov	r4, r1
 8004e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e58:	b10a      	cbz	r2, 8004e5e <_printf_common+0x26>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	0699      	lsls	r1, r3, #26
 8004e62:	bf42      	ittt	mi
 8004e64:	6833      	ldrmi	r3, [r6, #0]
 8004e66:	3302      	addmi	r3, #2
 8004e68:	6033      	strmi	r3, [r6, #0]
 8004e6a:	6825      	ldr	r5, [r4, #0]
 8004e6c:	f015 0506 	ands.w	r5, r5, #6
 8004e70:	d106      	bne.n	8004e80 <_printf_common+0x48>
 8004e72:	f104 0a19 	add.w	sl, r4, #25
 8004e76:	68e3      	ldr	r3, [r4, #12]
 8004e78:	6832      	ldr	r2, [r6, #0]
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	42ab      	cmp	r3, r5
 8004e7e:	dc2b      	bgt.n	8004ed8 <_printf_common+0xa0>
 8004e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e84:	1e13      	subs	r3, r2, #0
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	bf18      	it	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	0692      	lsls	r2, r2, #26
 8004e8e:	d430      	bmi.n	8004ef2 <_printf_common+0xba>
 8004e90:	4649      	mov	r1, r9
 8004e92:	4638      	mov	r0, r7
 8004e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e98:	47c0      	blx	r8
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d023      	beq.n	8004ee6 <_printf_common+0xae>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	6922      	ldr	r2, [r4, #16]
 8004ea2:	f003 0306 	and.w	r3, r3, #6
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf14      	ite	ne
 8004eaa:	2500      	movne	r5, #0
 8004eac:	6833      	ldreq	r3, [r6, #0]
 8004eae:	f04f 0600 	mov.w	r6, #0
 8004eb2:	bf08      	it	eq
 8004eb4:	68e5      	ldreq	r5, [r4, #12]
 8004eb6:	f104 041a 	add.w	r4, r4, #26
 8004eba:	bf08      	it	eq
 8004ebc:	1aed      	subeq	r5, r5, r3
 8004ebe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ec2:	bf08      	it	eq
 8004ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	bfc4      	itt	gt
 8004ecc:	1a9b      	subgt	r3, r3, r2
 8004ece:	18ed      	addgt	r5, r5, r3
 8004ed0:	42b5      	cmp	r5, r6
 8004ed2:	d11a      	bne.n	8004f0a <_printf_common+0xd2>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e008      	b.n	8004eea <_printf_common+0xb2>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4652      	mov	r2, sl
 8004edc:	4649      	mov	r1, r9
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d103      	bne.n	8004eee <_printf_common+0xb6>
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eee:	3501      	adds	r5, #1
 8004ef0:	e7c1      	b.n	8004e76 <_printf_common+0x3e>
 8004ef2:	2030      	movs	r0, #48	; 0x30
 8004ef4:	18e1      	adds	r1, r4, r3
 8004ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f00:	4422      	add	r2, r4
 8004f02:	3302      	adds	r3, #2
 8004f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f08:	e7c2      	b.n	8004e90 <_printf_common+0x58>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4638      	mov	r0, r7
 8004f12:	47c0      	blx	r8
 8004f14:	3001      	adds	r0, #1
 8004f16:	d0e6      	beq.n	8004ee6 <_printf_common+0xae>
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7d9      	b.n	8004ed0 <_printf_common+0x98>

08004f1c <_printf_i>:
 8004f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	7e0f      	ldrb	r7, [r1, #24]
 8004f22:	4691      	mov	r9, r2
 8004f24:	2f78      	cmp	r7, #120	; 0x78
 8004f26:	4680      	mov	r8, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	469a      	mov	sl, r3
 8004f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f32:	d807      	bhi.n	8004f44 <_printf_i+0x28>
 8004f34:	2f62      	cmp	r7, #98	; 0x62
 8004f36:	d80a      	bhi.n	8004f4e <_printf_i+0x32>
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	f000 80d5 	beq.w	80050e8 <_printf_i+0x1cc>
 8004f3e:	2f58      	cmp	r7, #88	; 0x58
 8004f40:	f000 80c1 	beq.w	80050c6 <_printf_i+0x1aa>
 8004f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f4c:	e03a      	b.n	8004fc4 <_printf_i+0xa8>
 8004f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f52:	2b15      	cmp	r3, #21
 8004f54:	d8f6      	bhi.n	8004f44 <_printf_i+0x28>
 8004f56:	a101      	add	r1, pc, #4	; (adr r1, 8004f5c <_printf_i+0x40>)
 8004f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fc9 	.word	0x08004fc9
 8004f64:	08004f45 	.word	0x08004f45
 8004f68:	08004f45 	.word	0x08004f45
 8004f6c:	08004f45 	.word	0x08004f45
 8004f70:	08004f45 	.word	0x08004f45
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f45 	.word	0x08004f45
 8004f7c:	08004f45 	.word	0x08004f45
 8004f80:	08004f45 	.word	0x08004f45
 8004f84:	08004f45 	.word	0x08004f45
 8004f88:	080050cf 	.word	0x080050cf
 8004f8c:	08004ff5 	.word	0x08004ff5
 8004f90:	08005089 	.word	0x08005089
 8004f94:	08004f45 	.word	0x08004f45
 8004f98:	08004f45 	.word	0x08004f45
 8004f9c:	080050f1 	.word	0x080050f1
 8004fa0:	08004f45 	.word	0x08004f45
 8004fa4:	08004ff5 	.word	0x08004ff5
 8004fa8:	08004f45 	.word	0x08004f45
 8004fac:	08004f45 	.word	0x08004f45
 8004fb0:	08005091 	.word	0x08005091
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	1d1a      	adds	r2, r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	602a      	str	r2, [r5, #0]
 8004fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a0      	b.n	800510a <_printf_i+0x1ee>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	0607      	lsls	r7, r0, #24
 8004fce:	f103 0104 	add.w	r1, r3, #4
 8004fd2:	6029      	str	r1, [r5, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0xbe>
 8004fd6:	681e      	ldr	r6, [r3, #0]
 8004fd8:	e003      	b.n	8004fe2 <_printf_i+0xc6>
 8004fda:	0646      	lsls	r6, r0, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0xba>
 8004fde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fe2:	2e00      	cmp	r6, #0
 8004fe4:	da03      	bge.n	8004fee <_printf_i+0xd2>
 8004fe6:	232d      	movs	r3, #45	; 0x2d
 8004fe8:	4276      	negs	r6, r6
 8004fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fee:	230a      	movs	r3, #10
 8004ff0:	4859      	ldr	r0, [pc, #356]	; (8005158 <_printf_i+0x23c>)
 8004ff2:	e012      	b.n	800501a <_printf_i+0xfe>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	1d19      	adds	r1, r3, #4
 8004ffa:	6029      	str	r1, [r5, #0]
 8004ffc:	0605      	lsls	r5, r0, #24
 8004ffe:	d501      	bpl.n	8005004 <_printf_i+0xe8>
 8005000:	681e      	ldr	r6, [r3, #0]
 8005002:	e002      	b.n	800500a <_printf_i+0xee>
 8005004:	0641      	lsls	r1, r0, #25
 8005006:	d5fb      	bpl.n	8005000 <_printf_i+0xe4>
 8005008:	881e      	ldrh	r6, [r3, #0]
 800500a:	2f6f      	cmp	r7, #111	; 0x6f
 800500c:	bf0c      	ite	eq
 800500e:	2308      	moveq	r3, #8
 8005010:	230a      	movne	r3, #10
 8005012:	4851      	ldr	r0, [pc, #324]	; (8005158 <_printf_i+0x23c>)
 8005014:	2100      	movs	r1, #0
 8005016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501a:	6865      	ldr	r5, [r4, #4]
 800501c:	2d00      	cmp	r5, #0
 800501e:	bfa8      	it	ge
 8005020:	6821      	ldrge	r1, [r4, #0]
 8005022:	60a5      	str	r5, [r4, #8]
 8005024:	bfa4      	itt	ge
 8005026:	f021 0104 	bicge.w	r1, r1, #4
 800502a:	6021      	strge	r1, [r4, #0]
 800502c:	b90e      	cbnz	r6, 8005032 <_printf_i+0x116>
 800502e:	2d00      	cmp	r5, #0
 8005030:	d04b      	beq.n	80050ca <_printf_i+0x1ae>
 8005032:	4615      	mov	r5, r2
 8005034:	fbb6 f1f3 	udiv	r1, r6, r3
 8005038:	fb03 6711 	mls	r7, r3, r1, r6
 800503c:	5dc7      	ldrb	r7, [r0, r7]
 800503e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005042:	4637      	mov	r7, r6
 8005044:	42bb      	cmp	r3, r7
 8005046:	460e      	mov	r6, r1
 8005048:	d9f4      	bls.n	8005034 <_printf_i+0x118>
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10b      	bne.n	8005066 <_printf_i+0x14a>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07de      	lsls	r6, r3, #31
 8005052:	d508      	bpl.n	8005066 <_printf_i+0x14a>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	4299      	cmp	r1, r3
 800505a:	bfde      	ittt	le
 800505c:	2330      	movle	r3, #48	; 0x30
 800505e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005066:	1b52      	subs	r2, r2, r5
 8005068:	6122      	str	r2, [r4, #16]
 800506a:	464b      	mov	r3, r9
 800506c:	4621      	mov	r1, r4
 800506e:	4640      	mov	r0, r8
 8005070:	f8cd a000 	str.w	sl, [sp]
 8005074:	aa03      	add	r2, sp, #12
 8005076:	f7ff fedf 	bl	8004e38 <_printf_common>
 800507a:	3001      	adds	r0, #1
 800507c:	d14a      	bne.n	8005114 <_printf_i+0x1f8>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	b004      	add	sp, #16
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f043 0320 	orr.w	r3, r3, #32
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	2778      	movs	r7, #120	; 0x78
 8005092:	4832      	ldr	r0, [pc, #200]	; (800515c <_printf_i+0x240>)
 8005094:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	6829      	ldr	r1, [r5, #0]
 800509c:	061f      	lsls	r7, r3, #24
 800509e:	f851 6b04 	ldr.w	r6, [r1], #4
 80050a2:	d402      	bmi.n	80050aa <_printf_i+0x18e>
 80050a4:	065f      	lsls	r7, r3, #25
 80050a6:	bf48      	it	mi
 80050a8:	b2b6      	uxthmi	r6, r6
 80050aa:	07df      	lsls	r7, r3, #31
 80050ac:	bf48      	it	mi
 80050ae:	f043 0320 	orrmi.w	r3, r3, #32
 80050b2:	6029      	str	r1, [r5, #0]
 80050b4:	bf48      	it	mi
 80050b6:	6023      	strmi	r3, [r4, #0]
 80050b8:	b91e      	cbnz	r6, 80050c2 <_printf_i+0x1a6>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f023 0320 	bic.w	r3, r3, #32
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	2310      	movs	r3, #16
 80050c4:	e7a6      	b.n	8005014 <_printf_i+0xf8>
 80050c6:	4824      	ldr	r0, [pc, #144]	; (8005158 <_printf_i+0x23c>)
 80050c8:	e7e4      	b.n	8005094 <_printf_i+0x178>
 80050ca:	4615      	mov	r5, r2
 80050cc:	e7bd      	b.n	800504a <_printf_i+0x12e>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	6826      	ldr	r6, [r4, #0]
 80050d2:	1d18      	adds	r0, r3, #4
 80050d4:	6961      	ldr	r1, [r4, #20]
 80050d6:	6028      	str	r0, [r5, #0]
 80050d8:	0635      	lsls	r5, r6, #24
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	d501      	bpl.n	80050e2 <_printf_i+0x1c6>
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	e002      	b.n	80050e8 <_printf_i+0x1cc>
 80050e2:	0670      	lsls	r0, r6, #25
 80050e4:	d5fb      	bpl.n	80050de <_printf_i+0x1c2>
 80050e6:	8019      	strh	r1, [r3, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	4615      	mov	r5, r2
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	e7bc      	b.n	800506a <_printf_i+0x14e>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	2100      	movs	r1, #0
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	602a      	str	r2, [r5, #0]
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	6862      	ldr	r2, [r4, #4]
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f9b4 	bl	800546a <memchr>
 8005102:	b108      	cbz	r0, 8005108 <_printf_i+0x1ec>
 8005104:	1b40      	subs	r0, r0, r5
 8005106:	6060      	str	r0, [r4, #4]
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	2300      	movs	r3, #0
 800510e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005112:	e7aa      	b.n	800506a <_printf_i+0x14e>
 8005114:	462a      	mov	r2, r5
 8005116:	4649      	mov	r1, r9
 8005118:	4640      	mov	r0, r8
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	47d0      	blx	sl
 800511e:	3001      	adds	r0, #1
 8005120:	d0ad      	beq.n	800507e <_printf_i+0x162>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	079b      	lsls	r3, r3, #30
 8005126:	d413      	bmi.n	8005150 <_printf_i+0x234>
 8005128:	68e0      	ldr	r0, [r4, #12]
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	4298      	cmp	r0, r3
 800512e:	bfb8      	it	lt
 8005130:	4618      	movlt	r0, r3
 8005132:	e7a6      	b.n	8005082 <_printf_i+0x166>
 8005134:	2301      	movs	r3, #1
 8005136:	4632      	mov	r2, r6
 8005138:	4649      	mov	r1, r9
 800513a:	4640      	mov	r0, r8
 800513c:	47d0      	blx	sl
 800513e:	3001      	adds	r0, #1
 8005140:	d09d      	beq.n	800507e <_printf_i+0x162>
 8005142:	3501      	adds	r5, #1
 8005144:	68e3      	ldr	r3, [r4, #12]
 8005146:	9903      	ldr	r1, [sp, #12]
 8005148:	1a5b      	subs	r3, r3, r1
 800514a:	42ab      	cmp	r3, r5
 800514c:	dcf2      	bgt.n	8005134 <_printf_i+0x218>
 800514e:	e7eb      	b.n	8005128 <_printf_i+0x20c>
 8005150:	2500      	movs	r5, #0
 8005152:	f104 0619 	add.w	r6, r4, #25
 8005156:	e7f5      	b.n	8005144 <_printf_i+0x228>
 8005158:	080072be 	.word	0x080072be
 800515c:	080072cf 	.word	0x080072cf

08005160 <std>:
 8005160:	2300      	movs	r3, #0
 8005162:	b510      	push	{r4, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	e9c0 3300 	strd	r3, r3, [r0]
 800516a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800516e:	6083      	str	r3, [r0, #8]
 8005170:	8181      	strh	r1, [r0, #12]
 8005172:	6643      	str	r3, [r0, #100]	; 0x64
 8005174:	81c2      	strh	r2, [r0, #14]
 8005176:	6183      	str	r3, [r0, #24]
 8005178:	4619      	mov	r1, r3
 800517a:	2208      	movs	r2, #8
 800517c:	305c      	adds	r0, #92	; 0x5c
 800517e:	f000 f8f4 	bl	800536a <memset>
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <std+0x58>)
 8005184:	6224      	str	r4, [r4, #32]
 8005186:	6263      	str	r3, [r4, #36]	; 0x24
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <std+0x5c>)
 800518a:	62a3      	str	r3, [r4, #40]	; 0x28
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <std+0x60>)
 800518e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <std+0x64>)
 8005192:	6323      	str	r3, [r4, #48]	; 0x30
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <std+0x68>)
 8005196:	429c      	cmp	r4, r3
 8005198:	d006      	beq.n	80051a8 <std+0x48>
 800519a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800519e:	4294      	cmp	r4, r2
 80051a0:	d002      	beq.n	80051a8 <std+0x48>
 80051a2:	33d0      	adds	r3, #208	; 0xd0
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d105      	bne.n	80051b4 <std+0x54>
 80051a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f000 b958 	b.w	8005464 <__retarget_lock_init_recursive>
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	080052e5 	.word	0x080052e5
 80051bc:	08005307 	.word	0x08005307
 80051c0:	0800533f 	.word	0x0800533f
 80051c4:	08005363 	.word	0x08005363
 80051c8:	2000033c 	.word	0x2000033c

080051cc <stdio_exit_handler>:
 80051cc:	4a02      	ldr	r2, [pc, #8]	; (80051d8 <stdio_exit_handler+0xc>)
 80051ce:	4903      	ldr	r1, [pc, #12]	; (80051dc <stdio_exit_handler+0x10>)
 80051d0:	4803      	ldr	r0, [pc, #12]	; (80051e0 <stdio_exit_handler+0x14>)
 80051d2:	f000 b869 	b.w	80052a8 <_fwalk_sglue>
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c
 80051dc:	08006b4d 	.word	0x08006b4d
 80051e0:	20000018 	.word	0x20000018

080051e4 <cleanup_stdio>:
 80051e4:	6841      	ldr	r1, [r0, #4]
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <cleanup_stdio+0x34>)
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4299      	cmp	r1, r3
 80051ec:	4604      	mov	r4, r0
 80051ee:	d001      	beq.n	80051f4 <cleanup_stdio+0x10>
 80051f0:	f001 fcac 	bl	8006b4c <_fflush_r>
 80051f4:	68a1      	ldr	r1, [r4, #8]
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <cleanup_stdio+0x38>)
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <cleanup_stdio+0x1e>
 80051fc:	4620      	mov	r0, r4
 80051fe:	f001 fca5 	bl	8006b4c <_fflush_r>
 8005202:	68e1      	ldr	r1, [r4, #12]
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <cleanup_stdio+0x3c>)
 8005206:	4299      	cmp	r1, r3
 8005208:	d004      	beq.n	8005214 <cleanup_stdio+0x30>
 800520a:	4620      	mov	r0, r4
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005210:	f001 bc9c 	b.w	8006b4c <_fflush_r>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	2000033c 	.word	0x2000033c
 800521c:	200003a4 	.word	0x200003a4
 8005220:	2000040c 	.word	0x2000040c

08005224 <global_stdio_init.part.0>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <global_stdio_init.part.0+0x30>)
 8005228:	4c0b      	ldr	r4, [pc, #44]	; (8005258 <global_stdio_init.part.0+0x34>)
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <global_stdio_init.part.0+0x38>)
 800522c:	4620      	mov	r0, r4
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	2104      	movs	r1, #4
 8005232:	2200      	movs	r2, #0
 8005234:	f7ff ff94 	bl	8005160 <std>
 8005238:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800523c:	2201      	movs	r2, #1
 800523e:	2109      	movs	r1, #9
 8005240:	f7ff ff8e 	bl	8005160 <std>
 8005244:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005248:	2202      	movs	r2, #2
 800524a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524e:	2112      	movs	r1, #18
 8005250:	f7ff bf86 	b.w	8005160 <std>
 8005254:	20000474 	.word	0x20000474
 8005258:	2000033c 	.word	0x2000033c
 800525c:	080051cd 	.word	0x080051cd

08005260 <__sfp_lock_acquire>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_acquire+0x8>)
 8005262:	f000 b900 	b.w	8005466 <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	2000047d 	.word	0x2000047d

0800526c <__sfp_lock_release>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sfp_lock_release+0x8>)
 800526e:	f000 b8fb 	b.w	8005468 <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	2000047d 	.word	0x2000047d

08005278 <__sinit>:
 8005278:	b510      	push	{r4, lr}
 800527a:	4604      	mov	r4, r0
 800527c:	f7ff fff0 	bl	8005260 <__sfp_lock_acquire>
 8005280:	6a23      	ldr	r3, [r4, #32]
 8005282:	b11b      	cbz	r3, 800528c <__sinit+0x14>
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	f7ff bff0 	b.w	800526c <__sfp_lock_release>
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <__sinit+0x28>)
 800528e:	6223      	str	r3, [r4, #32]
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <__sinit+0x2c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f5      	bne.n	8005284 <__sinit+0xc>
 8005298:	f7ff ffc4 	bl	8005224 <global_stdio_init.part.0>
 800529c:	e7f2      	b.n	8005284 <__sinit+0xc>
 800529e:	bf00      	nop
 80052a0:	080051e5 	.word	0x080051e5
 80052a4:	20000474 	.word	0x20000474

080052a8 <_fwalk_sglue>:
 80052a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ac:	4607      	mov	r7, r0
 80052ae:	4688      	mov	r8, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	2600      	movs	r6, #0
 80052b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052b8:	f1b9 0901 	subs.w	r9, r9, #1
 80052bc:	d505      	bpl.n	80052ca <_fwalk_sglue+0x22>
 80052be:	6824      	ldr	r4, [r4, #0]
 80052c0:	2c00      	cmp	r4, #0
 80052c2:	d1f7      	bne.n	80052b4 <_fwalk_sglue+0xc>
 80052c4:	4630      	mov	r0, r6
 80052c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d907      	bls.n	80052e0 <_fwalk_sglue+0x38>
 80052d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052d4:	3301      	adds	r3, #1
 80052d6:	d003      	beq.n	80052e0 <_fwalk_sglue+0x38>
 80052d8:	4629      	mov	r1, r5
 80052da:	4638      	mov	r0, r7
 80052dc:	47c0      	blx	r8
 80052de:	4306      	orrs	r6, r0
 80052e0:	3568      	adds	r5, #104	; 0x68
 80052e2:	e7e9      	b.n	80052b8 <_fwalk_sglue+0x10>

080052e4 <__sread>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	460c      	mov	r4, r1
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f86c 	bl	80053c8 <_read_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	bfab      	itete	ge
 80052f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052f6:	89a3      	ldrhlt	r3, [r4, #12]
 80052f8:	181b      	addge	r3, r3, r0
 80052fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052fe:	bfac      	ite	ge
 8005300:	6563      	strge	r3, [r4, #84]	; 0x54
 8005302:	81a3      	strhlt	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__swrite>:
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	461f      	mov	r7, r3
 800530c:	898b      	ldrh	r3, [r1, #12]
 800530e:	4605      	mov	r5, r0
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	460c      	mov	r4, r1
 8005314:	4616      	mov	r6, r2
 8005316:	d505      	bpl.n	8005324 <__swrite+0x1e>
 8005318:	2302      	movs	r3, #2
 800531a:	2200      	movs	r2, #0
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	f000 f840 	bl	80053a4 <_lseek_r>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	4632      	mov	r2, r6
 8005328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532c:	81a3      	strh	r3, [r4, #12]
 800532e:	4628      	mov	r0, r5
 8005330:	463b      	mov	r3, r7
 8005332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	f000 b857 	b.w	80053ec <_write_r>

0800533e <__sseek>:
 800533e:	b510      	push	{r4, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 f82d 	bl	80053a4 <_lseek_r>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	bf15      	itete	ne
 8005350:	6560      	strne	r0, [r4, #84]	; 0x54
 8005352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800535a:	81a3      	strheq	r3, [r4, #12]
 800535c:	bf18      	it	ne
 800535e:	81a3      	strhne	r3, [r4, #12]
 8005360:	bd10      	pop	{r4, pc}

08005362 <__sclose>:
 8005362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005366:	f000 b80d 	b.w	8005384 <_close_r>

0800536a <memset>:
 800536a:	4603      	mov	r3, r0
 800536c:	4402      	add	r2, r0
 800536e:	4293      	cmp	r3, r2
 8005370:	d100      	bne.n	8005374 <memset+0xa>
 8005372:	4770      	bx	lr
 8005374:	f803 1b01 	strb.w	r1, [r3], #1
 8005378:	e7f9      	b.n	800536e <memset+0x4>
	...

0800537c <_localeconv_r>:
 800537c:	4800      	ldr	r0, [pc, #0]	; (8005380 <_localeconv_r+0x4>)
 800537e:	4770      	bx	lr
 8005380:	20000158 	.word	0x20000158

08005384 <_close_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	2300      	movs	r3, #0
 8005388:	4d05      	ldr	r5, [pc, #20]	; (80053a0 <_close_r+0x1c>)
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fc fe02 	bl	8001f98 <_close>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_close_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_close_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20000478 	.word	0x20000478

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	2200      	movs	r2, #0
 80053ae:	4d05      	ldr	r5, [pc, #20]	; (80053c4 <_lseek_r+0x20>)
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc fe14 	bl	8001fe0 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000478 	.word	0x20000478

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	2200      	movs	r2, #0
 80053d2:	4d05      	ldr	r5, [pc, #20]	; (80053e8 <_read_r+0x20>)
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc fda5 	bl	8001f26 <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000478 	.word	0x20000478

080053ec <_write_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	2200      	movs	r2, #0
 80053f6:	4d05      	ldr	r5, [pc, #20]	; (800540c <_write_r+0x20>)
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc fdb0 	bl	8001f60 <_write>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_write_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_write_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000478 	.word	0x20000478

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	; (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000064 	.word	0x20000064

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	2600      	movs	r6, #0
 8005420:	4d0c      	ldr	r5, [pc, #48]	; (8005454 <__libc_init_array+0x38>)
 8005422:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	f001 fede 	bl	80071ec <_init>
 8005430:	2600      	movs	r6, #0
 8005432:	4d0a      	ldr	r5, [pc, #40]	; (800545c <__libc_init_array+0x40>)
 8005434:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <__libc_init_array+0x44>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	0800761c 	.word	0x0800761c
 8005458:	0800761c 	.word	0x0800761c
 800545c:	0800761c 	.word	0x0800761c
 8005460:	08007620 	.word	0x08007620

08005464 <__retarget_lock_init_recursive>:
 8005464:	4770      	bx	lr

08005466 <__retarget_lock_acquire_recursive>:
 8005466:	4770      	bx	lr

08005468 <__retarget_lock_release_recursive>:
 8005468:	4770      	bx	lr

0800546a <memchr>:
 800546a:	4603      	mov	r3, r0
 800546c:	b510      	push	{r4, lr}
 800546e:	b2c9      	uxtb	r1, r1
 8005470:	4402      	add	r2, r0
 8005472:	4293      	cmp	r3, r2
 8005474:	4618      	mov	r0, r3
 8005476:	d101      	bne.n	800547c <memchr+0x12>
 8005478:	2000      	movs	r0, #0
 800547a:	e003      	b.n	8005484 <memchr+0x1a>
 800547c:	7804      	ldrb	r4, [r0, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	428c      	cmp	r4, r1
 8005482:	d1f6      	bne.n	8005472 <memchr+0x8>
 8005484:	bd10      	pop	{r4, pc}

08005486 <quorem>:
 8005486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	6903      	ldr	r3, [r0, #16]
 800548c:	690c      	ldr	r4, [r1, #16]
 800548e:	4607      	mov	r7, r0
 8005490:	42a3      	cmp	r3, r4
 8005492:	db7f      	blt.n	8005594 <quorem+0x10e>
 8005494:	3c01      	subs	r4, #1
 8005496:	f100 0514 	add.w	r5, r0, #20
 800549a:	f101 0814 	add.w	r8, r1, #20
 800549e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054ac:	3301      	adds	r3, #1
 80054ae:	429a      	cmp	r2, r3
 80054b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80054b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054bc:	d331      	bcc.n	8005522 <quorem+0x9c>
 80054be:	f04f 0e00 	mov.w	lr, #0
 80054c2:	4640      	mov	r0, r8
 80054c4:	46ac      	mov	ip, r5
 80054c6:	46f2      	mov	sl, lr
 80054c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054cc:	b293      	uxth	r3, r2
 80054ce:	fb06 e303 	mla	r3, r6, r3, lr
 80054d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054d6:	0c1a      	lsrs	r2, r3, #16
 80054d8:	b29b      	uxth	r3, r3
 80054da:	fb06 220e 	mla	r2, r6, lr, r2
 80054de:	ebaa 0303 	sub.w	r3, sl, r3
 80054e2:	f8dc a000 	ldr.w	sl, [ip]
 80054e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054ea:	fa1f fa8a 	uxth.w	sl, sl
 80054ee:	4453      	add	r3, sl
 80054f0:	f8dc a000 	ldr.w	sl, [ip]
 80054f4:	b292      	uxth	r2, r2
 80054f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005504:	4581      	cmp	r9, r0
 8005506:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800550a:	f84c 3b04 	str.w	r3, [ip], #4
 800550e:	d2db      	bcs.n	80054c8 <quorem+0x42>
 8005510:	f855 300b 	ldr.w	r3, [r5, fp]
 8005514:	b92b      	cbnz	r3, 8005522 <quorem+0x9c>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	3b04      	subs	r3, #4
 800551a:	429d      	cmp	r5, r3
 800551c:	461a      	mov	r2, r3
 800551e:	d32d      	bcc.n	800557c <quorem+0xf6>
 8005520:	613c      	str	r4, [r7, #16]
 8005522:	4638      	mov	r0, r7
 8005524:	f001 f992 	bl	800684c <__mcmp>
 8005528:	2800      	cmp	r0, #0
 800552a:	db23      	blt.n	8005574 <quorem+0xee>
 800552c:	4629      	mov	r1, r5
 800552e:	2000      	movs	r0, #0
 8005530:	3601      	adds	r6, #1
 8005532:	f858 2b04 	ldr.w	r2, [r8], #4
 8005536:	f8d1 c000 	ldr.w	ip, [r1]
 800553a:	b293      	uxth	r3, r2
 800553c:	1ac3      	subs	r3, r0, r3
 800553e:	0c12      	lsrs	r2, r2, #16
 8005540:	fa1f f08c 	uxth.w	r0, ip
 8005544:	4403      	add	r3, r0
 8005546:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800554a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800554e:	b29b      	uxth	r3, r3
 8005550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005554:	45c1      	cmp	r9, r8
 8005556:	ea4f 4022 	mov.w	r0, r2, asr #16
 800555a:	f841 3b04 	str.w	r3, [r1], #4
 800555e:	d2e8      	bcs.n	8005532 <quorem+0xac>
 8005560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005568:	b922      	cbnz	r2, 8005574 <quorem+0xee>
 800556a:	3b04      	subs	r3, #4
 800556c:	429d      	cmp	r5, r3
 800556e:	461a      	mov	r2, r3
 8005570:	d30a      	bcc.n	8005588 <quorem+0x102>
 8005572:	613c      	str	r4, [r7, #16]
 8005574:	4630      	mov	r0, r6
 8005576:	b003      	add	sp, #12
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	3b04      	subs	r3, #4
 8005580:	2a00      	cmp	r2, #0
 8005582:	d1cd      	bne.n	8005520 <quorem+0x9a>
 8005584:	3c01      	subs	r4, #1
 8005586:	e7c8      	b.n	800551a <quorem+0x94>
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	3b04      	subs	r3, #4
 800558c:	2a00      	cmp	r2, #0
 800558e:	d1f0      	bne.n	8005572 <quorem+0xec>
 8005590:	3c01      	subs	r4, #1
 8005592:	e7eb      	b.n	800556c <quorem+0xe6>
 8005594:	2000      	movs	r0, #0
 8005596:	e7ee      	b.n	8005576 <quorem+0xf0>

08005598 <_dtoa_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	4616      	mov	r6, r2
 800559e:	461f      	mov	r7, r3
 80055a0:	69c4      	ldr	r4, [r0, #28]
 80055a2:	b099      	sub	sp, #100	; 0x64
 80055a4:	4605      	mov	r5, r0
 80055a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80055ae:	b974      	cbnz	r4, 80055ce <_dtoa_r+0x36>
 80055b0:	2010      	movs	r0, #16
 80055b2:	f000 fe1d 	bl	80061f0 <malloc>
 80055b6:	4602      	mov	r2, r0
 80055b8:	61e8      	str	r0, [r5, #28]
 80055ba:	b920      	cbnz	r0, 80055c6 <_dtoa_r+0x2e>
 80055bc:	21ef      	movs	r1, #239	; 0xef
 80055be:	4bac      	ldr	r3, [pc, #688]	; (8005870 <_dtoa_r+0x2d8>)
 80055c0:	48ac      	ldr	r0, [pc, #688]	; (8005874 <_dtoa_r+0x2dc>)
 80055c2:	f001 fb09 	bl	8006bd8 <__assert_func>
 80055c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055ca:	6004      	str	r4, [r0, #0]
 80055cc:	60c4      	str	r4, [r0, #12]
 80055ce:	69eb      	ldr	r3, [r5, #28]
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	b151      	cbz	r1, 80055ea <_dtoa_r+0x52>
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	2301      	movs	r3, #1
 80055d8:	4093      	lsls	r3, r2
 80055da:	604a      	str	r2, [r1, #4]
 80055dc:	608b      	str	r3, [r1, #8]
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 fefa 	bl	80063d8 <_Bfree>
 80055e4:	2200      	movs	r2, #0
 80055e6:	69eb      	ldr	r3, [r5, #28]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	1e3b      	subs	r3, r7, #0
 80055ec:	bfaf      	iteee	ge
 80055ee:	2300      	movge	r3, #0
 80055f0:	2201      	movlt	r2, #1
 80055f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	9305      	strlt	r3, [sp, #20]
 80055f8:	bfa8      	it	ge
 80055fa:	f8c8 3000 	strge.w	r3, [r8]
 80055fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005602:	4b9d      	ldr	r3, [pc, #628]	; (8005878 <_dtoa_r+0x2e0>)
 8005604:	bfb8      	it	lt
 8005606:	f8c8 2000 	strlt.w	r2, [r8]
 800560a:	ea33 0309 	bics.w	r3, r3, r9
 800560e:	d119      	bne.n	8005644 <_dtoa_r+0xac>
 8005610:	f242 730f 	movw	r3, #9999	; 0x270f
 8005614:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800561c:	4333      	orrs	r3, r6
 800561e:	f000 8589 	beq.w	8006134 <_dtoa_r+0xb9c>
 8005622:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005624:	b953      	cbnz	r3, 800563c <_dtoa_r+0xa4>
 8005626:	4b95      	ldr	r3, [pc, #596]	; (800587c <_dtoa_r+0x2e4>)
 8005628:	e023      	b.n	8005672 <_dtoa_r+0xda>
 800562a:	4b95      	ldr	r3, [pc, #596]	; (8005880 <_dtoa_r+0x2e8>)
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	3308      	adds	r3, #8
 8005630:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	9803      	ldr	r0, [sp, #12]
 8005636:	b019      	add	sp, #100	; 0x64
 8005638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563c:	4b8f      	ldr	r3, [pc, #572]	; (800587c <_dtoa_r+0x2e4>)
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	3303      	adds	r3, #3
 8005642:	e7f5      	b.n	8005630 <_dtoa_r+0x98>
 8005644:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005648:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800564c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005650:	2200      	movs	r2, #0
 8005652:	2300      	movs	r3, #0
 8005654:	f7fb f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8005658:	4680      	mov	r8, r0
 800565a:	b160      	cbz	r0, 8005676 <_dtoa_r+0xde>
 800565c:	2301      	movs	r3, #1
 800565e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8562 	beq.w	800612e <_dtoa_r+0xb96>
 800566a:	4b86      	ldr	r3, [pc, #536]	; (8005884 <_dtoa_r+0x2ec>)
 800566c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	9303      	str	r3, [sp, #12]
 8005674:	e7de      	b.n	8005634 <_dtoa_r+0x9c>
 8005676:	ab16      	add	r3, sp, #88	; 0x58
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	ab17      	add	r3, sp, #92	; 0x5c
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4628      	mov	r0, r5
 8005680:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005684:	f001 f98a 	bl	800699c <__d2b>
 8005688:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800568c:	4682      	mov	sl, r0
 800568e:	2c00      	cmp	r4, #0
 8005690:	d07e      	beq.n	8005790 <_dtoa_r+0x1f8>
 8005692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005698:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800569c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80056a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80056ac:	4619      	mov	r1, r3
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b75      	ldr	r3, [pc, #468]	; (8005888 <_dtoa_r+0x2f0>)
 80056b2:	f7fa fd59 	bl	8000168 <__aeabi_dsub>
 80056b6:	a368      	add	r3, pc, #416	; (adr r3, 8005858 <_dtoa_r+0x2c0>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa ff0c 	bl	80004d8 <__aeabi_dmul>
 80056c0:	a367      	add	r3, pc, #412	; (adr r3, 8005860 <_dtoa_r+0x2c8>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa fd51 	bl	800016c <__adddf3>
 80056ca:	4606      	mov	r6, r0
 80056cc:	4620      	mov	r0, r4
 80056ce:	460f      	mov	r7, r1
 80056d0:	f7fa fe98 	bl	8000404 <__aeabi_i2d>
 80056d4:	a364      	add	r3, pc, #400	; (adr r3, 8005868 <_dtoa_r+0x2d0>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f7fa fefd 	bl	80004d8 <__aeabi_dmul>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4630      	mov	r0, r6
 80056e4:	4639      	mov	r1, r7
 80056e6:	f7fa fd41 	bl	800016c <__adddf3>
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	f7fb f9a3 	bl	8000a38 <__aeabi_d2iz>
 80056f2:	2200      	movs	r2, #0
 80056f4:	4683      	mov	fp, r0
 80056f6:	2300      	movs	r3, #0
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fb f95e 	bl	80009bc <__aeabi_dcmplt>
 8005700:	b148      	cbz	r0, 8005716 <_dtoa_r+0x17e>
 8005702:	4658      	mov	r0, fp
 8005704:	f7fa fe7e 	bl	8000404 <__aeabi_i2d>
 8005708:	4632      	mov	r2, r6
 800570a:	463b      	mov	r3, r7
 800570c:	f7fb f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8005710:	b908      	cbnz	r0, 8005716 <_dtoa_r+0x17e>
 8005712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005716:	f1bb 0f16 	cmp.w	fp, #22
 800571a:	d857      	bhi.n	80057cc <_dtoa_r+0x234>
 800571c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005720:	4b5a      	ldr	r3, [pc, #360]	; (800588c <_dtoa_r+0x2f4>)
 8005722:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fb f947 	bl	80009bc <__aeabi_dcmplt>
 800572e:	2800      	cmp	r0, #0
 8005730:	d04e      	beq.n	80057d0 <_dtoa_r+0x238>
 8005732:	2300      	movs	r3, #0
 8005734:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005738:	930f      	str	r3, [sp, #60]	; 0x3c
 800573a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800573c:	1b1b      	subs	r3, r3, r4
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	bf46      	itte	mi
 8005742:	f1c3 0901 	rsbmi	r9, r3, #1
 8005746:	2300      	movmi	r3, #0
 8005748:	f04f 0900 	movpl.w	r9, #0
 800574c:	9209      	str	r2, [sp, #36]	; 0x24
 800574e:	bf48      	it	mi
 8005750:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005752:	f1bb 0f00 	cmp.w	fp, #0
 8005756:	db3d      	blt.n	80057d4 <_dtoa_r+0x23c>
 8005758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800575e:	445b      	add	r3, fp
 8005760:	9309      	str	r3, [sp, #36]	; 0x24
 8005762:	2300      	movs	r3, #0
 8005764:	930a      	str	r3, [sp, #40]	; 0x28
 8005766:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005768:	2b09      	cmp	r3, #9
 800576a:	d867      	bhi.n	800583c <_dtoa_r+0x2a4>
 800576c:	2b05      	cmp	r3, #5
 800576e:	bfc4      	itt	gt
 8005770:	3b04      	subgt	r3, #4
 8005772:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005776:	bfc8      	it	gt
 8005778:	2400      	movgt	r4, #0
 800577a:	f1a3 0302 	sub.w	r3, r3, #2
 800577e:	bfd8      	it	le
 8005780:	2401      	movle	r4, #1
 8005782:	2b03      	cmp	r3, #3
 8005784:	f200 8086 	bhi.w	8005894 <_dtoa_r+0x2fc>
 8005788:	e8df f003 	tbb	[pc, r3]
 800578c:	5637392c 	.word	0x5637392c
 8005790:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005794:	441c      	add	r4, r3
 8005796:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800579a:	2b20      	cmp	r3, #32
 800579c:	bfc1      	itttt	gt
 800579e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80057a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80057aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80057ae:	bfd6      	itet	le
 80057b0:	f1c3 0320 	rsble	r3, r3, #32
 80057b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80057b8:	fa06 f003 	lslle.w	r0, r6, r3
 80057bc:	f7fa fe12 	bl	80003e4 <__aeabi_ui2d>
 80057c0:	2201      	movs	r2, #1
 80057c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80057c6:	3c01      	subs	r4, #1
 80057c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80057ca:	e76f      	b.n	80056ac <_dtoa_r+0x114>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e7b3      	b.n	8005738 <_dtoa_r+0x1a0>
 80057d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80057d2:	e7b2      	b.n	800573a <_dtoa_r+0x1a2>
 80057d4:	f1cb 0300 	rsb	r3, fp, #0
 80057d8:	930a      	str	r3, [sp, #40]	; 0x28
 80057da:	2300      	movs	r3, #0
 80057dc:	eba9 090b 	sub.w	r9, r9, fp
 80057e0:	930e      	str	r3, [sp, #56]	; 0x38
 80057e2:	e7c0      	b.n	8005766 <_dtoa_r+0x1ce>
 80057e4:	2300      	movs	r3, #0
 80057e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	dc55      	bgt.n	800589a <_dtoa_r+0x302>
 80057ee:	2301      	movs	r3, #1
 80057f0:	461a      	mov	r2, r3
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	9308      	str	r3, [sp, #32]
 80057f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80057f8:	e00b      	b.n	8005812 <_dtoa_r+0x27a>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7f3      	b.n	80057e6 <_dtoa_r+0x24e>
 80057fe:	2300      	movs	r3, #0
 8005800:	930b      	str	r3, [sp, #44]	; 0x2c
 8005802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005804:	445b      	add	r3, fp
 8005806:	9306      	str	r3, [sp, #24]
 8005808:	3301      	adds	r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	9308      	str	r3, [sp, #32]
 800580e:	bfb8      	it	lt
 8005810:	2301      	movlt	r3, #1
 8005812:	2100      	movs	r1, #0
 8005814:	2204      	movs	r2, #4
 8005816:	69e8      	ldr	r0, [r5, #28]
 8005818:	f102 0614 	add.w	r6, r2, #20
 800581c:	429e      	cmp	r6, r3
 800581e:	d940      	bls.n	80058a2 <_dtoa_r+0x30a>
 8005820:	6041      	str	r1, [r0, #4]
 8005822:	4628      	mov	r0, r5
 8005824:	f000 fd98 	bl	8006358 <_Balloc>
 8005828:	9003      	str	r0, [sp, #12]
 800582a:	2800      	cmp	r0, #0
 800582c:	d13c      	bne.n	80058a8 <_dtoa_r+0x310>
 800582e:	4602      	mov	r2, r0
 8005830:	f240 11af 	movw	r1, #431	; 0x1af
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <_dtoa_r+0x2f8>)
 8005836:	e6c3      	b.n	80055c0 <_dtoa_r+0x28>
 8005838:	2301      	movs	r3, #1
 800583a:	e7e1      	b.n	8005800 <_dtoa_r+0x268>
 800583c:	2401      	movs	r4, #1
 800583e:	2300      	movs	r3, #0
 8005840:	940b      	str	r4, [sp, #44]	; 0x2c
 8005842:	9322      	str	r3, [sp, #136]	; 0x88
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	2200      	movs	r2, #0
 800584a:	9306      	str	r3, [sp, #24]
 800584c:	9308      	str	r3, [sp, #32]
 800584e:	2312      	movs	r3, #18
 8005850:	e7d1      	b.n	80057f6 <_dtoa_r+0x25e>
 8005852:	bf00      	nop
 8005854:	f3af 8000 	nop.w
 8005858:	636f4361 	.word	0x636f4361
 800585c:	3fd287a7 	.word	0x3fd287a7
 8005860:	8b60c8b3 	.word	0x8b60c8b3
 8005864:	3fc68a28 	.word	0x3fc68a28
 8005868:	509f79fb 	.word	0x509f79fb
 800586c:	3fd34413 	.word	0x3fd34413
 8005870:	080072ed 	.word	0x080072ed
 8005874:	08007304 	.word	0x08007304
 8005878:	7ff00000 	.word	0x7ff00000
 800587c:	080072e9 	.word	0x080072e9
 8005880:	080072e0 	.word	0x080072e0
 8005884:	080072bd 	.word	0x080072bd
 8005888:	3ff80000 	.word	0x3ff80000
 800588c:	080073f0 	.word	0x080073f0
 8005890:	0800735c 	.word	0x0800735c
 8005894:	2301      	movs	r3, #1
 8005896:	930b      	str	r3, [sp, #44]	; 0x2c
 8005898:	e7d4      	b.n	8005844 <_dtoa_r+0x2ac>
 800589a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800589c:	9306      	str	r3, [sp, #24]
 800589e:	9308      	str	r3, [sp, #32]
 80058a0:	e7b7      	b.n	8005812 <_dtoa_r+0x27a>
 80058a2:	3101      	adds	r1, #1
 80058a4:	0052      	lsls	r2, r2, #1
 80058a6:	e7b7      	b.n	8005818 <_dtoa_r+0x280>
 80058a8:	69eb      	ldr	r3, [r5, #28]
 80058aa:	9a03      	ldr	r2, [sp, #12]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	2b0e      	cmp	r3, #14
 80058b2:	f200 80a8 	bhi.w	8005a06 <_dtoa_r+0x46e>
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	f000 80a5 	beq.w	8005a06 <_dtoa_r+0x46e>
 80058bc:	f1bb 0f00 	cmp.w	fp, #0
 80058c0:	dd34      	ble.n	800592c <_dtoa_r+0x394>
 80058c2:	4b9a      	ldr	r3, [pc, #616]	; (8005b2c <_dtoa_r+0x594>)
 80058c4:	f00b 020f 	and.w	r2, fp, #15
 80058c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80058d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80058d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80058dc:	d016      	beq.n	800590c <_dtoa_r+0x374>
 80058de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058e2:	4b93      	ldr	r3, [pc, #588]	; (8005b30 <_dtoa_r+0x598>)
 80058e4:	2703      	movs	r7, #3
 80058e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058ea:	f7fa ff1f 	bl	800072c <__aeabi_ddiv>
 80058ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058f2:	f004 040f 	and.w	r4, r4, #15
 80058f6:	4e8e      	ldr	r6, [pc, #568]	; (8005b30 <_dtoa_r+0x598>)
 80058f8:	b954      	cbnz	r4, 8005910 <_dtoa_r+0x378>
 80058fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005902:	f7fa ff13 	bl	800072c <__aeabi_ddiv>
 8005906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800590a:	e029      	b.n	8005960 <_dtoa_r+0x3c8>
 800590c:	2702      	movs	r7, #2
 800590e:	e7f2      	b.n	80058f6 <_dtoa_r+0x35e>
 8005910:	07e1      	lsls	r1, r4, #31
 8005912:	d508      	bpl.n	8005926 <_dtoa_r+0x38e>
 8005914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005918:	e9d6 2300 	ldrd	r2, r3, [r6]
 800591c:	f7fa fddc 	bl	80004d8 <__aeabi_dmul>
 8005920:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005924:	3701      	adds	r7, #1
 8005926:	1064      	asrs	r4, r4, #1
 8005928:	3608      	adds	r6, #8
 800592a:	e7e5      	b.n	80058f8 <_dtoa_r+0x360>
 800592c:	f000 80a5 	beq.w	8005a7a <_dtoa_r+0x4e2>
 8005930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005934:	f1cb 0400 	rsb	r4, fp, #0
 8005938:	4b7c      	ldr	r3, [pc, #496]	; (8005b2c <_dtoa_r+0x594>)
 800593a:	f004 020f 	and.w	r2, r4, #15
 800593e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fa fdc7 	bl	80004d8 <__aeabi_dmul>
 800594a:	2702      	movs	r7, #2
 800594c:	2300      	movs	r3, #0
 800594e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005952:	4e77      	ldr	r6, [pc, #476]	; (8005b30 <_dtoa_r+0x598>)
 8005954:	1124      	asrs	r4, r4, #4
 8005956:	2c00      	cmp	r4, #0
 8005958:	f040 8084 	bne.w	8005a64 <_dtoa_r+0x4cc>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1d2      	bne.n	8005906 <_dtoa_r+0x36e>
 8005960:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005964:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8087 	beq.w	8005a7e <_dtoa_r+0x4e6>
 8005970:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005974:	2200      	movs	r2, #0
 8005976:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <_dtoa_r+0x59c>)
 8005978:	f7fb f820 	bl	80009bc <__aeabi_dcmplt>
 800597c:	2800      	cmp	r0, #0
 800597e:	d07e      	beq.n	8005a7e <_dtoa_r+0x4e6>
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d07b      	beq.n	8005a7e <_dtoa_r+0x4e6>
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	dd38      	ble.n	80059fe <_dtoa_r+0x466>
 800598c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005990:	2200      	movs	r2, #0
 8005992:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <_dtoa_r+0x5a0>)
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800599c:	9c06      	ldr	r4, [sp, #24]
 800599e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80059a2:	3701      	adds	r7, #1
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7fa fd2d 	bl	8000404 <__aeabi_i2d>
 80059aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ae:	f7fa fd93 	bl	80004d8 <__aeabi_dmul>
 80059b2:	2200      	movs	r2, #0
 80059b4:	4b61      	ldr	r3, [pc, #388]	; (8005b3c <_dtoa_r+0x5a4>)
 80059b6:	f7fa fbd9 	bl	800016c <__adddf3>
 80059ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059c2:	9611      	str	r6, [sp, #68]	; 0x44
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d15d      	bne.n	8005a84 <_dtoa_r+0x4ec>
 80059c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059cc:	2200      	movs	r2, #0
 80059ce:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <_dtoa_r+0x5a8>)
 80059d0:	f7fa fbca 	bl	8000168 <__aeabi_dsub>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059dc:	4633      	mov	r3, r6
 80059de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059e0:	f7fb f80a 	bl	80009f8 <__aeabi_dcmpgt>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f040 8295 	bne.w	8005f14 <_dtoa_r+0x97c>
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059f4:	f7fa ffe2 	bl	80009bc <__aeabi_dcmplt>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f040 8289 	bne.w	8005f10 <_dtoa_r+0x978>
 80059fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f2c0 8151 	blt.w	8005cb0 <_dtoa_r+0x718>
 8005a0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005a12:	f300 814d 	bgt.w	8005cb0 <_dtoa_r+0x718>
 8005a16:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <_dtoa_r+0x594>)
 8005a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f280 80da 	bge.w	8005be0 <_dtoa_r+0x648>
 8005a2c:	9b08      	ldr	r3, [sp, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f300 80d6 	bgt.w	8005be0 <_dtoa_r+0x648>
 8005a34:	f040 826b 	bne.w	8005f0e <_dtoa_r+0x976>
 8005a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <_dtoa_r+0x5a8>)
 8005a40:	f7fa fd4a 	bl	80004d8 <__aeabi_dmul>
 8005a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a48:	f7fa ffcc 	bl	80009e4 <__aeabi_dcmpge>
 8005a4c:	9c08      	ldr	r4, [sp, #32]
 8005a4e:	4626      	mov	r6, r4
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 8241 	bne.w	8005ed8 <_dtoa_r+0x940>
 8005a56:	2331      	movs	r3, #49	; 0x31
 8005a58:	9f03      	ldr	r7, [sp, #12]
 8005a5a:	f10b 0b01 	add.w	fp, fp, #1
 8005a5e:	f807 3b01 	strb.w	r3, [r7], #1
 8005a62:	e23d      	b.n	8005ee0 <_dtoa_r+0x948>
 8005a64:	07e2      	lsls	r2, r4, #31
 8005a66:	d505      	bpl.n	8005a74 <_dtoa_r+0x4dc>
 8005a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a6c:	f7fa fd34 	bl	80004d8 <__aeabi_dmul>
 8005a70:	2301      	movs	r3, #1
 8005a72:	3701      	adds	r7, #1
 8005a74:	1064      	asrs	r4, r4, #1
 8005a76:	3608      	adds	r6, #8
 8005a78:	e76d      	b.n	8005956 <_dtoa_r+0x3be>
 8005a7a:	2702      	movs	r7, #2
 8005a7c:	e770      	b.n	8005960 <_dtoa_r+0x3c8>
 8005a7e:	46d8      	mov	r8, fp
 8005a80:	9c08      	ldr	r4, [sp, #32]
 8005a82:	e78f      	b.n	80059a4 <_dtoa_r+0x40c>
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <_dtoa_r+0x594>)
 8005a88:	4421      	add	r1, r4
 8005a8a:	9112      	str	r1, [sp, #72]	; 0x48
 8005a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d054      	beq.n	8005b48 <_dtoa_r+0x5b0>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	4928      	ldr	r1, [pc, #160]	; (8005b44 <_dtoa_r+0x5ac>)
 8005aa2:	f7fa fe43 	bl	800072c <__aeabi_ddiv>
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	f7fa fb5d 	bl	8000168 <__aeabi_dsub>
 8005aae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ab2:	9f03      	ldr	r7, [sp, #12]
 8005ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab8:	f7fa ffbe 	bl	8000a38 <__aeabi_d2iz>
 8005abc:	4604      	mov	r4, r0
 8005abe:	f7fa fca1 	bl	8000404 <__aeabi_i2d>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aca:	f7fa fb4d 	bl	8000168 <__aeabi_dsub>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	3430      	adds	r4, #48	; 0x30
 8005ad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005adc:	f807 4b01 	strb.w	r4, [r7], #1
 8005ae0:	f7fa ff6c 	bl	80009bc <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d173      	bne.n	8005bd0 <_dtoa_r+0x638>
 8005ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aec:	2000      	movs	r0, #0
 8005aee:	4911      	ldr	r1, [pc, #68]	; (8005b34 <_dtoa_r+0x59c>)
 8005af0:	f7fa fb3a 	bl	8000168 <__aeabi_dsub>
 8005af4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005af8:	f7fa ff60 	bl	80009bc <__aeabi_dcmplt>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 80b6 	bne.w	8005c6e <_dtoa_r+0x6d6>
 8005b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b04:	429f      	cmp	r7, r3
 8005b06:	f43f af7a 	beq.w	80059fe <_dtoa_r+0x466>
 8005b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <_dtoa_r+0x5a0>)
 8005b12:	f7fa fce1 	bl	80004d8 <__aeabi_dmul>
 8005b16:	2200      	movs	r2, #0
 8005b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <_dtoa_r+0x5a0>)
 8005b22:	f7fa fcd9 	bl	80004d8 <__aeabi_dmul>
 8005b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b2a:	e7c3      	b.n	8005ab4 <_dtoa_r+0x51c>
 8005b2c:	080073f0 	.word	0x080073f0
 8005b30:	080073c8 	.word	0x080073c8
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	40240000 	.word	0x40240000
 8005b3c:	401c0000 	.word	0x401c0000
 8005b40:	40140000 	.word	0x40140000
 8005b44:	3fe00000 	.word	0x3fe00000
 8005b48:	4630      	mov	r0, r6
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	f7fa fcc4 	bl	80004d8 <__aeabi_dmul>
 8005b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b56:	9c03      	ldr	r4, [sp, #12]
 8005b58:	9314      	str	r3, [sp, #80]	; 0x50
 8005b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b5e:	f7fa ff6b 	bl	8000a38 <__aeabi_d2iz>
 8005b62:	9015      	str	r0, [sp, #84]	; 0x54
 8005b64:	f7fa fc4e 	bl	8000404 <__aeabi_i2d>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b70:	f7fa fafa 	bl	8000168 <__aeabi_dsub>
 8005b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b76:	4606      	mov	r6, r0
 8005b78:	3330      	adds	r3, #48	; 0x30
 8005b7a:	f804 3b01 	strb.w	r3, [r4], #1
 8005b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b80:	460f      	mov	r7, r1
 8005b82:	429c      	cmp	r4, r3
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	d124      	bne.n	8005bd4 <_dtoa_r+0x63c>
 8005b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b8e:	4baf      	ldr	r3, [pc, #700]	; (8005e4c <_dtoa_r+0x8b4>)
 8005b90:	f7fa faec 	bl	800016c <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa ff2c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d163      	bne.n	8005c6c <_dtoa_r+0x6d4>
 8005ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ba8:	2000      	movs	r0, #0
 8005baa:	49a8      	ldr	r1, [pc, #672]	; (8005e4c <_dtoa_r+0x8b4>)
 8005bac:	f7fa fadc 	bl	8000168 <__aeabi_dsub>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	f7fa ff00 	bl	80009bc <__aeabi_dcmplt>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f43f af1e 	beq.w	80059fe <_dtoa_r+0x466>
 8005bc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bc4:	1e7b      	subs	r3, r7, #1
 8005bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8005bc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d0f8      	beq.n	8005bc2 <_dtoa_r+0x62a>
 8005bd0:	46c3      	mov	fp, r8
 8005bd2:	e03b      	b.n	8005c4c <_dtoa_r+0x6b4>
 8005bd4:	4b9e      	ldr	r3, [pc, #632]	; (8005e50 <_dtoa_r+0x8b8>)
 8005bd6:	f7fa fc7f 	bl	80004d8 <__aeabi_dmul>
 8005bda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bde:	e7bc      	b.n	8005b5a <_dtoa_r+0x5c2>
 8005be0:	9f03      	ldr	r7, [sp, #12]
 8005be2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bea:	4640      	mov	r0, r8
 8005bec:	4649      	mov	r1, r9
 8005bee:	f7fa fd9d 	bl	800072c <__aeabi_ddiv>
 8005bf2:	f7fa ff21 	bl	8000a38 <__aeabi_d2iz>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	f7fa fc04 	bl	8000404 <__aeabi_i2d>
 8005bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c00:	f7fa fc6a 	bl	80004d8 <__aeabi_dmul>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	f7fa faac 	bl	8000168 <__aeabi_dsub>
 8005c10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c14:	f807 6b01 	strb.w	r6, [r7], #1
 8005c18:	9e03      	ldr	r6, [sp, #12]
 8005c1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c1e:	1bbe      	subs	r6, r7, r6
 8005c20:	45b4      	cmp	ip, r6
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	d136      	bne.n	8005c96 <_dtoa_r+0x6fe>
 8005c28:	f7fa faa0 	bl	800016c <__adddf3>
 8005c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c30:	4680      	mov	r8, r0
 8005c32:	4689      	mov	r9, r1
 8005c34:	f7fa fee0 	bl	80009f8 <__aeabi_dcmpgt>
 8005c38:	bb58      	cbnz	r0, 8005c92 <_dtoa_r+0x6fa>
 8005c3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005c46:	b108      	cbz	r0, 8005c4c <_dtoa_r+0x6b4>
 8005c48:	07e3      	lsls	r3, r4, #31
 8005c4a:	d422      	bmi.n	8005c92 <_dtoa_r+0x6fa>
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fbc2 	bl	80063d8 <_Bfree>
 8005c54:	2300      	movs	r3, #0
 8005c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c58:	703b      	strb	r3, [r7, #0]
 8005c5a:	f10b 0301 	add.w	r3, fp, #1
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f43f ace6 	beq.w	8005634 <_dtoa_r+0x9c>
 8005c68:	601f      	str	r7, [r3, #0]
 8005c6a:	e4e3      	b.n	8005634 <_dtoa_r+0x9c>
 8005c6c:	4627      	mov	r7, r4
 8005c6e:	463b      	mov	r3, r7
 8005c70:	461f      	mov	r7, r3
 8005c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c76:	2a39      	cmp	r2, #57	; 0x39
 8005c78:	d107      	bne.n	8005c8a <_dtoa_r+0x6f2>
 8005c7a:	9a03      	ldr	r2, [sp, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d1f7      	bne.n	8005c70 <_dtoa_r+0x6d8>
 8005c80:	2230      	movs	r2, #48	; 0x30
 8005c82:	9903      	ldr	r1, [sp, #12]
 8005c84:	f108 0801 	add.w	r8, r8, #1
 8005c88:	700a      	strb	r2, [r1, #0]
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	3201      	adds	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e79e      	b.n	8005bd0 <_dtoa_r+0x638>
 8005c92:	46d8      	mov	r8, fp
 8005c94:	e7eb      	b.n	8005c6e <_dtoa_r+0x6d6>
 8005c96:	2200      	movs	r2, #0
 8005c98:	4b6d      	ldr	r3, [pc, #436]	; (8005e50 <_dtoa_r+0x8b8>)
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	f7fa fe7f 	bl	80009a8 <__aeabi_dcmpeq>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d09b      	beq.n	8005be6 <_dtoa_r+0x64e>
 8005cae:	e7cd      	b.n	8005c4c <_dtoa_r+0x6b4>
 8005cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	f000 80c4 	beq.w	8005e40 <_dtoa_r+0x8a8>
 8005cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cba:	2a01      	cmp	r2, #1
 8005cbc:	f300 80a8 	bgt.w	8005e10 <_dtoa_r+0x878>
 8005cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	f000 80a0 	beq.w	8005e08 <_dtoa_r+0x870>
 8005cc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ccc:	464f      	mov	r7, r9
 8005cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	441a      	add	r2, r3
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4499      	add	r9, r3
 8005cda:	9209      	str	r2, [sp, #36]	; 0x24
 8005cdc:	f000 fc32 	bl	8006544 <__i2b>
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	b15f      	cbz	r7, 8005cfc <_dtoa_r+0x764>
 8005ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd08      	ble.n	8005cfc <_dtoa_r+0x764>
 8005cea:	42bb      	cmp	r3, r7
 8005cec:	bfa8      	it	ge
 8005cee:	463b      	movge	r3, r7
 8005cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf2:	eba9 0903 	sub.w	r9, r9, r3
 8005cf6:	1aff      	subs	r7, r7, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfe:	b1f3      	cbz	r3, 8005d3e <_dtoa_r+0x7a6>
 8005d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80a0 	beq.w	8005e48 <_dtoa_r+0x8b0>
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	dd10      	ble.n	8005d2e <_dtoa_r+0x796>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4622      	mov	r2, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 fcd5 	bl	80066c0 <__pow5mult>
 8005d16:	4652      	mov	r2, sl
 8005d18:	4601      	mov	r1, r0
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 fc27 	bl	8006570 <__multiply>
 8005d22:	4680      	mov	r8, r0
 8005d24:	4651      	mov	r1, sl
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 fb56 	bl	80063d8 <_Bfree>
 8005d2c:	46c2      	mov	sl, r8
 8005d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d30:	1b1a      	subs	r2, r3, r4
 8005d32:	d004      	beq.n	8005d3e <_dtoa_r+0x7a6>
 8005d34:	4651      	mov	r1, sl
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fcc2 	bl	80066c0 <__pow5mult>
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	2101      	movs	r1, #1
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 fbff 	bl	8006544 <__i2b>
 8005d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d48:	4604      	mov	r4, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f340 8082 	ble.w	8005e54 <_dtoa_r+0x8bc>
 8005d50:	461a      	mov	r2, r3
 8005d52:	4601      	mov	r1, r0
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fcb3 	bl	80066c0 <__pow5mult>
 8005d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	dd7b      	ble.n	8005e5a <_dtoa_r+0x8c2>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d6c:	6918      	ldr	r0, [r3, #16]
 8005d6e:	f000 fb9b 	bl	80064a8 <__hi0bits>
 8005d72:	f1c0 0020 	rsb	r0, r0, #32
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	4418      	add	r0, r3
 8005d7a:	f010 001f 	ands.w	r0, r0, #31
 8005d7e:	f000 8092 	beq.w	8005ea6 <_dtoa_r+0x90e>
 8005d82:	f1c0 0320 	rsb	r3, r0, #32
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	f340 8085 	ble.w	8005e96 <_dtoa_r+0x8fe>
 8005d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8e:	f1c0 001c 	rsb	r0, r0, #28
 8005d92:	4403      	add	r3, r0
 8005d94:	4481      	add	r9, r0
 8005d96:	4407      	add	r7, r0
 8005d98:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9a:	f1b9 0f00 	cmp.w	r9, #0
 8005d9e:	dd05      	ble.n	8005dac <_dtoa_r+0x814>
 8005da0:	4651      	mov	r1, sl
 8005da2:	464a      	mov	r2, r9
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 fce5 	bl	8006774 <__lshift>
 8005daa:	4682      	mov	sl, r0
 8005dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	dd05      	ble.n	8005dbe <_dtoa_r+0x826>
 8005db2:	4621      	mov	r1, r4
 8005db4:	461a      	mov	r2, r3
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 fcdc 	bl	8006774 <__lshift>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d072      	beq.n	8005eaa <_dtoa_r+0x912>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f000 fd40 	bl	800684c <__mcmp>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	da6c      	bge.n	8005eaa <_dtoa_r+0x912>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	220a      	movs	r2, #10
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fb20 	bl	800641c <__multadd>
 8005ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dde:	4682      	mov	sl, r0
 8005de0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 81ac 	beq.w	8006142 <_dtoa_r+0xbaa>
 8005dea:	2300      	movs	r3, #0
 8005dec:	4631      	mov	r1, r6
 8005dee:	220a      	movs	r2, #10
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fb13 	bl	800641c <__multadd>
 8005df6:	9b06      	ldr	r3, [sp, #24]
 8005df8:	4606      	mov	r6, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f300 8093 	bgt.w	8005f26 <_dtoa_r+0x98e>
 8005e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	dc59      	bgt.n	8005eba <_dtoa_r+0x922>
 8005e06:	e08e      	b.n	8005f26 <_dtoa_r+0x98e>
 8005e08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e0e:	e75d      	b.n	8005ccc <_dtoa_r+0x734>
 8005e10:	9b08      	ldr	r3, [sp, #32]
 8005e12:	1e5c      	subs	r4, r3, #1
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	bfbf      	itttt	lt
 8005e1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005e1e:	1ae3      	sublt	r3, r4, r3
 8005e20:	18d2      	addlt	r2, r2, r3
 8005e22:	bfa8      	it	ge
 8005e24:	1b1c      	subge	r4, r3, r4
 8005e26:	9b08      	ldr	r3, [sp, #32]
 8005e28:	bfbe      	ittt	lt
 8005e2a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005e2e:	2400      	movlt	r4, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfb5      	itete	lt
 8005e34:	eba9 0703 	sublt.w	r7, r9, r3
 8005e38:	464f      	movge	r7, r9
 8005e3a:	2300      	movlt	r3, #0
 8005e3c:	9b08      	ldrge	r3, [sp, #32]
 8005e3e:	e747      	b.n	8005cd0 <_dtoa_r+0x738>
 8005e40:	464f      	mov	r7, r9
 8005e42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e46:	e74c      	b.n	8005ce2 <_dtoa_r+0x74a>
 8005e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e4a:	e773      	b.n	8005d34 <_dtoa_r+0x79c>
 8005e4c:	3fe00000 	.word	0x3fe00000
 8005e50:	40240000 	.word	0x40240000
 8005e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	dc18      	bgt.n	8005e8c <_dtoa_r+0x8f4>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	b9b3      	cbnz	r3, 8005e8c <_dtoa_r+0x8f4>
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e64:	b993      	cbnz	r3, 8005e8c <_dtoa_r+0x8f4>
 8005e66:	9b05      	ldr	r3, [sp, #20]
 8005e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e6c:	0d1b      	lsrs	r3, r3, #20
 8005e6e:	051b      	lsls	r3, r3, #20
 8005e70:	b17b      	cbz	r3, 8005e92 <_dtoa_r+0x8fa>
 8005e72:	f04f 0801 	mov.w	r8, #1
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e78:	f109 0901 	add.w	r9, r9, #1
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f af6f 	bne.w	8005d66 <_dtoa_r+0x7ce>
 8005e88:	2001      	movs	r0, #1
 8005e8a:	e774      	b.n	8005d76 <_dtoa_r+0x7de>
 8005e8c:	f04f 0800 	mov.w	r8, #0
 8005e90:	e7f6      	b.n	8005e80 <_dtoa_r+0x8e8>
 8005e92:	4698      	mov	r8, r3
 8005e94:	e7f4      	b.n	8005e80 <_dtoa_r+0x8e8>
 8005e96:	d080      	beq.n	8005d9a <_dtoa_r+0x802>
 8005e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e9a:	331c      	adds	r3, #28
 8005e9c:	441a      	add	r2, r3
 8005e9e:	4499      	add	r9, r3
 8005ea0:	441f      	add	r7, r3
 8005ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea4:	e779      	b.n	8005d9a <_dtoa_r+0x802>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	e7f6      	b.n	8005e98 <_dtoa_r+0x900>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc34      	bgt.n	8005f1a <_dtoa_r+0x982>
 8005eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	dd31      	ble.n	8005f1a <_dtoa_r+0x982>
 8005eb6:	9b08      	ldr	r3, [sp, #32]
 8005eb8:	9306      	str	r3, [sp, #24]
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	b963      	cbnz	r3, 8005ed8 <_dtoa_r+0x940>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 faaa 	bl	800641c <__multadd>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4650      	mov	r0, sl
 8005ece:	f000 fcbd 	bl	800684c <__mcmp>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	f73f adbf 	bgt.w	8005a56 <_dtoa_r+0x4be>
 8005ed8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eda:	9f03      	ldr	r7, [sp, #12]
 8005edc:	ea6f 0b03 	mvn.w	fp, r3
 8005ee0:	f04f 0800 	mov.w	r8, #0
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 fa76 	bl	80063d8 <_Bfree>
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	f43f aead 	beq.w	8005c4c <_dtoa_r+0x6b4>
 8005ef2:	f1b8 0f00 	cmp.w	r8, #0
 8005ef6:	d005      	beq.n	8005f04 <_dtoa_r+0x96c>
 8005ef8:	45b0      	cmp	r8, r6
 8005efa:	d003      	beq.n	8005f04 <_dtoa_r+0x96c>
 8005efc:	4641      	mov	r1, r8
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fa6a 	bl	80063d8 <_Bfree>
 8005f04:	4631      	mov	r1, r6
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fa66 	bl	80063d8 <_Bfree>
 8005f0c:	e69e      	b.n	8005c4c <_dtoa_r+0x6b4>
 8005f0e:	2400      	movs	r4, #0
 8005f10:	4626      	mov	r6, r4
 8005f12:	e7e1      	b.n	8005ed8 <_dtoa_r+0x940>
 8005f14:	46c3      	mov	fp, r8
 8005f16:	4626      	mov	r6, r4
 8005f18:	e59d      	b.n	8005a56 <_dtoa_r+0x4be>
 8005f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80c8 	beq.w	80060b2 <_dtoa_r+0xb1a>
 8005f22:	9b08      	ldr	r3, [sp, #32]
 8005f24:	9306      	str	r3, [sp, #24]
 8005f26:	2f00      	cmp	r7, #0
 8005f28:	dd05      	ble.n	8005f36 <_dtoa_r+0x99e>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 fc20 	bl	8006774 <__lshift>
 8005f34:	4606      	mov	r6, r0
 8005f36:	f1b8 0f00 	cmp.w	r8, #0
 8005f3a:	d05b      	beq.n	8005ff4 <_dtoa_r+0xa5c>
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	6871      	ldr	r1, [r6, #4]
 8005f40:	f000 fa0a 	bl	8006358 <_Balloc>
 8005f44:	4607      	mov	r7, r0
 8005f46:	b928      	cbnz	r0, 8005f54 <_dtoa_r+0x9bc>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005f4e:	4b81      	ldr	r3, [pc, #516]	; (8006154 <_dtoa_r+0xbbc>)
 8005f50:	f7ff bb36 	b.w	80055c0 <_dtoa_r+0x28>
 8005f54:	6932      	ldr	r2, [r6, #16]
 8005f56:	f106 010c 	add.w	r1, r6, #12
 8005f5a:	3202      	adds	r2, #2
 8005f5c:	0092      	lsls	r2, r2, #2
 8005f5e:	300c      	adds	r0, #12
 8005f60:	f000 fe2c 	bl	8006bbc <memcpy>
 8005f64:	2201      	movs	r2, #1
 8005f66:	4639      	mov	r1, r7
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fc03 	bl	8006774 <__lshift>
 8005f6e:	46b0      	mov	r8, r6
 8005f70:	4606      	mov	r6, r0
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	9a03      	ldr	r2, [sp, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9308      	str	r3, [sp, #32]
 8005f7a:	9b06      	ldr	r3, [sp, #24]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	930a      	str	r3, [sp, #40]	; 0x28
 8005f88:	9b08      	ldr	r3, [sp, #32]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4650      	mov	r0, sl
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	f7ff fa78 	bl	8005486 <quorem>
 8005f96:	4641      	mov	r1, r8
 8005f98:	9006      	str	r0, [sp, #24]
 8005f9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f000 fc54 	bl	800684c <__mcmp>
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 fc6a 	bl	8006884 <__mdiff>
 8005fb0:	68c2      	ldr	r2, [r0, #12]
 8005fb2:	4607      	mov	r7, r0
 8005fb4:	bb02      	cbnz	r2, 8005ff8 <_dtoa_r+0xa60>
 8005fb6:	4601      	mov	r1, r0
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f000 fc47 	bl	800684c <__mcmp>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	920c      	str	r2, [sp, #48]	; 0x30
 8005fc6:	f000 fa07 	bl	80063d8 <_Bfree>
 8005fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fce:	9f08      	ldr	r7, [sp, #32]
 8005fd0:	ea43 0102 	orr.w	r1, r3, r2
 8005fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd6:	4319      	orrs	r1, r3
 8005fd8:	d110      	bne.n	8005ffc <_dtoa_r+0xa64>
 8005fda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fde:	d029      	beq.n	8006034 <_dtoa_r+0xa9c>
 8005fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	dd02      	ble.n	8005fec <_dtoa_r+0xa54>
 8005fe6:	9b06      	ldr	r3, [sp, #24]
 8005fe8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	f883 9000 	strb.w	r9, [r3]
 8005ff2:	e777      	b.n	8005ee4 <_dtoa_r+0x94c>
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	e7ba      	b.n	8005f6e <_dtoa_r+0x9d6>
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	e7e1      	b.n	8005fc0 <_dtoa_r+0xa28>
 8005ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	db04      	blt.n	800600c <_dtoa_r+0xa74>
 8006002:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006004:	430b      	orrs	r3, r1
 8006006:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006008:	430b      	orrs	r3, r1
 800600a:	d120      	bne.n	800604e <_dtoa_r+0xab6>
 800600c:	2a00      	cmp	r2, #0
 800600e:	dded      	ble.n	8005fec <_dtoa_r+0xa54>
 8006010:	4651      	mov	r1, sl
 8006012:	2201      	movs	r2, #1
 8006014:	4628      	mov	r0, r5
 8006016:	f000 fbad 	bl	8006774 <__lshift>
 800601a:	4621      	mov	r1, r4
 800601c:	4682      	mov	sl, r0
 800601e:	f000 fc15 	bl	800684c <__mcmp>
 8006022:	2800      	cmp	r0, #0
 8006024:	dc03      	bgt.n	800602e <_dtoa_r+0xa96>
 8006026:	d1e1      	bne.n	8005fec <_dtoa_r+0xa54>
 8006028:	f019 0f01 	tst.w	r9, #1
 800602c:	d0de      	beq.n	8005fec <_dtoa_r+0xa54>
 800602e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006032:	d1d8      	bne.n	8005fe6 <_dtoa_r+0xa4e>
 8006034:	2339      	movs	r3, #57	; 0x39
 8006036:	9a04      	ldr	r2, [sp, #16]
 8006038:	7013      	strb	r3, [r2, #0]
 800603a:	463b      	mov	r3, r7
 800603c:	461f      	mov	r7, r3
 800603e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006042:	3b01      	subs	r3, #1
 8006044:	2a39      	cmp	r2, #57	; 0x39
 8006046:	d06b      	beq.n	8006120 <_dtoa_r+0xb88>
 8006048:	3201      	adds	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e74a      	b.n	8005ee4 <_dtoa_r+0x94c>
 800604e:	2a00      	cmp	r2, #0
 8006050:	dd07      	ble.n	8006062 <_dtoa_r+0xaca>
 8006052:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006056:	d0ed      	beq.n	8006034 <_dtoa_r+0xa9c>
 8006058:	9a04      	ldr	r2, [sp, #16]
 800605a:	f109 0301 	add.w	r3, r9, #1
 800605e:	7013      	strb	r3, [r2, #0]
 8006060:	e740      	b.n	8005ee4 <_dtoa_r+0x94c>
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006066:	f803 9c01 	strb.w	r9, [r3, #-1]
 800606a:	4293      	cmp	r3, r2
 800606c:	d042      	beq.n	80060f4 <_dtoa_r+0xb5c>
 800606e:	4651      	mov	r1, sl
 8006070:	2300      	movs	r3, #0
 8006072:	220a      	movs	r2, #10
 8006074:	4628      	mov	r0, r5
 8006076:	f000 f9d1 	bl	800641c <__multadd>
 800607a:	45b0      	cmp	r8, r6
 800607c:	4682      	mov	sl, r0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	f04f 020a 	mov.w	r2, #10
 8006086:	4641      	mov	r1, r8
 8006088:	4628      	mov	r0, r5
 800608a:	d107      	bne.n	800609c <_dtoa_r+0xb04>
 800608c:	f000 f9c6 	bl	800641c <__multadd>
 8006090:	4680      	mov	r8, r0
 8006092:	4606      	mov	r6, r0
 8006094:	9b08      	ldr	r3, [sp, #32]
 8006096:	3301      	adds	r3, #1
 8006098:	9308      	str	r3, [sp, #32]
 800609a:	e775      	b.n	8005f88 <_dtoa_r+0x9f0>
 800609c:	f000 f9be 	bl	800641c <__multadd>
 80060a0:	4631      	mov	r1, r6
 80060a2:	4680      	mov	r8, r0
 80060a4:	2300      	movs	r3, #0
 80060a6:	220a      	movs	r2, #10
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 f9b7 	bl	800641c <__multadd>
 80060ae:	4606      	mov	r6, r0
 80060b0:	e7f0      	b.n	8006094 <_dtoa_r+0xafc>
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	9306      	str	r3, [sp, #24]
 80060b6:	9f03      	ldr	r7, [sp, #12]
 80060b8:	4621      	mov	r1, r4
 80060ba:	4650      	mov	r0, sl
 80060bc:	f7ff f9e3 	bl	8005486 <quorem>
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060c6:	f807 9b01 	strb.w	r9, [r7], #1
 80060ca:	1afa      	subs	r2, r7, r3
 80060cc:	9b06      	ldr	r3, [sp, #24]
 80060ce:	4293      	cmp	r3, r2
 80060d0:	dd07      	ble.n	80060e2 <_dtoa_r+0xb4a>
 80060d2:	4651      	mov	r1, sl
 80060d4:	2300      	movs	r3, #0
 80060d6:	220a      	movs	r2, #10
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 f99f 	bl	800641c <__multadd>
 80060de:	4682      	mov	sl, r0
 80060e0:	e7ea      	b.n	80060b8 <_dtoa_r+0xb20>
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	f04f 0800 	mov.w	r8, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfcc      	ite	gt
 80060ec:	461f      	movgt	r7, r3
 80060ee:	2701      	movle	r7, #1
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	441f      	add	r7, r3
 80060f4:	4651      	mov	r1, sl
 80060f6:	2201      	movs	r2, #1
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 fb3b 	bl	8006774 <__lshift>
 80060fe:	4621      	mov	r1, r4
 8006100:	4682      	mov	sl, r0
 8006102:	f000 fba3 	bl	800684c <__mcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	dc97      	bgt.n	800603a <_dtoa_r+0xaa2>
 800610a:	d102      	bne.n	8006112 <_dtoa_r+0xb7a>
 800610c:	f019 0f01 	tst.w	r9, #1
 8006110:	d193      	bne.n	800603a <_dtoa_r+0xaa2>
 8006112:	463b      	mov	r3, r7
 8006114:	461f      	mov	r7, r3
 8006116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800611a:	2a30      	cmp	r2, #48	; 0x30
 800611c:	d0fa      	beq.n	8006114 <_dtoa_r+0xb7c>
 800611e:	e6e1      	b.n	8005ee4 <_dtoa_r+0x94c>
 8006120:	9a03      	ldr	r2, [sp, #12]
 8006122:	429a      	cmp	r2, r3
 8006124:	d18a      	bne.n	800603c <_dtoa_r+0xaa4>
 8006126:	2331      	movs	r3, #49	; 0x31
 8006128:	f10b 0b01 	add.w	fp, fp, #1
 800612c:	e797      	b.n	800605e <_dtoa_r+0xac6>
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <_dtoa_r+0xbc0>)
 8006130:	f7ff ba9f 	b.w	8005672 <_dtoa_r+0xda>
 8006134:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006136:	2b00      	cmp	r3, #0
 8006138:	f47f aa77 	bne.w	800562a <_dtoa_r+0x92>
 800613c:	4b07      	ldr	r3, [pc, #28]	; (800615c <_dtoa_r+0xbc4>)
 800613e:	f7ff ba98 	b.w	8005672 <_dtoa_r+0xda>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dcb6      	bgt.n	80060b6 <_dtoa_r+0xb1e>
 8006148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800614a:	2b02      	cmp	r3, #2
 800614c:	f73f aeb5 	bgt.w	8005eba <_dtoa_r+0x922>
 8006150:	e7b1      	b.n	80060b6 <_dtoa_r+0xb1e>
 8006152:	bf00      	nop
 8006154:	0800735c 	.word	0x0800735c
 8006158:	080072bc 	.word	0x080072bc
 800615c:	080072e0 	.word	0x080072e0

08006160 <_free_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	2900      	cmp	r1, #0
 8006166:	d040      	beq.n	80061ea <_free_r+0x8a>
 8006168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616c:	1f0c      	subs	r4, r1, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfb8      	it	lt
 8006172:	18e4      	addlt	r4, r4, r3
 8006174:	f000 f8e4 	bl	8006340 <__malloc_lock>
 8006178:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <_free_r+0x8c>)
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	b933      	cbnz	r3, 800618c <_free_r+0x2c>
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	4628      	mov	r0, r5
 8006184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006188:	f000 b8e0 	b.w	800634c <__malloc_unlock>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d908      	bls.n	80061a2 <_free_r+0x42>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	1821      	adds	r1, r4, r0
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	e7ed      	b.n	800617e <_free_r+0x1e>
 80061a2:	461a      	mov	r2, r3
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b10b      	cbz	r3, 80061ac <_free_r+0x4c>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d9fa      	bls.n	80061a2 <_free_r+0x42>
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	1850      	adds	r0, r2, r1
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d10b      	bne.n	80061cc <_free_r+0x6c>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	4401      	add	r1, r0
 80061b8:	1850      	adds	r0, r2, r1
 80061ba:	4283      	cmp	r3, r0
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	d1e0      	bne.n	8006182 <_free_r+0x22>
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4408      	add	r0, r1
 80061c6:	6010      	str	r0, [r2, #0]
 80061c8:	6053      	str	r3, [r2, #4]
 80061ca:	e7da      	b.n	8006182 <_free_r+0x22>
 80061cc:	d902      	bls.n	80061d4 <_free_r+0x74>
 80061ce:	230c      	movs	r3, #12
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	e7d6      	b.n	8006182 <_free_r+0x22>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	1821      	adds	r1, r4, r0
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf01      	itttt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	1809      	addeq	r1, r1, r0
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6054      	str	r4, [r2, #4]
 80061e8:	e7cb      	b.n	8006182 <_free_r+0x22>
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000480 	.word	0x20000480

080061f0 <malloc>:
 80061f0:	4b02      	ldr	r3, [pc, #8]	; (80061fc <malloc+0xc>)
 80061f2:	4601      	mov	r1, r0
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	f000 b823 	b.w	8006240 <_malloc_r>
 80061fa:	bf00      	nop
 80061fc:	20000064 	.word	0x20000064

08006200 <sbrk_aligned>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4e0e      	ldr	r6, [pc, #56]	; (800623c <sbrk_aligned+0x3c>)
 8006204:	460c      	mov	r4, r1
 8006206:	6831      	ldr	r1, [r6, #0]
 8006208:	4605      	mov	r5, r0
 800620a:	b911      	cbnz	r1, 8006212 <sbrk_aligned+0x12>
 800620c:	f000 fcc6 	bl	8006b9c <_sbrk_r>
 8006210:	6030      	str	r0, [r6, #0]
 8006212:	4621      	mov	r1, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 fcc1 	bl	8006b9c <_sbrk_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d00a      	beq.n	8006234 <sbrk_aligned+0x34>
 800621e:	1cc4      	adds	r4, r0, #3
 8006220:	f024 0403 	bic.w	r4, r4, #3
 8006224:	42a0      	cmp	r0, r4
 8006226:	d007      	beq.n	8006238 <sbrk_aligned+0x38>
 8006228:	1a21      	subs	r1, r4, r0
 800622a:	4628      	mov	r0, r5
 800622c:	f000 fcb6 	bl	8006b9c <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d101      	bne.n	8006238 <sbrk_aligned+0x38>
 8006234:	f04f 34ff 	mov.w	r4, #4294967295
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	20000484 	.word	0x20000484

08006240 <_malloc_r>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	1ccd      	adds	r5, r1, #3
 8006246:	f025 0503 	bic.w	r5, r5, #3
 800624a:	3508      	adds	r5, #8
 800624c:	2d0c      	cmp	r5, #12
 800624e:	bf38      	it	cc
 8006250:	250c      	movcc	r5, #12
 8006252:	2d00      	cmp	r5, #0
 8006254:	4607      	mov	r7, r0
 8006256:	db01      	blt.n	800625c <_malloc_r+0x1c>
 8006258:	42a9      	cmp	r1, r5
 800625a:	d905      	bls.n	8006268 <_malloc_r+0x28>
 800625c:	230c      	movs	r3, #12
 800625e:	2600      	movs	r6, #0
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4630      	mov	r0, r6
 8006264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006268:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800633c <_malloc_r+0xfc>
 800626c:	f000 f868 	bl	8006340 <__malloc_lock>
 8006270:	f8d8 3000 	ldr.w	r3, [r8]
 8006274:	461c      	mov	r4, r3
 8006276:	bb5c      	cbnz	r4, 80062d0 <_malloc_r+0x90>
 8006278:	4629      	mov	r1, r5
 800627a:	4638      	mov	r0, r7
 800627c:	f7ff ffc0 	bl	8006200 <sbrk_aligned>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	4604      	mov	r4, r0
 8006284:	d155      	bne.n	8006332 <_malloc_r+0xf2>
 8006286:	f8d8 4000 	ldr.w	r4, [r8]
 800628a:	4626      	mov	r6, r4
 800628c:	2e00      	cmp	r6, #0
 800628e:	d145      	bne.n	800631c <_malloc_r+0xdc>
 8006290:	2c00      	cmp	r4, #0
 8006292:	d048      	beq.n	8006326 <_malloc_r+0xe6>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	4631      	mov	r1, r6
 8006298:	4638      	mov	r0, r7
 800629a:	eb04 0903 	add.w	r9, r4, r3
 800629e:	f000 fc7d 	bl	8006b9c <_sbrk_r>
 80062a2:	4581      	cmp	r9, r0
 80062a4:	d13f      	bne.n	8006326 <_malloc_r+0xe6>
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	4638      	mov	r0, r7
 80062aa:	1a6d      	subs	r5, r5, r1
 80062ac:	4629      	mov	r1, r5
 80062ae:	f7ff ffa7 	bl	8006200 <sbrk_aligned>
 80062b2:	3001      	adds	r0, #1
 80062b4:	d037      	beq.n	8006326 <_malloc_r+0xe6>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	442b      	add	r3, r5
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	f8d8 3000 	ldr.w	r3, [r8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d038      	beq.n	8006336 <_malloc_r+0xf6>
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	42a2      	cmp	r2, r4
 80062c8:	d12b      	bne.n	8006322 <_malloc_r+0xe2>
 80062ca:	2200      	movs	r2, #0
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	e00f      	b.n	80062f0 <_malloc_r+0xb0>
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	1b52      	subs	r2, r2, r5
 80062d4:	d41f      	bmi.n	8006316 <_malloc_r+0xd6>
 80062d6:	2a0b      	cmp	r2, #11
 80062d8:	d917      	bls.n	800630a <_malloc_r+0xca>
 80062da:	1961      	adds	r1, r4, r5
 80062dc:	42a3      	cmp	r3, r4
 80062de:	6025      	str	r5, [r4, #0]
 80062e0:	bf18      	it	ne
 80062e2:	6059      	strne	r1, [r3, #4]
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	bf08      	it	eq
 80062e8:	f8c8 1000 	streq.w	r1, [r8]
 80062ec:	5162      	str	r2, [r4, r5]
 80062ee:	604b      	str	r3, [r1, #4]
 80062f0:	4638      	mov	r0, r7
 80062f2:	f104 060b 	add.w	r6, r4, #11
 80062f6:	f000 f829 	bl	800634c <__malloc_unlock>
 80062fa:	f026 0607 	bic.w	r6, r6, #7
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	1af2      	subs	r2, r6, r3
 8006302:	d0ae      	beq.n	8006262 <_malloc_r+0x22>
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	50a3      	str	r3, [r4, r2]
 8006308:	e7ab      	b.n	8006262 <_malloc_r+0x22>
 800630a:	42a3      	cmp	r3, r4
 800630c:	6862      	ldr	r2, [r4, #4]
 800630e:	d1dd      	bne.n	80062cc <_malloc_r+0x8c>
 8006310:	f8c8 2000 	str.w	r2, [r8]
 8006314:	e7ec      	b.n	80062f0 <_malloc_r+0xb0>
 8006316:	4623      	mov	r3, r4
 8006318:	6864      	ldr	r4, [r4, #4]
 800631a:	e7ac      	b.n	8006276 <_malloc_r+0x36>
 800631c:	4634      	mov	r4, r6
 800631e:	6876      	ldr	r6, [r6, #4]
 8006320:	e7b4      	b.n	800628c <_malloc_r+0x4c>
 8006322:	4613      	mov	r3, r2
 8006324:	e7cc      	b.n	80062c0 <_malloc_r+0x80>
 8006326:	230c      	movs	r3, #12
 8006328:	4638      	mov	r0, r7
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	f000 f80e 	bl	800634c <__malloc_unlock>
 8006330:	e797      	b.n	8006262 <_malloc_r+0x22>
 8006332:	6025      	str	r5, [r4, #0]
 8006334:	e7dc      	b.n	80062f0 <_malloc_r+0xb0>
 8006336:	605b      	str	r3, [r3, #4]
 8006338:	deff      	udf	#255	; 0xff
 800633a:	bf00      	nop
 800633c:	20000480 	.word	0x20000480

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_lock+0x8>)
 8006342:	f7ff b890 	b.w	8005466 <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	2000047c 	.word	0x2000047c

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_unlock+0x8>)
 800634e:	f7ff b88b 	b.w	8005468 <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	2000047c 	.word	0x2000047c

08006358 <_Balloc>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	69c6      	ldr	r6, [r0, #28]
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	b976      	cbnz	r6, 8006380 <_Balloc+0x28>
 8006362:	2010      	movs	r0, #16
 8006364:	f7ff ff44 	bl	80061f0 <malloc>
 8006368:	4602      	mov	r2, r0
 800636a:	61e0      	str	r0, [r4, #28]
 800636c:	b920      	cbnz	r0, 8006378 <_Balloc+0x20>
 800636e:	216b      	movs	r1, #107	; 0x6b
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <_Balloc+0x78>)
 8006372:	4818      	ldr	r0, [pc, #96]	; (80063d4 <_Balloc+0x7c>)
 8006374:	f000 fc30 	bl	8006bd8 <__assert_func>
 8006378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800637c:	6006      	str	r6, [r0, #0]
 800637e:	60c6      	str	r6, [r0, #12]
 8006380:	69e6      	ldr	r6, [r4, #28]
 8006382:	68f3      	ldr	r3, [r6, #12]
 8006384:	b183      	cbz	r3, 80063a8 <_Balloc+0x50>
 8006386:	69e3      	ldr	r3, [r4, #28]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800638e:	b9b8      	cbnz	r0, 80063c0 <_Balloc+0x68>
 8006390:	2101      	movs	r1, #1
 8006392:	fa01 f605 	lsl.w	r6, r1, r5
 8006396:	1d72      	adds	r2, r6, #5
 8006398:	4620      	mov	r0, r4
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	f000 fc3a 	bl	8006c14 <_calloc_r>
 80063a0:	b160      	cbz	r0, 80063bc <_Balloc+0x64>
 80063a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063a6:	e00e      	b.n	80063c6 <_Balloc+0x6e>
 80063a8:	2221      	movs	r2, #33	; 0x21
 80063aa:	2104      	movs	r1, #4
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fc31 	bl	8006c14 <_calloc_r>
 80063b2:	69e3      	ldr	r3, [r4, #28]
 80063b4:	60f0      	str	r0, [r6, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e4      	bne.n	8006386 <_Balloc+0x2e>
 80063bc:	2000      	movs	r0, #0
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	6802      	ldr	r2, [r0, #0]
 80063c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063c6:	2300      	movs	r3, #0
 80063c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063cc:	e7f7      	b.n	80063be <_Balloc+0x66>
 80063ce:	bf00      	nop
 80063d0:	080072ed 	.word	0x080072ed
 80063d4:	0800736d 	.word	0x0800736d

080063d8 <_Bfree>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	69c6      	ldr	r6, [r0, #28]
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b976      	cbnz	r6, 8006400 <_Bfree+0x28>
 80063e2:	2010      	movs	r0, #16
 80063e4:	f7ff ff04 	bl	80061f0 <malloc>
 80063e8:	4602      	mov	r2, r0
 80063ea:	61e8      	str	r0, [r5, #28]
 80063ec:	b920      	cbnz	r0, 80063f8 <_Bfree+0x20>
 80063ee:	218f      	movs	r1, #143	; 0x8f
 80063f0:	4b08      	ldr	r3, [pc, #32]	; (8006414 <_Bfree+0x3c>)
 80063f2:	4809      	ldr	r0, [pc, #36]	; (8006418 <_Bfree+0x40>)
 80063f4:	f000 fbf0 	bl	8006bd8 <__assert_func>
 80063f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063fc:	6006      	str	r6, [r0, #0]
 80063fe:	60c6      	str	r6, [r0, #12]
 8006400:	b13c      	cbz	r4, 8006412 <_Bfree+0x3a>
 8006402:	69eb      	ldr	r3, [r5, #28]
 8006404:	6862      	ldr	r2, [r4, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800640c:	6021      	str	r1, [r4, #0]
 800640e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	080072ed 	.word	0x080072ed
 8006418:	0800736d 	.word	0x0800736d

0800641c <__multadd>:
 800641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	461e      	mov	r6, r3
 8006426:	2000      	movs	r0, #0
 8006428:	690d      	ldr	r5, [r1, #16]
 800642a:	f101 0c14 	add.w	ip, r1, #20
 800642e:	f8dc 3000 	ldr.w	r3, [ip]
 8006432:	3001      	adds	r0, #1
 8006434:	b299      	uxth	r1, r3
 8006436:	fb02 6101 	mla	r1, r2, r1, r6
 800643a:	0c1e      	lsrs	r6, r3, #16
 800643c:	0c0b      	lsrs	r3, r1, #16
 800643e:	fb02 3306 	mla	r3, r2, r6, r3
 8006442:	b289      	uxth	r1, r1
 8006444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006448:	4285      	cmp	r5, r0
 800644a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800644e:	f84c 1b04 	str.w	r1, [ip], #4
 8006452:	dcec      	bgt.n	800642e <__multadd+0x12>
 8006454:	b30e      	cbz	r6, 800649a <__multadd+0x7e>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	42ab      	cmp	r3, r5
 800645a:	dc19      	bgt.n	8006490 <__multadd+0x74>
 800645c:	6861      	ldr	r1, [r4, #4]
 800645e:	4638      	mov	r0, r7
 8006460:	3101      	adds	r1, #1
 8006462:	f7ff ff79 	bl	8006358 <_Balloc>
 8006466:	4680      	mov	r8, r0
 8006468:	b928      	cbnz	r0, 8006476 <__multadd+0x5a>
 800646a:	4602      	mov	r2, r0
 800646c:	21ba      	movs	r1, #186	; 0xba
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <__multadd+0x84>)
 8006470:	480c      	ldr	r0, [pc, #48]	; (80064a4 <__multadd+0x88>)
 8006472:	f000 fbb1 	bl	8006bd8 <__assert_func>
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	f104 010c 	add.w	r1, r4, #12
 800647c:	3202      	adds	r2, #2
 800647e:	0092      	lsls	r2, r2, #2
 8006480:	300c      	adds	r0, #12
 8006482:	f000 fb9b 	bl	8006bbc <memcpy>
 8006486:	4621      	mov	r1, r4
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ffa5 	bl	80063d8 <_Bfree>
 800648e:	4644      	mov	r4, r8
 8006490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006494:	3501      	adds	r5, #1
 8006496:	615e      	str	r6, [r3, #20]
 8006498:	6125      	str	r5, [r4, #16]
 800649a:	4620      	mov	r0, r4
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	0800735c 	.word	0x0800735c
 80064a4:	0800736d 	.word	0x0800736d

080064a8 <__hi0bits>:
 80064a8:	0c02      	lsrs	r2, r0, #16
 80064aa:	0412      	lsls	r2, r2, #16
 80064ac:	4603      	mov	r3, r0
 80064ae:	b9ca      	cbnz	r2, 80064e4 <__hi0bits+0x3c>
 80064b0:	0403      	lsls	r3, r0, #16
 80064b2:	2010      	movs	r0, #16
 80064b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064b8:	bf04      	itt	eq
 80064ba:	021b      	lsleq	r3, r3, #8
 80064bc:	3008      	addeq	r0, #8
 80064be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064c2:	bf04      	itt	eq
 80064c4:	011b      	lsleq	r3, r3, #4
 80064c6:	3004      	addeq	r0, #4
 80064c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064cc:	bf04      	itt	eq
 80064ce:	009b      	lsleq	r3, r3, #2
 80064d0:	3002      	addeq	r0, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	db05      	blt.n	80064e2 <__hi0bits+0x3a>
 80064d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064da:	f100 0001 	add.w	r0, r0, #1
 80064de:	bf08      	it	eq
 80064e0:	2020      	moveq	r0, #32
 80064e2:	4770      	bx	lr
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7e5      	b.n	80064b4 <__hi0bits+0xc>

080064e8 <__lo0bits>:
 80064e8:	6803      	ldr	r3, [r0, #0]
 80064ea:	4602      	mov	r2, r0
 80064ec:	f013 0007 	ands.w	r0, r3, #7
 80064f0:	d00b      	beq.n	800650a <__lo0bits+0x22>
 80064f2:	07d9      	lsls	r1, r3, #31
 80064f4:	d421      	bmi.n	800653a <__lo0bits+0x52>
 80064f6:	0798      	lsls	r0, r3, #30
 80064f8:	bf49      	itett	mi
 80064fa:	085b      	lsrmi	r3, r3, #1
 80064fc:	089b      	lsrpl	r3, r3, #2
 80064fe:	2001      	movmi	r0, #1
 8006500:	6013      	strmi	r3, [r2, #0]
 8006502:	bf5c      	itt	pl
 8006504:	2002      	movpl	r0, #2
 8006506:	6013      	strpl	r3, [r2, #0]
 8006508:	4770      	bx	lr
 800650a:	b299      	uxth	r1, r3
 800650c:	b909      	cbnz	r1, 8006512 <__lo0bits+0x2a>
 800650e:	2010      	movs	r0, #16
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2d9      	uxtb	r1, r3
 8006514:	b909      	cbnz	r1, 800651a <__lo0bits+0x32>
 8006516:	3008      	adds	r0, #8
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	0719      	lsls	r1, r3, #28
 800651c:	bf04      	itt	eq
 800651e:	091b      	lsreq	r3, r3, #4
 8006520:	3004      	addeq	r0, #4
 8006522:	0799      	lsls	r1, r3, #30
 8006524:	bf04      	itt	eq
 8006526:	089b      	lsreq	r3, r3, #2
 8006528:	3002      	addeq	r0, #2
 800652a:	07d9      	lsls	r1, r3, #31
 800652c:	d403      	bmi.n	8006536 <__lo0bits+0x4e>
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	f100 0001 	add.w	r0, r0, #1
 8006534:	d003      	beq.n	800653e <__lo0bits+0x56>
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4770      	bx	lr
 800653a:	2000      	movs	r0, #0
 800653c:	4770      	bx	lr
 800653e:	2020      	movs	r0, #32
 8006540:	4770      	bx	lr
	...

08006544 <__i2b>:
 8006544:	b510      	push	{r4, lr}
 8006546:	460c      	mov	r4, r1
 8006548:	2101      	movs	r1, #1
 800654a:	f7ff ff05 	bl	8006358 <_Balloc>
 800654e:	4602      	mov	r2, r0
 8006550:	b928      	cbnz	r0, 800655e <__i2b+0x1a>
 8006552:	f240 1145 	movw	r1, #325	; 0x145
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <__i2b+0x24>)
 8006558:	4804      	ldr	r0, [pc, #16]	; (800656c <__i2b+0x28>)
 800655a:	f000 fb3d 	bl	8006bd8 <__assert_func>
 800655e:	2301      	movs	r3, #1
 8006560:	6144      	str	r4, [r0, #20]
 8006562:	6103      	str	r3, [r0, #16]
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	0800735c 	.word	0x0800735c
 800656c:	0800736d 	.word	0x0800736d

08006570 <__multiply>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4691      	mov	r9, r2
 8006576:	690a      	ldr	r2, [r1, #16]
 8006578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800657c:	460c      	mov	r4, r1
 800657e:	429a      	cmp	r2, r3
 8006580:	bfbe      	ittt	lt
 8006582:	460b      	movlt	r3, r1
 8006584:	464c      	movlt	r4, r9
 8006586:	4699      	movlt	r9, r3
 8006588:	6927      	ldr	r7, [r4, #16]
 800658a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	6861      	ldr	r1, [r4, #4]
 8006592:	eb07 060a 	add.w	r6, r7, sl
 8006596:	42b3      	cmp	r3, r6
 8006598:	b085      	sub	sp, #20
 800659a:	bfb8      	it	lt
 800659c:	3101      	addlt	r1, #1
 800659e:	f7ff fedb 	bl	8006358 <_Balloc>
 80065a2:	b930      	cbnz	r0, 80065b2 <__multiply+0x42>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80065aa:	4b43      	ldr	r3, [pc, #268]	; (80066b8 <__multiply+0x148>)
 80065ac:	4843      	ldr	r0, [pc, #268]	; (80066bc <__multiply+0x14c>)
 80065ae:	f000 fb13 	bl	8006bd8 <__assert_func>
 80065b2:	f100 0514 	add.w	r5, r0, #20
 80065b6:	462b      	mov	r3, r5
 80065b8:	2200      	movs	r2, #0
 80065ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065be:	4543      	cmp	r3, r8
 80065c0:	d321      	bcc.n	8006606 <__multiply+0x96>
 80065c2:	f104 0314 	add.w	r3, r4, #20
 80065c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065ca:	f109 0314 	add.w	r3, r9, #20
 80065ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065d2:	9202      	str	r2, [sp, #8]
 80065d4:	1b3a      	subs	r2, r7, r4
 80065d6:	3a15      	subs	r2, #21
 80065d8:	f022 0203 	bic.w	r2, r2, #3
 80065dc:	3204      	adds	r2, #4
 80065de:	f104 0115 	add.w	r1, r4, #21
 80065e2:	428f      	cmp	r7, r1
 80065e4:	bf38      	it	cc
 80065e6:	2204      	movcc	r2, #4
 80065e8:	9201      	str	r2, [sp, #4]
 80065ea:	9a02      	ldr	r2, [sp, #8]
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d80c      	bhi.n	800660c <__multiply+0x9c>
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	dd03      	ble.n	80065fe <__multiply+0x8e>
 80065f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d05a      	beq.n	80066b4 <__multiply+0x144>
 80065fe:	6106      	str	r6, [r0, #16]
 8006600:	b005      	add	sp, #20
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	f843 2b04 	str.w	r2, [r3], #4
 800660a:	e7d8      	b.n	80065be <__multiply+0x4e>
 800660c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006610:	f1ba 0f00 	cmp.w	sl, #0
 8006614:	d023      	beq.n	800665e <__multiply+0xee>
 8006616:	46a9      	mov	r9, r5
 8006618:	f04f 0c00 	mov.w	ip, #0
 800661c:	f104 0e14 	add.w	lr, r4, #20
 8006620:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006624:	f8d9 1000 	ldr.w	r1, [r9]
 8006628:	fa1f fb82 	uxth.w	fp, r2
 800662c:	b289      	uxth	r1, r1
 800662e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006632:	4461      	add	r1, ip
 8006634:	f8d9 c000 	ldr.w	ip, [r9]
 8006638:	0c12      	lsrs	r2, r2, #16
 800663a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800663e:	fb0a c202 	mla	r2, sl, r2, ip
 8006642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006646:	b289      	uxth	r1, r1
 8006648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800664c:	4577      	cmp	r7, lr
 800664e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006652:	f849 1b04 	str.w	r1, [r9], #4
 8006656:	d8e3      	bhi.n	8006620 <__multiply+0xb0>
 8006658:	9a01      	ldr	r2, [sp, #4]
 800665a:	f845 c002 	str.w	ip, [r5, r2]
 800665e:	9a03      	ldr	r2, [sp, #12]
 8006660:	3304      	adds	r3, #4
 8006662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006666:	f1b9 0f00 	cmp.w	r9, #0
 800666a:	d021      	beq.n	80066b0 <__multiply+0x140>
 800666c:	46ae      	mov	lr, r5
 800666e:	f04f 0a00 	mov.w	sl, #0
 8006672:	6829      	ldr	r1, [r5, #0]
 8006674:	f104 0c14 	add.w	ip, r4, #20
 8006678:	f8bc b000 	ldrh.w	fp, [ip]
 800667c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006680:	b289      	uxth	r1, r1
 8006682:	fb09 220b 	mla	r2, r9, fp, r2
 8006686:	4452      	add	r2, sl
 8006688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800668c:	f84e 1b04 	str.w	r1, [lr], #4
 8006690:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006698:	f8be 1000 	ldrh.w	r1, [lr]
 800669c:	4567      	cmp	r7, ip
 800669e:	fb09 110a 	mla	r1, r9, sl, r1
 80066a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80066a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066aa:	d8e5      	bhi.n	8006678 <__multiply+0x108>
 80066ac:	9a01      	ldr	r2, [sp, #4]
 80066ae:	50a9      	str	r1, [r5, r2]
 80066b0:	3504      	adds	r5, #4
 80066b2:	e79a      	b.n	80065ea <__multiply+0x7a>
 80066b4:	3e01      	subs	r6, #1
 80066b6:	e79c      	b.n	80065f2 <__multiply+0x82>
 80066b8:	0800735c 	.word	0x0800735c
 80066bc:	0800736d 	.word	0x0800736d

080066c0 <__pow5mult>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4615      	mov	r5, r2
 80066c6:	f012 0203 	ands.w	r2, r2, #3
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	d007      	beq.n	80066e0 <__pow5mult+0x20>
 80066d0:	4c25      	ldr	r4, [pc, #148]	; (8006768 <__pow5mult+0xa8>)
 80066d2:	3a01      	subs	r2, #1
 80066d4:	2300      	movs	r3, #0
 80066d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066da:	f7ff fe9f 	bl	800641c <__multadd>
 80066de:	4607      	mov	r7, r0
 80066e0:	10ad      	asrs	r5, r5, #2
 80066e2:	d03d      	beq.n	8006760 <__pow5mult+0xa0>
 80066e4:	69f4      	ldr	r4, [r6, #28]
 80066e6:	b97c      	cbnz	r4, 8006708 <__pow5mult+0x48>
 80066e8:	2010      	movs	r0, #16
 80066ea:	f7ff fd81 	bl	80061f0 <malloc>
 80066ee:	4602      	mov	r2, r0
 80066f0:	61f0      	str	r0, [r6, #28]
 80066f2:	b928      	cbnz	r0, 8006700 <__pow5mult+0x40>
 80066f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <__pow5mult+0xac>)
 80066fa:	481d      	ldr	r0, [pc, #116]	; (8006770 <__pow5mult+0xb0>)
 80066fc:	f000 fa6c 	bl	8006bd8 <__assert_func>
 8006700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006704:	6004      	str	r4, [r0, #0]
 8006706:	60c4      	str	r4, [r0, #12]
 8006708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800670c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006710:	b94c      	cbnz	r4, 8006726 <__pow5mult+0x66>
 8006712:	f240 2171 	movw	r1, #625	; 0x271
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff ff14 	bl	8006544 <__i2b>
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	f8c8 0008 	str.w	r0, [r8, #8]
 8006724:	6003      	str	r3, [r0, #0]
 8006726:	f04f 0900 	mov.w	r9, #0
 800672a:	07eb      	lsls	r3, r5, #31
 800672c:	d50a      	bpl.n	8006744 <__pow5mult+0x84>
 800672e:	4639      	mov	r1, r7
 8006730:	4622      	mov	r2, r4
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff ff1c 	bl	8006570 <__multiply>
 8006738:	4680      	mov	r8, r0
 800673a:	4639      	mov	r1, r7
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff fe4b 	bl	80063d8 <_Bfree>
 8006742:	4647      	mov	r7, r8
 8006744:	106d      	asrs	r5, r5, #1
 8006746:	d00b      	beq.n	8006760 <__pow5mult+0xa0>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	b938      	cbnz	r0, 800675c <__pow5mult+0x9c>
 800674c:	4622      	mov	r2, r4
 800674e:	4621      	mov	r1, r4
 8006750:	4630      	mov	r0, r6
 8006752:	f7ff ff0d 	bl	8006570 <__multiply>
 8006756:	6020      	str	r0, [r4, #0]
 8006758:	f8c0 9000 	str.w	r9, [r0]
 800675c:	4604      	mov	r4, r0
 800675e:	e7e4      	b.n	800672a <__pow5mult+0x6a>
 8006760:	4638      	mov	r0, r7
 8006762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006766:	bf00      	nop
 8006768:	080074b8 	.word	0x080074b8
 800676c:	080072ed 	.word	0x080072ed
 8006770:	0800736d 	.word	0x0800736d

08006774 <__lshift>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	4607      	mov	r7, r0
 800677c:	4691      	mov	r9, r2
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800678c:	f108 0601 	add.w	r6, r8, #1
 8006790:	42b3      	cmp	r3, r6
 8006792:	db0b      	blt.n	80067ac <__lshift+0x38>
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff fddf 	bl	8006358 <_Balloc>
 800679a:	4605      	mov	r5, r0
 800679c:	b948      	cbnz	r0, 80067b2 <__lshift+0x3e>
 800679e:	4602      	mov	r2, r0
 80067a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <__lshift+0xd0>)
 80067a6:	4828      	ldr	r0, [pc, #160]	; (8006848 <__lshift+0xd4>)
 80067a8:	f000 fa16 	bl	8006bd8 <__assert_func>
 80067ac:	3101      	adds	r1, #1
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	e7ee      	b.n	8006790 <__lshift+0x1c>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f100 0114 	add.w	r1, r0, #20
 80067b8:	f100 0210 	add.w	r2, r0, #16
 80067bc:	4618      	mov	r0, r3
 80067be:	4553      	cmp	r3, sl
 80067c0:	db33      	blt.n	800682a <__lshift+0xb6>
 80067c2:	6920      	ldr	r0, [r4, #16]
 80067c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067c8:	f104 0314 	add.w	r3, r4, #20
 80067cc:	f019 091f 	ands.w	r9, r9, #31
 80067d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067d8:	d02b      	beq.n	8006832 <__lshift+0xbe>
 80067da:	468a      	mov	sl, r1
 80067dc:	2200      	movs	r2, #0
 80067de:	f1c9 0e20 	rsb	lr, r9, #32
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	fa00 f009 	lsl.w	r0, r0, r9
 80067e8:	4310      	orrs	r0, r2
 80067ea:	f84a 0b04 	str.w	r0, [sl], #4
 80067ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80067f2:	459c      	cmp	ip, r3
 80067f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80067f8:	d8f3      	bhi.n	80067e2 <__lshift+0x6e>
 80067fa:	ebac 0304 	sub.w	r3, ip, r4
 80067fe:	3b15      	subs	r3, #21
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	3304      	adds	r3, #4
 8006806:	f104 0015 	add.w	r0, r4, #21
 800680a:	4584      	cmp	ip, r0
 800680c:	bf38      	it	cc
 800680e:	2304      	movcc	r3, #4
 8006810:	50ca      	str	r2, [r1, r3]
 8006812:	b10a      	cbz	r2, 8006818 <__lshift+0xa4>
 8006814:	f108 0602 	add.w	r6, r8, #2
 8006818:	3e01      	subs	r6, #1
 800681a:	4638      	mov	r0, r7
 800681c:	4621      	mov	r1, r4
 800681e:	612e      	str	r6, [r5, #16]
 8006820:	f7ff fdda 	bl	80063d8 <_Bfree>
 8006824:	4628      	mov	r0, r5
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	f842 0f04 	str.w	r0, [r2, #4]!
 800682e:	3301      	adds	r3, #1
 8006830:	e7c5      	b.n	80067be <__lshift+0x4a>
 8006832:	3904      	subs	r1, #4
 8006834:	f853 2b04 	ldr.w	r2, [r3], #4
 8006838:	459c      	cmp	ip, r3
 800683a:	f841 2f04 	str.w	r2, [r1, #4]!
 800683e:	d8f9      	bhi.n	8006834 <__lshift+0xc0>
 8006840:	e7ea      	b.n	8006818 <__lshift+0xa4>
 8006842:	bf00      	nop
 8006844:	0800735c 	.word	0x0800735c
 8006848:	0800736d 	.word	0x0800736d

0800684c <__mcmp>:
 800684c:	4603      	mov	r3, r0
 800684e:	690a      	ldr	r2, [r1, #16]
 8006850:	6900      	ldr	r0, [r0, #16]
 8006852:	b530      	push	{r4, r5, lr}
 8006854:	1a80      	subs	r0, r0, r2
 8006856:	d10d      	bne.n	8006874 <__mcmp+0x28>
 8006858:	3314      	adds	r3, #20
 800685a:	3114      	adds	r1, #20
 800685c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006860:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800686c:	4295      	cmp	r5, r2
 800686e:	d002      	beq.n	8006876 <__mcmp+0x2a>
 8006870:	d304      	bcc.n	800687c <__mcmp+0x30>
 8006872:	2001      	movs	r0, #1
 8006874:	bd30      	pop	{r4, r5, pc}
 8006876:	42a3      	cmp	r3, r4
 8006878:	d3f4      	bcc.n	8006864 <__mcmp+0x18>
 800687a:	e7fb      	b.n	8006874 <__mcmp+0x28>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e7f8      	b.n	8006874 <__mcmp+0x28>
	...

08006884 <__mdiff>:
 8006884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	460d      	mov	r5, r1
 800688a:	4607      	mov	r7, r0
 800688c:	4611      	mov	r1, r2
 800688e:	4628      	mov	r0, r5
 8006890:	4614      	mov	r4, r2
 8006892:	f7ff ffdb 	bl	800684c <__mcmp>
 8006896:	1e06      	subs	r6, r0, #0
 8006898:	d111      	bne.n	80068be <__mdiff+0x3a>
 800689a:	4631      	mov	r1, r6
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff fd5b 	bl	8006358 <_Balloc>
 80068a2:	4602      	mov	r2, r0
 80068a4:	b928      	cbnz	r0, 80068b2 <__mdiff+0x2e>
 80068a6:	f240 2137 	movw	r1, #567	; 0x237
 80068aa:	4b3a      	ldr	r3, [pc, #232]	; (8006994 <__mdiff+0x110>)
 80068ac:	483a      	ldr	r0, [pc, #232]	; (8006998 <__mdiff+0x114>)
 80068ae:	f000 f993 	bl	8006bd8 <__assert_func>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068b8:	4610      	mov	r0, r2
 80068ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068be:	bfa4      	itt	ge
 80068c0:	4623      	movge	r3, r4
 80068c2:	462c      	movge	r4, r5
 80068c4:	4638      	mov	r0, r7
 80068c6:	6861      	ldr	r1, [r4, #4]
 80068c8:	bfa6      	itte	ge
 80068ca:	461d      	movge	r5, r3
 80068cc:	2600      	movge	r6, #0
 80068ce:	2601      	movlt	r6, #1
 80068d0:	f7ff fd42 	bl	8006358 <_Balloc>
 80068d4:	4602      	mov	r2, r0
 80068d6:	b918      	cbnz	r0, 80068e0 <__mdiff+0x5c>
 80068d8:	f240 2145 	movw	r1, #581	; 0x245
 80068dc:	4b2d      	ldr	r3, [pc, #180]	; (8006994 <__mdiff+0x110>)
 80068de:	e7e5      	b.n	80068ac <__mdiff+0x28>
 80068e0:	f102 0814 	add.w	r8, r2, #20
 80068e4:	46c2      	mov	sl, r8
 80068e6:	f04f 0c00 	mov.w	ip, #0
 80068ea:	6927      	ldr	r7, [r4, #16]
 80068ec:	60c6      	str	r6, [r0, #12]
 80068ee:	692e      	ldr	r6, [r5, #16]
 80068f0:	f104 0014 	add.w	r0, r4, #20
 80068f4:	f105 0914 	add.w	r9, r5, #20
 80068f8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006900:	3410      	adds	r4, #16
 8006902:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006906:	f859 3b04 	ldr.w	r3, [r9], #4
 800690a:	fa1f f18b 	uxth.w	r1, fp
 800690e:	4461      	add	r1, ip
 8006910:	fa1f fc83 	uxth.w	ip, r3
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	eba1 010c 	sub.w	r1, r1, ip
 800691a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800691e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006922:	b289      	uxth	r1, r1
 8006924:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006928:	454e      	cmp	r6, r9
 800692a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800692e:	f84a 1b04 	str.w	r1, [sl], #4
 8006932:	d8e6      	bhi.n	8006902 <__mdiff+0x7e>
 8006934:	1b73      	subs	r3, r6, r5
 8006936:	3b15      	subs	r3, #21
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	3515      	adds	r5, #21
 800693e:	3304      	adds	r3, #4
 8006940:	42ae      	cmp	r6, r5
 8006942:	bf38      	it	cc
 8006944:	2304      	movcc	r3, #4
 8006946:	4418      	add	r0, r3
 8006948:	4443      	add	r3, r8
 800694a:	461e      	mov	r6, r3
 800694c:	4605      	mov	r5, r0
 800694e:	4575      	cmp	r5, lr
 8006950:	d30e      	bcc.n	8006970 <__mdiff+0xec>
 8006952:	f10e 0103 	add.w	r1, lr, #3
 8006956:	1a09      	subs	r1, r1, r0
 8006958:	f021 0103 	bic.w	r1, r1, #3
 800695c:	3803      	subs	r0, #3
 800695e:	4586      	cmp	lr, r0
 8006960:	bf38      	it	cc
 8006962:	2100      	movcc	r1, #0
 8006964:	440b      	add	r3, r1
 8006966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800696a:	b189      	cbz	r1, 8006990 <__mdiff+0x10c>
 800696c:	6117      	str	r7, [r2, #16]
 800696e:	e7a3      	b.n	80068b8 <__mdiff+0x34>
 8006970:	f855 8b04 	ldr.w	r8, [r5], #4
 8006974:	fa1f f188 	uxth.w	r1, r8
 8006978:	4461      	add	r1, ip
 800697a:	140c      	asrs	r4, r1, #16
 800697c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006980:	b289      	uxth	r1, r1
 8006982:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006986:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800698a:	f846 1b04 	str.w	r1, [r6], #4
 800698e:	e7de      	b.n	800694e <__mdiff+0xca>
 8006990:	3f01      	subs	r7, #1
 8006992:	e7e8      	b.n	8006966 <__mdiff+0xe2>
 8006994:	0800735c 	.word	0x0800735c
 8006998:	0800736d 	.word	0x0800736d

0800699c <__d2b>:
 800699c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699e:	2101      	movs	r1, #1
 80069a0:	4617      	mov	r7, r2
 80069a2:	461c      	mov	r4, r3
 80069a4:	9e08      	ldr	r6, [sp, #32]
 80069a6:	f7ff fcd7 	bl	8006358 <_Balloc>
 80069aa:	4605      	mov	r5, r0
 80069ac:	b930      	cbnz	r0, 80069bc <__d2b+0x20>
 80069ae:	4602      	mov	r2, r0
 80069b0:	f240 310f 	movw	r1, #783	; 0x30f
 80069b4:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <__d2b+0xa4>)
 80069b6:	4823      	ldr	r0, [pc, #140]	; (8006a44 <__d2b+0xa8>)
 80069b8:	f000 f90e 	bl	8006bd8 <__assert_func>
 80069bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80069c0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80069c4:	bb24      	cbnz	r4, 8006a10 <__d2b+0x74>
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	d026      	beq.n	8006a1a <__d2b+0x7e>
 80069cc:	4668      	mov	r0, sp
 80069ce:	9700      	str	r7, [sp, #0]
 80069d0:	f7ff fd8a 	bl	80064e8 <__lo0bits>
 80069d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069d8:	b1e8      	cbz	r0, 8006a16 <__d2b+0x7a>
 80069da:	f1c0 0320 	rsb	r3, r0, #32
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	430b      	orrs	r3, r1
 80069e4:	40c2      	lsrs	r2, r0
 80069e6:	616b      	str	r3, [r5, #20]
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf14      	ite	ne
 80069f0:	2102      	movne	r1, #2
 80069f2:	2101      	moveq	r1, #1
 80069f4:	61ab      	str	r3, [r5, #24]
 80069f6:	6129      	str	r1, [r5, #16]
 80069f8:	b1bc      	cbz	r4, 8006a2a <__d2b+0x8e>
 80069fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069fe:	4404      	add	r4, r0
 8006a00:	6034      	str	r4, [r6, #0]
 8006a02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	6018      	str	r0, [r3, #0]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a14:	e7d7      	b.n	80069c6 <__d2b+0x2a>
 8006a16:	6169      	str	r1, [r5, #20]
 8006a18:	e7e7      	b.n	80069ea <__d2b+0x4e>
 8006a1a:	a801      	add	r0, sp, #4
 8006a1c:	f7ff fd64 	bl	80064e8 <__lo0bits>
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	2101      	movs	r1, #1
 8006a24:	616b      	str	r3, [r5, #20]
 8006a26:	3020      	adds	r0, #32
 8006a28:	e7e5      	b.n	80069f6 <__d2b+0x5a>
 8006a2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a2e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006a32:	6030      	str	r0, [r6, #0]
 8006a34:	6918      	ldr	r0, [r3, #16]
 8006a36:	f7ff fd37 	bl	80064a8 <__hi0bits>
 8006a3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a3e:	e7e2      	b.n	8006a06 <__d2b+0x6a>
 8006a40:	0800735c 	.word	0x0800735c
 8006a44:	0800736d 	.word	0x0800736d

08006a48 <__sflush_r>:
 8006a48:	898a      	ldrh	r2, [r1, #12]
 8006a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	0710      	lsls	r0, r2, #28
 8006a50:	460c      	mov	r4, r1
 8006a52:	d457      	bmi.n	8006b04 <__sflush_r+0xbc>
 8006a54:	684b      	ldr	r3, [r1, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dc04      	bgt.n	8006a64 <__sflush_r+0x1c>
 8006a5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc01      	bgt.n	8006a64 <__sflush_r+0x1c>
 8006a60:	2000      	movs	r0, #0
 8006a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d0fa      	beq.n	8006a60 <__sflush_r+0x18>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a70:	682f      	ldr	r7, [r5, #0]
 8006a72:	6a21      	ldr	r1, [r4, #32]
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	d032      	beq.n	8006ade <__sflush_r+0x96>
 8006a78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	075a      	lsls	r2, r3, #29
 8006a7e:	d505      	bpl.n	8006a8c <__sflush_r+0x44>
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	1ac0      	subs	r0, r0, r3
 8006a84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a86:	b10b      	cbz	r3, 8006a8c <__sflush_r+0x44>
 8006a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a8a:	1ac0      	subs	r0, r0, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a92:	4628      	mov	r0, r5
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	47b0      	blx	r6
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	d106      	bne.n	8006aac <__sflush_r+0x64>
 8006a9e:	6829      	ldr	r1, [r5, #0]
 8006aa0:	291d      	cmp	r1, #29
 8006aa2:	d82b      	bhi.n	8006afc <__sflush_r+0xb4>
 8006aa4:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <__sflush_r+0x100>)
 8006aa6:	410a      	asrs	r2, r1
 8006aa8:	07d6      	lsls	r6, r2, #31
 8006aaa:	d427      	bmi.n	8006afc <__sflush_r+0xb4>
 8006aac:	2200      	movs	r2, #0
 8006aae:	6062      	str	r2, [r4, #4]
 8006ab0:	6922      	ldr	r2, [r4, #16]
 8006ab2:	04d9      	lsls	r1, r3, #19
 8006ab4:	6022      	str	r2, [r4, #0]
 8006ab6:	d504      	bpl.n	8006ac2 <__sflush_r+0x7a>
 8006ab8:	1c42      	adds	r2, r0, #1
 8006aba:	d101      	bne.n	8006ac0 <__sflush_r+0x78>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b903      	cbnz	r3, 8006ac2 <__sflush_r+0x7a>
 8006ac0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ac4:	602f      	str	r7, [r5, #0]
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d0ca      	beq.n	8006a60 <__sflush_r+0x18>
 8006aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	d002      	beq.n	8006ad8 <__sflush_r+0x90>
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f7ff fb44 	bl	8006160 <_free_r>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	6360      	str	r0, [r4, #52]	; 0x34
 8006adc:	e7c1      	b.n	8006a62 <__sflush_r+0x1a>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b0      	blx	r6
 8006ae4:	1c41      	adds	r1, r0, #1
 8006ae6:	d1c8      	bne.n	8006a7a <__sflush_r+0x32>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c5      	beq.n	8006a7a <__sflush_r+0x32>
 8006aee:	2b1d      	cmp	r3, #29
 8006af0:	d001      	beq.n	8006af6 <__sflush_r+0xae>
 8006af2:	2b16      	cmp	r3, #22
 8006af4:	d101      	bne.n	8006afa <__sflush_r+0xb2>
 8006af6:	602f      	str	r7, [r5, #0]
 8006af8:	e7b2      	b.n	8006a60 <__sflush_r+0x18>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	e7ae      	b.n	8006a62 <__sflush_r+0x1a>
 8006b04:	690f      	ldr	r7, [r1, #16]
 8006b06:	2f00      	cmp	r7, #0
 8006b08:	d0aa      	beq.n	8006a60 <__sflush_r+0x18>
 8006b0a:	0793      	lsls	r3, r2, #30
 8006b0c:	bf18      	it	ne
 8006b0e:	2300      	movne	r3, #0
 8006b10:	680e      	ldr	r6, [r1, #0]
 8006b12:	bf08      	it	eq
 8006b14:	694b      	ldreq	r3, [r1, #20]
 8006b16:	1bf6      	subs	r6, r6, r7
 8006b18:	600f      	str	r7, [r1, #0]
 8006b1a:	608b      	str	r3, [r1, #8]
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	dd9f      	ble.n	8006a60 <__sflush_r+0x18>
 8006b20:	4633      	mov	r3, r6
 8006b22:	463a      	mov	r2, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	6a21      	ldr	r1, [r4, #32]
 8006b28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b2c:	47e0      	blx	ip
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	dc06      	bgt.n	8006b40 <__sflush_r+0xf8>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	e790      	b.n	8006a62 <__sflush_r+0x1a>
 8006b40:	4407      	add	r7, r0
 8006b42:	1a36      	subs	r6, r6, r0
 8006b44:	e7ea      	b.n	8006b1c <__sflush_r+0xd4>
 8006b46:	bf00      	nop
 8006b48:	dfbffffe 	.word	0xdfbffffe

08006b4c <_fflush_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	690b      	ldr	r3, [r1, #16]
 8006b50:	4605      	mov	r5, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b913      	cbnz	r3, 8006b5c <_fflush_r+0x10>
 8006b56:	2500      	movs	r5, #0
 8006b58:	4628      	mov	r0, r5
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	b118      	cbz	r0, 8006b66 <_fflush_r+0x1a>
 8006b5e:	6a03      	ldr	r3, [r0, #32]
 8006b60:	b90b      	cbnz	r3, 8006b66 <_fflush_r+0x1a>
 8006b62:	f7fe fb89 	bl	8005278 <__sinit>
 8006b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f3      	beq.n	8006b56 <_fflush_r+0xa>
 8006b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b70:	07d0      	lsls	r0, r2, #31
 8006b72:	d404      	bmi.n	8006b7e <_fflush_r+0x32>
 8006b74:	0599      	lsls	r1, r3, #22
 8006b76:	d402      	bmi.n	8006b7e <_fflush_r+0x32>
 8006b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7a:	f7fe fc74 	bl	8005466 <__retarget_lock_acquire_recursive>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	4621      	mov	r1, r4
 8006b82:	f7ff ff61 	bl	8006a48 <__sflush_r>
 8006b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b88:	4605      	mov	r5, r0
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d4e4      	bmi.n	8006b58 <_fflush_r+0xc>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	059b      	lsls	r3, r3, #22
 8006b92:	d4e1      	bmi.n	8006b58 <_fflush_r+0xc>
 8006b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b96:	f7fe fc67 	bl	8005468 <__retarget_lock_release_recursive>
 8006b9a:	e7dd      	b.n	8006b58 <_fflush_r+0xc>

08006b9c <_sbrk_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4d05      	ldr	r5, [pc, #20]	; (8006bb8 <_sbrk_r+0x1c>)
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fb fa26 	bl	8001ff8 <_sbrk>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_sbrk_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_sbrk_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20000478 	.word	0x20000478

08006bbc <memcpy>:
 8006bbc:	440a      	add	r2, r1
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bc4:	d100      	bne.n	8006bc8 <memcpy+0xc>
 8006bc6:	4770      	bx	lr
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd4:	d1f9      	bne.n	8006bca <memcpy+0xe>
 8006bd6:	bd10      	pop	{r4, pc}

08006bd8 <__assert_func>:
 8006bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bda:	4614      	mov	r4, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <__assert_func+0x2c>)
 8006be0:	4605      	mov	r5, r0
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68d8      	ldr	r0, [r3, #12]
 8006be6:	b14c      	cbz	r4, 8006bfc <__assert_func+0x24>
 8006be8:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <__assert_func+0x30>)
 8006bea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bee:	9100      	str	r1, [sp, #0]
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	4906      	ldr	r1, [pc, #24]	; (8006c0c <__assert_func+0x34>)
 8006bf4:	f000 f842 	bl	8006c7c <fiprintf>
 8006bf8:	f000 f852 	bl	8006ca0 <abort>
 8006bfc:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <__assert_func+0x38>)
 8006bfe:	461c      	mov	r4, r3
 8006c00:	e7f3      	b.n	8006bea <__assert_func+0x12>
 8006c02:	bf00      	nop
 8006c04:	20000064 	.word	0x20000064
 8006c08:	080074ce 	.word	0x080074ce
 8006c0c:	080074db 	.word	0x080074db
 8006c10:	08007509 	.word	0x08007509

08006c14 <_calloc_r>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	fba1 5402 	umull	r5, r4, r1, r2
 8006c1a:	b934      	cbnz	r4, 8006c2a <_calloc_r+0x16>
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	f7ff fb0f 	bl	8006240 <_malloc_r>
 8006c22:	4606      	mov	r6, r0
 8006c24:	b928      	cbnz	r0, 8006c32 <_calloc_r+0x1e>
 8006c26:	4630      	mov	r0, r6
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	220c      	movs	r2, #12
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	6002      	str	r2, [r0, #0]
 8006c30:	e7f9      	b.n	8006c26 <_calloc_r+0x12>
 8006c32:	462a      	mov	r2, r5
 8006c34:	4621      	mov	r1, r4
 8006c36:	f7fe fb98 	bl	800536a <memset>
 8006c3a:	e7f4      	b.n	8006c26 <_calloc_r+0x12>

08006c3c <__ascii_mbtowc>:
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	b901      	cbnz	r1, 8006c42 <__ascii_mbtowc+0x6>
 8006c40:	a901      	add	r1, sp, #4
 8006c42:	b142      	cbz	r2, 8006c56 <__ascii_mbtowc+0x1a>
 8006c44:	b14b      	cbz	r3, 8006c5a <__ascii_mbtowc+0x1e>
 8006c46:	7813      	ldrb	r3, [r2, #0]
 8006c48:	600b      	str	r3, [r1, #0]
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	1e10      	subs	r0, r2, #0
 8006c4e:	bf18      	it	ne
 8006c50:	2001      	movne	r0, #1
 8006c52:	b002      	add	sp, #8
 8006c54:	4770      	bx	lr
 8006c56:	4610      	mov	r0, r2
 8006c58:	e7fb      	b.n	8006c52 <__ascii_mbtowc+0x16>
 8006c5a:	f06f 0001 	mvn.w	r0, #1
 8006c5e:	e7f8      	b.n	8006c52 <__ascii_mbtowc+0x16>

08006c60 <__ascii_wctomb>:
 8006c60:	4603      	mov	r3, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	b141      	cbz	r1, 8006c78 <__ascii_wctomb+0x18>
 8006c66:	2aff      	cmp	r2, #255	; 0xff
 8006c68:	d904      	bls.n	8006c74 <__ascii_wctomb+0x14>
 8006c6a:	228a      	movs	r2, #138	; 0x8a
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4770      	bx	lr
 8006c74:	2001      	movs	r0, #1
 8006c76:	700a      	strb	r2, [r1, #0]
 8006c78:	4770      	bx	lr
	...

08006c7c <fiprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	b503      	push	{r0, r1, lr}
 8006c80:	4601      	mov	r1, r0
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	4805      	ldr	r0, [pc, #20]	; (8006c9c <fiprintf+0x20>)
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f000 f835 	bl	8006cfc <_vfiprintf_r>
 8006c92:	b002      	add	sp, #8
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	20000064 	.word	0x20000064

08006ca0 <abort>:
 8006ca0:	2006      	movs	r0, #6
 8006ca2:	b508      	push	{r3, lr}
 8006ca4:	f000 fa02 	bl	80070ac <raise>
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f7fb f932 	bl	8001f12 <_exit>

08006cae <__sfputc_r>:
 8006cae:	6893      	ldr	r3, [r2, #8]
 8006cb0:	b410      	push	{r4}
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	6093      	str	r3, [r2, #8]
 8006cb8:	da07      	bge.n	8006cca <__sfputc_r+0x1c>
 8006cba:	6994      	ldr	r4, [r2, #24]
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	db01      	blt.n	8006cc4 <__sfputc_r+0x16>
 8006cc0:	290a      	cmp	r1, #10
 8006cc2:	d102      	bne.n	8006cca <__sfputc_r+0x1c>
 8006cc4:	bc10      	pop	{r4}
 8006cc6:	f000 b933 	b.w	8006f30 <__swbuf_r>
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	1c58      	adds	r0, r3, #1
 8006cce:	6010      	str	r0, [r2, #0]
 8006cd0:	7019      	strb	r1, [r3, #0]
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	bc10      	pop	{r4}
 8006cd6:	4770      	bx	lr

08006cd8 <__sfputs_r>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	4614      	mov	r4, r2
 8006ce0:	18d5      	adds	r5, r2, r3
 8006ce2:	42ac      	cmp	r4, r5
 8006ce4:	d101      	bne.n	8006cea <__sfputs_r+0x12>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e007      	b.n	8006cfa <__sfputs_r+0x22>
 8006cea:	463a      	mov	r2, r7
 8006cec:	4630      	mov	r0, r6
 8006cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf2:	f7ff ffdc 	bl	8006cae <__sfputc_r>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d1f3      	bne.n	8006ce2 <__sfputs_r+0xa>
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cfc <_vfiprintf_r>:
 8006cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d00:	460d      	mov	r5, r1
 8006d02:	4614      	mov	r4, r2
 8006d04:	4698      	mov	r8, r3
 8006d06:	4606      	mov	r6, r0
 8006d08:	b09d      	sub	sp, #116	; 0x74
 8006d0a:	b118      	cbz	r0, 8006d14 <_vfiprintf_r+0x18>
 8006d0c:	6a03      	ldr	r3, [r0, #32]
 8006d0e:	b90b      	cbnz	r3, 8006d14 <_vfiprintf_r+0x18>
 8006d10:	f7fe fab2 	bl	8005278 <__sinit>
 8006d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_vfiprintf_r+0x2a>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	059a      	lsls	r2, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_vfiprintf_r+0x2a>
 8006d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d22:	f7fe fba0 	bl	8005466 <__retarget_lock_acquire_recursive>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	071b      	lsls	r3, r3, #28
 8006d2a:	d501      	bpl.n	8006d30 <_vfiprintf_r+0x34>
 8006d2c:	692b      	ldr	r3, [r5, #16]
 8006d2e:	b99b      	cbnz	r3, 8006d58 <_vfiprintf_r+0x5c>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f000 f93a 	bl	8006fac <__swsetup_r>
 8006d38:	b170      	cbz	r0, 8006d58 <_vfiprintf_r+0x5c>
 8006d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3c:	07dc      	lsls	r4, r3, #31
 8006d3e:	d504      	bpl.n	8006d4a <_vfiprintf_r+0x4e>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	b01d      	add	sp, #116	; 0x74
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	0598      	lsls	r0, r3, #22
 8006d4e:	d4f7      	bmi.n	8006d40 <_vfiprintf_r+0x44>
 8006d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d52:	f7fe fb89 	bl	8005468 <__retarget_lock_release_recursive>
 8006d56:	e7f3      	b.n	8006d40 <_vfiprintf_r+0x44>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d62:	2330      	movs	r3, #48	; 0x30
 8006d64:	f04f 0901 	mov.w	r9, #1
 8006d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f1c <_vfiprintf_r+0x220>
 8006d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d74:	4623      	mov	r3, r4
 8006d76:	469a      	mov	sl, r3
 8006d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d7c:	b10a      	cbz	r2, 8006d82 <_vfiprintf_r+0x86>
 8006d7e:	2a25      	cmp	r2, #37	; 0x25
 8006d80:	d1f9      	bne.n	8006d76 <_vfiprintf_r+0x7a>
 8006d82:	ebba 0b04 	subs.w	fp, sl, r4
 8006d86:	d00b      	beq.n	8006da0 <_vfiprintf_r+0xa4>
 8006d88:	465b      	mov	r3, fp
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ffa2 	bl	8006cd8 <__sfputs_r>
 8006d94:	3001      	adds	r0, #1
 8006d96:	f000 80a9 	beq.w	8006eec <_vfiprintf_r+0x1f0>
 8006d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d9c:	445a      	add	r2, fp
 8006d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006da0:	f89a 3000 	ldrb.w	r3, [sl]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80a1 	beq.w	8006eec <_vfiprintf_r+0x1f0>
 8006daa:	2300      	movs	r3, #0
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006db4:	f10a 0a01 	add.w	sl, sl, #1
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	9307      	str	r3, [sp, #28]
 8006dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc2:	4654      	mov	r4, sl
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dca:	4854      	ldr	r0, [pc, #336]	; (8006f1c <_vfiprintf_r+0x220>)
 8006dcc:	f7fe fb4d 	bl	800546a <memchr>
 8006dd0:	9a04      	ldr	r2, [sp, #16]
 8006dd2:	b9d8      	cbnz	r0, 8006e0c <_vfiprintf_r+0x110>
 8006dd4:	06d1      	lsls	r1, r2, #27
 8006dd6:	bf44      	itt	mi
 8006dd8:	2320      	movmi	r3, #32
 8006dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dde:	0713      	lsls	r3, r2, #28
 8006de0:	bf44      	itt	mi
 8006de2:	232b      	movmi	r3, #43	; 0x2b
 8006de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d015      	beq.n	8006e1c <_vfiprintf_r+0x120>
 8006df0:	4654      	mov	r4, sl
 8006df2:	2000      	movs	r0, #0
 8006df4:	f04f 0c0a 	mov.w	ip, #10
 8006df8:	9a07      	ldr	r2, [sp, #28]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e00:	3b30      	subs	r3, #48	; 0x30
 8006e02:	2b09      	cmp	r3, #9
 8006e04:	d94d      	bls.n	8006ea2 <_vfiprintf_r+0x1a6>
 8006e06:	b1b0      	cbz	r0, 8006e36 <_vfiprintf_r+0x13a>
 8006e08:	9207      	str	r2, [sp, #28]
 8006e0a:	e014      	b.n	8006e36 <_vfiprintf_r+0x13a>
 8006e0c:	eba0 0308 	sub.w	r3, r0, r8
 8006e10:	fa09 f303 	lsl.w	r3, r9, r3
 8006e14:	4313      	orrs	r3, r2
 8006e16:	46a2      	mov	sl, r4
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	e7d2      	b.n	8006dc2 <_vfiprintf_r+0xc6>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	1d19      	adds	r1, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	9103      	str	r1, [sp, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bfbb      	ittet	lt
 8006e28:	425b      	neglt	r3, r3
 8006e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e2e:	9307      	strge	r3, [sp, #28]
 8006e30:	9307      	strlt	r3, [sp, #28]
 8006e32:	bfb8      	it	lt
 8006e34:	9204      	strlt	r2, [sp, #16]
 8006e36:	7823      	ldrb	r3, [r4, #0]
 8006e38:	2b2e      	cmp	r3, #46	; 0x2e
 8006e3a:	d10c      	bne.n	8006e56 <_vfiprintf_r+0x15a>
 8006e3c:	7863      	ldrb	r3, [r4, #1]
 8006e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e40:	d134      	bne.n	8006eac <_vfiprintf_r+0x1b0>
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	3402      	adds	r4, #2
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	9203      	str	r2, [sp, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bfb8      	it	lt
 8006e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f20 <_vfiprintf_r+0x224>
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	7821      	ldrb	r1, [r4, #0]
 8006e60:	f7fe fb03 	bl	800546a <memchr>
 8006e64:	b138      	cbz	r0, 8006e76 <_vfiprintf_r+0x17a>
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	eba0 000a 	sub.w	r0, r0, sl
 8006e6e:	4082      	lsls	r2, r0
 8006e70:	4313      	orrs	r3, r2
 8006e72:	3401      	adds	r4, #1
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	4829      	ldr	r0, [pc, #164]	; (8006f24 <_vfiprintf_r+0x228>)
 8006e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e82:	f7fe faf2 	bl	800546a <memchr>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d03f      	beq.n	8006f0a <_vfiprintf_r+0x20e>
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <_vfiprintf_r+0x22c>)
 8006e8c:	bb1b      	cbnz	r3, 8006ed6 <_vfiprintf_r+0x1da>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	3308      	adds	r3, #8
 8006e98:	9303      	str	r3, [sp, #12]
 8006e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9c:	443b      	add	r3, r7
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	e768      	b.n	8006d74 <_vfiprintf_r+0x78>
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eaa:	e7a6      	b.n	8006dfa <_vfiprintf_r+0xfe>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f04f 0c0a 	mov.w	ip, #10
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	3401      	adds	r4, #1
 8006eb6:	9305      	str	r3, [sp, #20]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ebe:	3a30      	subs	r2, #48	; 0x30
 8006ec0:	2a09      	cmp	r2, #9
 8006ec2:	d903      	bls.n	8006ecc <_vfiprintf_r+0x1d0>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0c6      	beq.n	8006e56 <_vfiprintf_r+0x15a>
 8006ec8:	9105      	str	r1, [sp, #20]
 8006eca:	e7c4      	b.n	8006e56 <_vfiprintf_r+0x15a>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	2301      	movs	r3, #1
 8006ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed4:	e7f0      	b.n	8006eb8 <_vfiprintf_r+0x1bc>
 8006ed6:	ab03      	add	r3, sp, #12
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	462a      	mov	r2, r5
 8006edc:	4630      	mov	r0, r6
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <_vfiprintf_r+0x230>)
 8006ee0:	a904      	add	r1, sp, #16
 8006ee2:	f7fd fd7b 	bl	80049dc <_printf_float>
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	1c78      	adds	r0, r7, #1
 8006eea:	d1d6      	bne.n	8006e9a <_vfiprintf_r+0x19e>
 8006eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eee:	07d9      	lsls	r1, r3, #31
 8006ef0:	d405      	bmi.n	8006efe <_vfiprintf_r+0x202>
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	059a      	lsls	r2, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_vfiprintf_r+0x202>
 8006ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006efa:	f7fe fab5 	bl	8005468 <__retarget_lock_release_recursive>
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	065b      	lsls	r3, r3, #25
 8006f02:	f53f af1d 	bmi.w	8006d40 <_vfiprintf_r+0x44>
 8006f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f08:	e71c      	b.n	8006d44 <_vfiprintf_r+0x48>
 8006f0a:	ab03      	add	r3, sp, #12
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4630      	mov	r0, r6
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <_vfiprintf_r+0x230>)
 8006f14:	a904      	add	r1, sp, #16
 8006f16:	f7fe f801 	bl	8004f1c <_printf_i>
 8006f1a:	e7e4      	b.n	8006ee6 <_vfiprintf_r+0x1ea>
 8006f1c:	0800760b 	.word	0x0800760b
 8006f20:	08007611 	.word	0x08007611
 8006f24:	08007615 	.word	0x08007615
 8006f28:	080049dd 	.word	0x080049dd
 8006f2c:	08006cd9 	.word	0x08006cd9

08006f30 <__swbuf_r>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	4605      	mov	r5, r0
 8006f38:	b118      	cbz	r0, 8006f42 <__swbuf_r+0x12>
 8006f3a:	6a03      	ldr	r3, [r0, #32]
 8006f3c:	b90b      	cbnz	r3, 8006f42 <__swbuf_r+0x12>
 8006f3e:	f7fe f99b 	bl	8005278 <__sinit>
 8006f42:	69a3      	ldr	r3, [r4, #24]
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	071a      	lsls	r2, r3, #28
 8006f4a:	d525      	bpl.n	8006f98 <__swbuf_r+0x68>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	b31b      	cbz	r3, 8006f98 <__swbuf_r+0x68>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	6922      	ldr	r2, [r4, #16]
 8006f54:	b2f6      	uxtb	r6, r6
 8006f56:	1a98      	subs	r0, r3, r2
 8006f58:	6963      	ldr	r3, [r4, #20]
 8006f5a:	4637      	mov	r7, r6
 8006f5c:	4283      	cmp	r3, r0
 8006f5e:	dc04      	bgt.n	8006f6a <__swbuf_r+0x3a>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7ff fdf2 	bl	8006b4c <_fflush_r>
 8006f68:	b9e0      	cbnz	r0, 8006fa4 <__swbuf_r+0x74>
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	60a3      	str	r3, [r4, #8]
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	701e      	strb	r6, [r3, #0]
 8006f78:	6962      	ldr	r2, [r4, #20]
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d004      	beq.n	8006f8a <__swbuf_r+0x5a>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	07db      	lsls	r3, r3, #31
 8006f84:	d506      	bpl.n	8006f94 <__swbuf_r+0x64>
 8006f86:	2e0a      	cmp	r6, #10
 8006f88:	d104      	bne.n	8006f94 <__swbuf_r+0x64>
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff fddd 	bl	8006b4c <_fflush_r>
 8006f92:	b938      	cbnz	r0, 8006fa4 <__swbuf_r+0x74>
 8006f94:	4638      	mov	r0, r7
 8006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f806 	bl	8006fac <__swsetup_r>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d0d5      	beq.n	8006f50 <__swbuf_r+0x20>
 8006fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa8:	e7f4      	b.n	8006f94 <__swbuf_r+0x64>
	...

08006fac <__swsetup_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4b2a      	ldr	r3, [pc, #168]	; (8007058 <__swsetup_r+0xac>)
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	b118      	cbz	r0, 8006fc0 <__swsetup_r+0x14>
 8006fb8:	6a03      	ldr	r3, [r0, #32]
 8006fba:	b90b      	cbnz	r3, 8006fc0 <__swsetup_r+0x14>
 8006fbc:	f7fe f95c 	bl	8005278 <__sinit>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc6:	0718      	lsls	r0, r3, #28
 8006fc8:	d422      	bmi.n	8007010 <__swsetup_r+0x64>
 8006fca:	06d9      	lsls	r1, r3, #27
 8006fcc:	d407      	bmi.n	8006fde <__swsetup_r+0x32>
 8006fce:	2309      	movs	r3, #9
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	e034      	b.n	8007048 <__swsetup_r+0x9c>
 8006fde:	0758      	lsls	r0, r3, #29
 8006fe0:	d512      	bpl.n	8007008 <__swsetup_r+0x5c>
 8006fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fe4:	b141      	cbz	r1, 8006ff8 <__swsetup_r+0x4c>
 8006fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fea:	4299      	cmp	r1, r3
 8006fec:	d002      	beq.n	8006ff4 <__swsetup_r+0x48>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7ff f8b6 	bl	8006160 <_free_r>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	2300      	movs	r3, #0
 8007002:	6063      	str	r3, [r4, #4]
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f043 0308 	orr.w	r3, r3, #8
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	b94b      	cbnz	r3, 8007028 <__swsetup_r+0x7c>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800701a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701e:	d003      	beq.n	8007028 <__swsetup_r+0x7c>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f000 f883 	bl	800712e <__smakebuf_r>
 8007028:	89a0      	ldrh	r0, [r4, #12]
 800702a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800702e:	f010 0301 	ands.w	r3, r0, #1
 8007032:	d00a      	beq.n	800704a <__swsetup_r+0x9e>
 8007034:	2300      	movs	r3, #0
 8007036:	60a3      	str	r3, [r4, #8]
 8007038:	6963      	ldr	r3, [r4, #20]
 800703a:	425b      	negs	r3, r3
 800703c:	61a3      	str	r3, [r4, #24]
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	b943      	cbnz	r3, 8007054 <__swsetup_r+0xa8>
 8007042:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007046:	d1c4      	bne.n	8006fd2 <__swsetup_r+0x26>
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	0781      	lsls	r1, r0, #30
 800704c:	bf58      	it	pl
 800704e:	6963      	ldrpl	r3, [r4, #20]
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	e7f4      	b.n	800703e <__swsetup_r+0x92>
 8007054:	2000      	movs	r0, #0
 8007056:	e7f7      	b.n	8007048 <__swsetup_r+0x9c>
 8007058:	20000064 	.word	0x20000064

0800705c <_raise_r>:
 800705c:	291f      	cmp	r1, #31
 800705e:	b538      	push	{r3, r4, r5, lr}
 8007060:	4604      	mov	r4, r0
 8007062:	460d      	mov	r5, r1
 8007064:	d904      	bls.n	8007070 <_raise_r+0x14>
 8007066:	2316      	movs	r3, #22
 8007068:	6003      	str	r3, [r0, #0]
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007072:	b112      	cbz	r2, 800707a <_raise_r+0x1e>
 8007074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007078:	b94b      	cbnz	r3, 800708e <_raise_r+0x32>
 800707a:	4620      	mov	r0, r4
 800707c:	f000 f830 	bl	80070e0 <_getpid_r>
 8007080:	462a      	mov	r2, r5
 8007082:	4601      	mov	r1, r0
 8007084:	4620      	mov	r0, r4
 8007086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800708a:	f000 b817 	b.w	80070bc <_kill_r>
 800708e:	2b01      	cmp	r3, #1
 8007090:	d00a      	beq.n	80070a8 <_raise_r+0x4c>
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	d103      	bne.n	800709e <_raise_r+0x42>
 8007096:	2316      	movs	r3, #22
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	2001      	movs	r0, #1
 800709c:	e7e7      	b.n	800706e <_raise_r+0x12>
 800709e:	2400      	movs	r4, #0
 80070a0:	4628      	mov	r0, r5
 80070a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070a6:	4798      	blx	r3
 80070a8:	2000      	movs	r0, #0
 80070aa:	e7e0      	b.n	800706e <_raise_r+0x12>

080070ac <raise>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <raise+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f7ff bfd3 	b.w	800705c <_raise_r>
 80070b6:	bf00      	nop
 80070b8:	20000064 	.word	0x20000064

080070bc <_kill_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	2300      	movs	r3, #0
 80070c0:	4d06      	ldr	r5, [pc, #24]	; (80070dc <_kill_r+0x20>)
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f7fa ff12 	bl	8001ef2 <_kill>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d102      	bne.n	80070d8 <_kill_r+0x1c>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	b103      	cbz	r3, 80070d8 <_kill_r+0x1c>
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	bd38      	pop	{r3, r4, r5, pc}
 80070da:	bf00      	nop
 80070dc:	20000478 	.word	0x20000478

080070e0 <_getpid_r>:
 80070e0:	f7fa bf00 	b.w	8001ee4 <_getpid>

080070e4 <__swhatbuf_r>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ec:	4615      	mov	r5, r2
 80070ee:	2900      	cmp	r1, #0
 80070f0:	461e      	mov	r6, r3
 80070f2:	b096      	sub	sp, #88	; 0x58
 80070f4:	da0c      	bge.n	8007110 <__swhatbuf_r+0x2c>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	2100      	movs	r1, #0
 80070fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070fe:	bf0c      	ite	eq
 8007100:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007104:	2340      	movne	r3, #64	; 0x40
 8007106:	2000      	movs	r0, #0
 8007108:	6031      	str	r1, [r6, #0]
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	b016      	add	sp, #88	; 0x58
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	466a      	mov	r2, sp
 8007112:	f000 f849 	bl	80071a8 <_fstat_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	dbed      	blt.n	80070f6 <__swhatbuf_r+0x12>
 800711a:	9901      	ldr	r1, [sp, #4]
 800711c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007120:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007124:	4259      	negs	r1, r3
 8007126:	4159      	adcs	r1, r3
 8007128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712c:	e7eb      	b.n	8007106 <__swhatbuf_r+0x22>

0800712e <__smakebuf_r>:
 800712e:	898b      	ldrh	r3, [r1, #12]
 8007130:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007132:	079d      	lsls	r5, r3, #30
 8007134:	4606      	mov	r6, r0
 8007136:	460c      	mov	r4, r1
 8007138:	d507      	bpl.n	800714a <__smakebuf_r+0x1c>
 800713a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	2301      	movs	r3, #1
 8007144:	6163      	str	r3, [r4, #20]
 8007146:	b002      	add	sp, #8
 8007148:	bd70      	pop	{r4, r5, r6, pc}
 800714a:	466a      	mov	r2, sp
 800714c:	ab01      	add	r3, sp, #4
 800714e:	f7ff ffc9 	bl	80070e4 <__swhatbuf_r>
 8007152:	9900      	ldr	r1, [sp, #0]
 8007154:	4605      	mov	r5, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f7ff f872 	bl	8006240 <_malloc_r>
 800715c:	b948      	cbnz	r0, 8007172 <__smakebuf_r+0x44>
 800715e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007162:	059a      	lsls	r2, r3, #22
 8007164:	d4ef      	bmi.n	8007146 <__smakebuf_r+0x18>
 8007166:	f023 0303 	bic.w	r3, r3, #3
 800716a:	f043 0302 	orr.w	r3, r3, #2
 800716e:	81a3      	strh	r3, [r4, #12]
 8007170:	e7e3      	b.n	800713a <__smakebuf_r+0xc>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	6020      	str	r0, [r4, #0]
 8007176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	6120      	str	r0, [r4, #16]
 8007180:	6163      	str	r3, [r4, #20]
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	b15b      	cbz	r3, 800719e <__smakebuf_r+0x70>
 8007186:	4630      	mov	r0, r6
 8007188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718c:	f000 f81e 	bl	80071cc <_isatty_r>
 8007190:	b128      	cbz	r0, 800719e <__smakebuf_r+0x70>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	431d      	orrs	r5, r3
 80071a2:	81a5      	strh	r5, [r4, #12]
 80071a4:	e7cf      	b.n	8007146 <__smakebuf_r+0x18>
	...

080071a8 <_fstat_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	2300      	movs	r3, #0
 80071ac:	4d06      	ldr	r5, [pc, #24]	; (80071c8 <_fstat_r+0x20>)
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	f7fa fefa 	bl	8001fae <_fstat>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d102      	bne.n	80071c4 <_fstat_r+0x1c>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	b103      	cbz	r3, 80071c4 <_fstat_r+0x1c>
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	bf00      	nop
 80071c8:	20000478 	.word	0x20000478

080071cc <_isatty_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4d05      	ldr	r5, [pc, #20]	; (80071e8 <_isatty_r+0x1c>)
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	f7fa fef8 	bl	8001fcc <_isatty>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_isatty_r+0x1a>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_isatty_r+0x1a>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20000478 	.word	0x20000478

080071ec <_init>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr

080071f8 <_fini>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr
