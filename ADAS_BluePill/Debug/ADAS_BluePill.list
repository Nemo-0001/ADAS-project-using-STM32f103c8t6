
ADAS_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800899c  0800899c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800899c  0800899c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800899c  0800899c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080089a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001d8  08008b7c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08008b7c  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d13f  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002868  00000000  00000000  0002d383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3b2  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120fd  00000000  00000000  0004b8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d131  00000000  00000000  0005d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b2c  00000000  00000000  000eab08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ef634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008474 	.word	0x08008474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008474 	.word	0x08008474

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <Buzzer_Init>:
 *      Author: Abdallah Alnemr
 */

#include "Buzzer.h"

void Buzzer_Init(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <Buzzer_Init+0x14>)
 8000c20:	f002 f9b8 	bl	8002f94 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <Buzzer_ON>:

void Buzzer_ON(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4802      	ldr	r0, [pc, #8]	; (8000c40 <Buzzer_ON+0x14>)
 8000c38:	f002 f9ac 	bl	8002f94 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <Buzzer_OFF>:

void Buzzer_OFF(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <Buzzer_OFF+0x14>)
 8000c50:	f002 f9a0 	bl	8002f94 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <DC_MOTOR_Init>:
#include "DC_MOTOR.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ac      	sub	sp, #176	; 0xb0
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t ARR_Value = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint8_t i = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4ab2      	ldr	r2, [pc, #712]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	4413      	add	r3, r2
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4ab1      	ldr	r2, [pc, #708]	; (8000f84 <DC_MOTOR_Init+0x328>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d008      	beq.n	8000cd4 <DC_MOTOR_Init+0x78>
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4aae      	ldr	r2, [pc, #696]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	4413      	add	r3, r2
 8000cca:	3304      	adds	r3, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4aad      	ldr	r2, [pc, #692]	; (8000f84 <DC_MOTOR_Init+0x328>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d10c      	bne.n	8000cee <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4bac      	ldr	r3, [pc, #688]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4aab      	ldr	r2, [pc, #684]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4ba9      	ldr	r3, [pc, #676]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	e058      	b.n	8000da0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4aa3      	ldr	r2, [pc, #652]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	4413      	add	r3, r2
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4aa4      	ldr	r2, [pc, #656]	; (8000f8c <DC_MOTOR_Init+0x330>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d008      	beq.n	8000d10 <DC_MOTOR_Init+0xb4>
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a9f      	ldr	r2, [pc, #636]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	4413      	add	r3, r2
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4aa0      	ldr	r2, [pc, #640]	; (8000f8c <DC_MOTOR_Init+0x330>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d10c      	bne.n	8000d2a <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a9c      	ldr	r2, [pc, #624]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b9a      	ldr	r3, [pc, #616]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	e03a      	b.n	8000da0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a94      	ldr	r2, [pc, #592]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000d2e:	015b      	lsls	r3, r3, #5
 8000d30:	4413      	add	r3, r2
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a96      	ldr	r2, [pc, #600]	; (8000f90 <DC_MOTOR_Init+0x334>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d008      	beq.n	8000d4c <DC_MOTOR_Init+0xf0>
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a90      	ldr	r2, [pc, #576]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	4413      	add	r3, r2
 8000d42:	3304      	adds	r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <DC_MOTOR_Init+0x334>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d10c      	bne.n	8000d66 <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b8e      	ldr	r3, [pc, #568]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a8d      	ldr	r2, [pc, #564]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	e01c      	b.n	8000da0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000d6a:	015b      	lsls	r3, r3, #5
 8000d6c:	4413      	add	r3, r2
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a88      	ldr	r2, [pc, #544]	; (8000f94 <DC_MOTOR_Init+0x338>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d008      	beq.n	8000d88 <DC_MOTOR_Init+0x12c>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a81      	ldr	r2, [pc, #516]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000d7a:	015b      	lsls	r3, r3, #5
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <DC_MOTOR_Init+0x338>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d10b      	bne.n	8000da0 <DC_MOTOR_Init+0x144>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d88:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a7e      	ldr	r2, [pc, #504]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d8e:	f043 0320 	orr.w	r3, r3, #32
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <DC_MOTOR_Init+0x32c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0320 	and.w	r3, r3, #32
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a77      	ldr	r2, [pc, #476]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000da4:	015b      	lsls	r3, r3, #5
 8000da6:	4413      	add	r3, r2
 8000da8:	3308      	adds	r3, #8
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4a70      	ldr	r2, [pc, #448]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 ff5d 	bl	8002c8c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000dd6:	015b      	lsls	r3, r3, #5
 8000dd8:	4413      	add	r3, r2
 8000dda:	330a      	adds	r3, #10
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4a63      	ldr	r2, [pc, #396]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	4413      	add	r3, r2
 8000df6:	3304      	adds	r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 ff43 	bl	8002c8c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4a5d      	ldr	r2, [pc, #372]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e0a:	015b      	lsls	r3, r3, #5
 8000e0c:	4413      	add	r3, r2
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4a5b      	ldr	r2, [pc, #364]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	4413      	add	r3, r2
 8000e18:	3308      	adds	r3, #8
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f002 f8b8 	bl	8002f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a53      	ldr	r2, [pc, #332]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	4413      	add	r3, r2
 8000e38:	330a      	adds	r3, #10
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f002 f8a8 	bl	8002f94 <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000e50:	e009      	b.n	8000e66 <DC_MOTOR_Init+0x20a>
	{
		ARR_Value *= 2;
 8000e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8000e5c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e60:	3301      	adds	r3, #1
 8000e62:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e6a:	015b      	lsls	r3, r3, #5
 8000e6c:	4413      	add	r3, r2
 8000e6e:	331c      	adds	r3, #28
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3eb      	bcc.n	8000e52 <DC_MOTOR_Init+0x1f6>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e7e:	015b      	lsls	r3, r3, #5
 8000e80:	4413      	add	r3, r2
 8000e82:	3314      	adds	r3, #20
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <DC_MOTOR_Init+0x33c>)
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000e94:	015b      	lsls	r3, r3, #5
 8000e96:	4413      	add	r3, r2
 8000e98:	3318      	adds	r3, #24
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PSC_Value--;
 8000eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	ARR_Value -= 2;
 8000eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a2f      	ldr	r2, [pc, #188]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000ec4:	015b      	lsls	r3, r3, #5
 8000ec6:	4413      	add	r3, r2
 8000ec8:	330c      	adds	r3, #12
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
	htim.Init.Prescaler = PSC_Value;
 8000ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ed2:	61fb      	str	r3, [r7, #28]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
	htim.Init.Period = ARR_Value;
 8000ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_Base_Init(&htim);
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fc84 	bl	80037f8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000ef8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f9cc 	bl	80042a0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fd15 	bl	800393c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000f1c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fe90 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f34:	2300      	movs	r3, #0
 8000f36:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000f40:	015b      	lsls	r3, r3, #5
 8000f42:	4413      	add	r3, r2
 8000f44:	3310      	adds	r3, #16
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f8e7 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fb7e 	bl	800265c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <DC_MOTOR_Init+0x324>)
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	4413      	add	r3, r2
 8000f68:	3310      	adds	r3, #16
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fd3a 	bl	80039ec <HAL_TIM_PWM_Start>
}
 8000f78:	bf00      	nop
 8000f7a:	37b0      	adds	r7, #176	; 0xb0
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800856c 	.word	0x0800856c
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40011400 	.word	0x40011400
 8000f98:	000f4240 	.word	0x000f4240

08000f9c <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	4613      	mov	r3, r2
 8000fac:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11f      	bne.n	8000ff4 <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	4413      	add	r3, r2
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f001 ffe1 	bl	8002f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	4413      	add	r3, r2
 8000fda:	3304      	adds	r3, #4
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	330a      	adds	r3, #10
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	f001 ffd1 	bl	8002f94 <HAL_GPIO_WritePin>
 8000ff2:	e021      	b.n	8001038 <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d11e      	bne.n	8001038 <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	4413      	add	r3, r2
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8001008:	015b      	lsls	r3, r3, #5
 800100a:	4413      	add	r3, r2
 800100c:	3308      	adds	r3, #8
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f001 ffbe 	bl	8002f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	4413      	add	r3, r2
 8001020:	3304      	adds	r3, #4
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8001028:	015b      	lsls	r3, r3, #5
 800102a:	4413      	add	r3, r2
 800102c:	330a      	adds	r3, #10
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	f001 ffae 	bl	8002f94 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 800103c:	015b      	lsls	r3, r3, #5
 800103e:	4413      	add	r3, r2
 8001040:	3310      	adds	r3, #16
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	4413      	add	r3, r2
 8001050:	330c      	adds	r3, #12
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	88ba      	ldrh	r2, [r7, #4]
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8001058:	e029      	b.n	80010ae <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4413      	add	r3, r2
 8001062:	3310      	adds	r3, #16
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d108      	bne.n	800107c <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4413      	add	r3, r2
 8001072:	330c      	adds	r3, #12
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	88ba      	ldrh	r2, [r7, #4]
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
}
 800107a:	e018      	b.n	80010ae <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8001080:	015b      	lsls	r3, r3, #5
 8001082:	4413      	add	r3, r2
 8001084:	3310      	adds	r3, #16
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d108      	bne.n	800109e <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	4413      	add	r3, r2
 8001094:	330c      	adds	r3, #12
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	88ba      	ldrh	r2, [r7, #4]
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800109c:	e007      	b.n	80010ae <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <DC_MOTOR_Start+0x11c>)
 80010a2:	015b      	lsls	r3, r3, #5
 80010a4:	4413      	add	r3, r2
 80010a6:	330c      	adds	r3, #12
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	88ba      	ldrh	r2, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800856c 	.word	0x0800856c

080010bc <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	4413      	add	r3, r2
 80010d4:	3310      	adds	r3, #16
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d108      	bne.n	80010ee <DC_MOTOR_Set_Speed+0x32>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	4413      	add	r3, r2
 80010e4:	330c      	adds	r3, #12
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	88ba      	ldrh	r2, [r7, #4]
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80010ec:	e029      	b.n	8001142 <DC_MOTOR_Set_Speed+0x86>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4413      	add	r3, r2
 80010f6:	3310      	adds	r3, #16
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d108      	bne.n	8001110 <DC_MOTOR_Set_Speed+0x54>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 8001102:	015b      	lsls	r3, r3, #5
 8001104:	4413      	add	r3, r2
 8001106:	330c      	adds	r3, #12
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	88ba      	ldrh	r2, [r7, #4]
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800110e:	e018      	b.n	8001142 <DC_MOTOR_Set_Speed+0x86>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4413      	add	r3, r2
 8001118:	3310      	adds	r3, #16
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d108      	bne.n	8001132 <DC_MOTOR_Set_Speed+0x76>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 8001124:	015b      	lsls	r3, r3, #5
 8001126:	4413      	add	r3, r2
 8001128:	330c      	adds	r3, #12
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	88ba      	ldrh	r2, [r7, #4]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001130:	e007      	b.n	8001142 <DC_MOTOR_Set_Speed+0x86>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <DC_MOTOR_Set_Speed+0x90>)
 8001136:	015b      	lsls	r3, r3, #5
 8001138:	4413      	add	r3, r2
 800113a:	330c      	adds	r3, #12
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	88ba      	ldrh	r2, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	0800856c 	.word	0x0800856c

08001150 <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	4413      	add	r3, r2
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	4413      	add	r3, r2
 800116c:	3308      	adds	r3, #8
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	f001 ff0e 	bl	8002f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a27      	ldr	r2, [pc, #156]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 800117c:	015b      	lsls	r3, r3, #5
 800117e:	4413      	add	r3, r2
 8001180:	3304      	adds	r3, #4
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4a24      	ldr	r2, [pc, #144]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	4413      	add	r3, r2
 800118c:	330a      	adds	r3, #10
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f001 fefe 	bl	8002f94 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	4413      	add	r3, r2
 80011a0:	3310      	adds	r3, #16
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 80011ac:	015b      	lsls	r3, r3, #5
 80011ae:	4413      	add	r3, r2
 80011b0:	330c      	adds	r3, #12
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 80011b8:	e029      	b.n	800120e <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4413      	add	r3, r2
 80011c2:	3310      	adds	r3, #16
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d108      	bne.n	80011dc <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 80011ce:	015b      	lsls	r3, r3, #5
 80011d0:	4413      	add	r3, r2
 80011d2:	330c      	adds	r3, #12
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011da:	e018      	b.n	800120e <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4413      	add	r3, r2
 80011e4:	3310      	adds	r3, #16
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d108      	bne.n	80011fe <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	4413      	add	r3, r2
 80011f4:	330c      	adds	r3, #12
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011fc:	e007      	b.n	800120e <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <DC_MOTOR_Stop+0xc8>)
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	4413      	add	r3, r2
 8001206:	330c      	adds	r3, #12
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800856c 	.word	0x0800856c

0800121c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	4987      	ldr	r1, [pc, #540]	; (800147c <HCSR04_Init+0x260>)
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a84      	ldr	r2, [pc, #528]	; (8001480 <HCSR04_Init+0x264>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10c      	bne.n	800128c <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b84      	ldr	r3, [pc, #528]	; (8001484 <HCSR04_Init+0x268>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a83      	ldr	r2, [pc, #524]	; (8001484 <HCSR04_Init+0x268>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HCSR04_Init+0x268>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	e046      	b.n	800131a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	497b      	ldr	r1, [pc, #492]	; (800147c <HCSR04_Init+0x260>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <HCSR04_Init+0x26c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10c      	bne.n	80012bc <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HCSR04_Init+0x268>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HCSR04_Init+0x268>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b75      	ldr	r3, [pc, #468]	; (8001484 <HCSR04_Init+0x268>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	e02e      	b.n	800131a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	496f      	ldr	r1, [pc, #444]	; (800147c <HCSR04_Init+0x260>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HCSR04_Init+0x270>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10c      	bne.n	80012ec <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <HCSR04_Init+0x268>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a6b      	ldr	r2, [pc, #428]	; (8001484 <HCSR04_Init+0x268>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HCSR04_Init+0x268>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	e016      	b.n	800131a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	4963      	ldr	r1, [pc, #396]	; (800147c <HCSR04_Init+0x260>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a64      	ldr	r2, [pc, #400]	; (8001490 <HCSR04_Init+0x274>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10b      	bne.n	800131a <HCSR04_Init+0xfe>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b60      	ldr	r3, [pc, #384]	; (8001484 <HCSR04_Init+0x268>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a5f      	ldr	r2, [pc, #380]	; (8001484 <HCSR04_Init+0x268>)
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <HCSR04_Init+0x268>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4957      	ldr	r1, [pc, #348]	; (800147c <HCSR04_Init+0x260>)
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	3304      	adds	r3, #4
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2302      	movs	r3, #2
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	494f      	ldr	r1, [pc, #316]	; (800147c <HCSR04_Init+0x260>)
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fc9b 	bl	8002c8c <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	4948      	ldr	r1, [pc, #288]	; (800147c <HCSR04_Init+0x260>)
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800136c:	4849      	ldr	r0, [pc, #292]	; (8001494 <HCSR04_Init+0x278>)
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4403      	add	r3, r0
 8001378:	3304      	adds	r3, #4
 800137a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	493f      	ldr	r1, [pc, #252]	; (800147c <HCSR04_Init+0x260>)
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3308      	adds	r3, #8
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001392:	4840      	ldr	r0, [pc, #256]	; (8001494 <HCSR04_Init+0x278>)
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	3308      	adds	r3, #8
 80013a0:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	493b      	ldr	r1, [pc, #236]	; (8001494 <HCSR04_Init+0x278>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3302      	adds	r3, #2
 80013b2:	2200      	movs	r2, #0
 80013b4:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	4936      	ldr	r1, [pc, #216]	; (8001494 <HCSR04_Init+0x278>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	331c      	adds	r3, #28
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	4931      	ldr	r1, [pc, #196]	; (8001494 <HCSR04_Init+0x278>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3308      	adds	r3, #8
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <HCSR04_Init+0x1da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	492c      	ldr	r1, [pc, #176]	; (8001494 <HCSR04_Init+0x278>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3308      	adds	r3, #8
 80013f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f4:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	4920      	ldr	r1, [pc, #128]	; (800147c <HCSR04_Init+0x260>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	330c      	adds	r3, #12
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <HCSR04_Init+0x206>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	4921      	ldr	r1, [pc, #132]	; (8001494 <HCSR04_Init+0x278>)
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3320      	adds	r3, #32
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e04f      	b.n	80014c2 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	4915      	ldr	r1, [pc, #84]	; (800147c <HCSR04_Init+0x260>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	330c      	adds	r3, #12
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d10a      	bne.n	800144e <HCSR04_Init+0x232>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4916      	ldr	r1, [pc, #88]	; (8001494 <HCSR04_Init+0x278>)
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3320      	adds	r3, #32
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e039      	b.n	80014c2 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <HCSR04_Init+0x260>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	330c      	adds	r3, #12
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b08      	cmp	r3, #8
 8001462:	d119      	bne.n	8001498 <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	490b      	ldr	r1, [pc, #44]	; (8001494 <HCSR04_Init+0x278>)
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3320      	adds	r3, #32
 8001474:	2204      	movs	r2, #4
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e023      	b.n	80014c2 <HCSR04_Init+0x2a6>
 800147a:	bf00      	nop
 800147c:	080085ac 	.word	0x080085ac
 8001480:	40010800 	.word	0x40010800
 8001484:	40021000 	.word	0x40021000
 8001488:	40010c00 	.word	0x40010c00
 800148c:	40011000 	.word	0x40011000
 8001490:	40011400 	.word	0x40011400
 8001494:	200001f4 	.word	0x200001f4
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4941      	ldr	r1, [pc, #260]	; (80015a0 <HCSR04_Init+0x384>)
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	330c      	adds	r3, #12
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d109      	bne.n	80014c2 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	493c      	ldr	r1, [pc, #240]	; (80015a4 <HCSR04_Init+0x388>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3320      	adds	r3, #32
 80014be:	2208      	movs	r2, #8
 80014c0:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	4936      	ldr	r1, [pc, #216]	; (80015a0 <HCSR04_Init+0x384>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	3308      	adds	r3, #8
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	4932      	ldr	r1, [pc, #200]	; (80015a4 <HCSR04_Init+0x388>)
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3304      	adds	r3, #4
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	492b      	ldr	r1, [pc, #172]	; (80015a4 <HCSR04_Init+0x388>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3308      	adds	r3, #8
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f002 f96e 	bl	80037f8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001526:	4619      	mov	r1, r3
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f002 feb9 	bl	80042a0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f002 fafe 	bl	8003b30 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4619      	mov	r1, r3
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f003 fb82 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <HCSR04_Init+0x384>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4619      	mov	r1, r3
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f002 fd43 	bl	8003ffc <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 8001576:	6838      	ldr	r0, [r7, #0]
 8001578:	f002 f98e 	bl	8003898 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <HCSR04_Init+0x384>)
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	330c      	adds	r3, #12
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f002 fb25 	bl	8003be0 <HAL_TIM_IC_Start_IT>
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	; 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	080085ac 	.word	0x080085ac
 80015a4:	200001f4 	.word	0x200001f4

080015a8 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e023      	b.n	8001602 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <HCSR04_TMR_OVF_ISR+0x6c>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4403      	add	r3, r0
 80015cc:	3308      	adds	r3, #8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4299      	cmp	r1, r3
 80015d2:	d113      	bne.n	80015fc <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	4910      	ldr	r1, [pc, #64]	; (8001618 <HCSR04_TMR_OVF_ISR+0x70>)
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3302      	adds	r3, #2
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b298      	uxth	r0, r3
 80015ea:	490b      	ldr	r1, [pc, #44]	; (8001618 <HCSR04_TMR_OVF_ISR+0x70>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3302      	adds	r3, #2
 80015f8:	4602      	mov	r2, r0
 80015fa:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b04      	cmp	r3, #4
 8001606:	d9d8      	bls.n	80015ba <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	080085ac 	.word	0x080085ac
 8001618:	200001f4 	.word	0x200001f4
 800161c:	00000000 	.word	0x00000000

08001620 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e22a      	b.n	8001a8c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	486b      	ldr	r0, [pc, #428]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4403      	add	r3, r0
 8001648:	3308      	adds	r3, #8
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4299      	cmp	r1, r3
 800164e:	f040 821a 	bne.w	8001a86 <HCSR04_TMR_IC_ISR+0x466>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7f19      	ldrb	r1, [r3, #28]
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	4865      	ldr	r0, [pc, #404]	; (80017f0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4403      	add	r3, r0
 8001664:	3320      	adds	r3, #32
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4299      	cmp	r1, r3
 800166a:	f040 820c 	bne.w	8001a86 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	495f      	ldr	r1, [pc, #380]	; (80017f0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 80b8 	bne.w	80017f4 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	4959      	ldr	r1, [pc, #356]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	330c      	adds	r3, #12
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7bfc      	ldrb	r4, [r7, #15]
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f002 fec4 	bl	8004428 <HAL_TIM_ReadCapturedValue>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4953      	ldr	r1, [pc, #332]	; (80017f0 <HCSR04_TMR_IC_ISR+0x1d0>)
 80016a4:	4623      	mov	r3, r4
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4423      	add	r3, r4
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	330c      	adds	r3, #12
 80016b0:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	494e      	ldr	r1, [pc, #312]	; (80017f0 <HCSR04_TMR_IC_ISR+0x1d0>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	4949      	ldr	r1, [pc, #292]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	330c      	adds	r3, #12
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <HCSR04_TMR_IC_ISR+0xcc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020a 	bic.w	r2, r2, #10
 80016e8:	621a      	str	r2, [r3, #32]
 80016ea:	e02f      	b.n	800174c <HCSR04_TMR_IC_ISR+0x12c>
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	493f      	ldr	r1, [pc, #252]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	330c      	adds	r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d108      	bne.n	8001714 <HCSR04_TMR_IC_ISR+0xf4>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e01b      	b.n	800174c <HCSR04_TMR_IC_ISR+0x12c>
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	4935      	ldr	r1, [pc, #212]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	330c      	adds	r3, #12
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d108      	bne.n	800173c <HCSR04_TMR_IC_ISR+0x11c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	e007      	b.n	800174c <HCSR04_TMR_IC_ISR+0x12c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	4927      	ldr	r1, [pc, #156]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	330c      	adds	r3, #12
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d108      	bne.n	8001774 <HCSR04_TMR_IC_ISR+0x154>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0202 	orr.w	r2, r2, #2
 8001770:	621a      	str	r2, [r3, #32]
 8001772:	e02f      	b.n	80017d4 <HCSR04_TMR_IC_ISR+0x1b4>
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	491d      	ldr	r1, [pc, #116]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	330c      	adds	r3, #12
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d108      	bne.n	800179c <HCSR04_TMR_IC_ISR+0x17c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01b      	b.n	80017d4 <HCSR04_TMR_IC_ISR+0x1b4>
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	4913      	ldr	r1, [pc, #76]	; (80017ec <HCSR04_TMR_IC_ISR+0x1cc>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	330c      	adds	r3, #12
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d108      	bne.n	80017c4 <HCSR04_TMR_IC_ISR+0x1a4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e007      	b.n	80017d4 <HCSR04_TMR_IC_ISR+0x1b4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d2:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	4906      	ldr	r1, [pc, #24]	; (80017f0 <HCSR04_TMR_IC_ISR+0x1d0>)
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3302      	adds	r3, #2
 80017e4:	2200      	movs	r2, #0
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	e14d      	b.n	8001a86 <HCSR04_TMR_IC_ISR+0x466>
 80017ea:	bf00      	nop
 80017ec:	080085ac 	.word	0x080085ac
 80017f0:	200001f4 	.word	0x200001f4
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	49ac      	ldr	r1, [pc, #688]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 813e 	bne.w	8001a86 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	49a7      	ldr	r1, [pc, #668]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3308      	adds	r3, #8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	49a2      	ldr	r1, [pc, #648]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3308      	adds	r3, #8
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001836:	489c      	ldr	r0, [pc, #624]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4403      	add	r3, r0
 8001842:	3308      	adds	r3, #8
 8001844:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	4998      	ldr	r1, [pc, #608]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	330c      	adds	r3, #12
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	7bfc      	ldrb	r4, [r7, #15]
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f002 fde3 	bl	8004428 <HAL_TIM_ReadCapturedValue>
 8001862:	4602      	mov	r2, r0
 8001864:	4990      	ldr	r1, [pc, #576]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001866:	4623      	mov	r3, r4
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4423      	add	r3, r4
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3310      	adds	r3, #16
 8001872:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	498c      	ldr	r1, [pc, #560]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3310      	adds	r3, #16
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	4887      	ldr	r0, [pc, #540]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4403      	add	r3, r0
 8001894:	3302      	adds	r3, #2
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461c      	mov	r4, r3
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	4882      	ldr	r0, [pc, #520]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4403      	add	r3, r0
 80018a8:	3308      	adds	r3, #8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	fb04 f303 	mul.w	r3, r4, r3
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	4419      	add	r1, r3
 80018b6:	487c      	ldr	r0, [pc, #496]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4403      	add	r3, r0
 80018c2:	3310      	adds	r3, #16
 80018c4:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	4977      	ldr	r1, [pc, #476]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3310      	adds	r3, #16
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	4873      	ldr	r0, [pc, #460]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4403      	add	r3, r0
 80018e6:	330c      	adds	r3, #12
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	1ac9      	subs	r1, r1, r3
 80018ee:	486e      	ldr	r0, [pc, #440]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4403      	add	r3, r0
 80018fa:	3314      	adds	r3, #20
 80018fc:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	4969      	ldr	r1, [pc, #420]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3314      	adds	r3, #20
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd67 	bl	80003e4 <__aeabi_ui2d>
 8001916:	a362      	add	r3, pc, #392	; (adr r3, 8001aa0 <HCSR04_TMR_IC_ISR+0x480>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fddc 	bl	80004d8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	4960      	ldr	r1, [pc, #384]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3310      	adds	r3, #16
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd4e 	bl	80003e4 <__aeabi_ui2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe feec 	bl	800072c <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	7bfc      	ldrb	r4, [r7, #15]
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f893 	bl	8000a88 <__aeabi_d2f>
 8001962:	4602      	mov	r2, r0
 8001964:	4950      	ldr	r1, [pc, #320]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001966:	4623      	mov	r3, r4
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4423      	add	r3, r4
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3318      	adds	r3, #24
 8001972:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	494c      	ldr	r1, [pc, #304]	; (8001aa8 <HCSR04_TMR_IC_ISR+0x488>)
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	4948      	ldr	r1, [pc, #288]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	330c      	adds	r3, #12
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d108      	bne.n	80019ae <HCSR04_TMR_IC_ISR+0x38e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020a 	bic.w	r2, r2, #10
 80019aa:	621a      	str	r2, [r3, #32]
 80019ac:	e02f      	b.n	8001a0e <HCSR04_TMR_IC_ISR+0x3ee>
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	493e      	ldr	r1, [pc, #248]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	330c      	adds	r3, #12
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d108      	bne.n	80019d6 <HCSR04_TMR_IC_ISR+0x3b6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e01b      	b.n	8001a0e <HCSR04_TMR_IC_ISR+0x3ee>
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	4934      	ldr	r1, [pc, #208]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	330c      	adds	r3, #12
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d108      	bne.n	80019fe <HCSR04_TMR_IC_ISR+0x3de>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e007      	b.n	8001a0e <HCSR04_TMR_IC_ISR+0x3ee>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4926      	ldr	r1, [pc, #152]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d106      	bne.n	8001a32 <HCSR04_TMR_IC_ISR+0x412>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a12      	ldr	r2, [r2, #32]
 8001a2e:	621a      	str	r2, [r3, #32]
 8001a30:	e029      	b.n	8001a86 <HCSR04_TMR_IC_ISR+0x466>
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	491d      	ldr	r1, [pc, #116]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	330c      	adds	r3, #12
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d106      	bne.n	8001a56 <HCSR04_TMR_IC_ISR+0x436>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e017      	b.n	8001a86 <HCSR04_TMR_IC_ISR+0x466>
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	4914      	ldr	r1, [pc, #80]	; (8001aac <HCSR04_TMR_IC_ISR+0x48c>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	330c      	adds	r3, #12
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d106      	bne.n	8001a7a <HCSR04_TMR_IC_ISR+0x45a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e005      	b.n	8001a86 <HCSR04_TMR_IC_ISR+0x466>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	f67f add1 	bls.w	8001636 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	b020c49c 	.word	0xb020c49c
 8001aa4:	3f916872 	.word	0x3f916872
 8001aa8:	200001f4 	.word	0x200001f4
 8001aac:	080085ac 	.word	0x080085ac

08001ab0 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	/* float Distance_meters = gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;

	float Distance_centimeters = Distance_meters * 100.0; */

	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <HCSR04_Read+0x28>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3318      	adds	r3, #24
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001f4 	.word	0x200001f4

08001adc <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4923      	ldr	r1, [pc, #140]	; (8001b78 <HCSR04_Trigger+0x9c>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	491f      	ldr	r1, [pc, #124]	; (8001b78 <HCSR04_Trigger+0x9c>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3304      	adds	r3, #4
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f001 fa42 	bl	8002f94 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HCSR04_Trigger+0xa0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HCSR04_Trigger+0xa4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HCSR04_Trigger+0xa8>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	005a      	lsls	r2, r3, #1
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HCSR04_Trigger+0xa4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HCSR04_Trigger+0xa8>)
 8001b2a:	fba1 1303 	umull	r1, r3, r1, r3
 8001b2e:	0c9b      	lsrs	r3, r3, #18
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HCSR04_Trigger+0xa0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f8      	bhi.n	8001b36 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	490c      	ldr	r1, [pc, #48]	; (8001b78 <HCSR04_Trigger+0x9c>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <HCSR04_Trigger+0x9c>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3304      	adds	r3, #4
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f001 fa13 	bl	8002f94 <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	080085ac 	.word	0x080085ac
 8001b7c:	e000e010 	.word	0xe000e010
 8001b80:	20000004 	.word	0x20000004
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_GPIO_Init+0xb8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|Trigger4_Pin
 8001be4:	2200      	movs	r2, #0
 8001be6:	f247 4133 	movw	r1, #29747	; 0x7433
 8001bea:	4816      	ldr	r0, [pc, #88]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001bec:	f001 f9d2 	bl	8002f94 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|Trigger5_Pin|L298_IN3_Pin|L298_IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001bf8:	f001 f9cc 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|Trigger4_Pin
 8001bfc:	f247 4333 	movw	r3, #29747	; 0x7433
 8001c00:	613b      	str	r3, [r7, #16]
                          |Buzzer_Pin|Trigger5_Pin|L298_IN3_Pin|L298_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4619      	mov	r1, r3
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001c16:	f001 f839 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8001c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001c34:	f001 f82a 	bl	8002c8c <HAL_GPIO_Init>

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40010800 	.word	0x40010800

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c52:	f000 fdd7 	bl	8002804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c56:	f000 f8c3 	bl	8001de0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Sys_Init();
 8001c5a:	f000 f907 	bl	8001e6c <Sys_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5e:	f7ff ff93 	bl	8001b88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c62:	f000 fd2b 	bl	80026bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Receiving_Init();
 8001c66:	f000 f9c5 	bl	8001ff4 <UART_Receiving_Init>

  /*Local variables begin*/
  float Front_Distance = 0.0, Right_Distance = 0.0, Left_Distance = 0.0, BlindSpot_Right = 0.0, BlindSpot_Left = 0.0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
  /*Local variables end*/

  UART_SendString("UART is ready for sending & receiving...\r\n");
 8001c88:	484c      	ldr	r0, [pc, #304]	; (8001dbc <main+0x170>)
 8001c8a:	f000 fa75 	bl	8002178 <UART_SendString>
  HAL_Delay(100);
 8001c8e:	2064      	movs	r0, #100	; 0x64
 8001c90:	f000 fe1a 	bl	80028c8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	switch (current_state) {
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <main+0x174>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	f200 808c 	bhi.w	8001db6 <main+0x16a>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <main+0x58>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cc1 	.word	0x08001cc1
 8001ca8:	08001cdb 	.word	0x08001cdb
 8001cac:	08001cf5 	.word	0x08001cf5
 8001cb0:	08001d0f 	.word	0x08001d0f
 8001cb4:	08001d29 	.word	0x08001d29
 8001cb8:	08001d35 	.word	0x08001d35
 8001cbc:	08001d71 	.word	0x08001d71
		case Forward:
			UART_SendString("Moving forward\r\n");
 8001cc0:	4840      	ldr	r0, [pc, #256]	; (8001dc4 <main+0x178>)
 8001cc2:	f000 fa59 	bl	8002178 <UART_SendString>
			move_forward();
 8001cc6:	f000 f937 	bl	8001f38 <move_forward>
			HAL_Delay(500);
 8001cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cce:	f000 fdfb 	bl	80028c8 <HAL_Delay>
			current_state = Stop;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <main+0x174>)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	701a      	strb	r2, [r3, #0]
			break;
 8001cd8:	e06e      	b.n	8001db8 <main+0x16c>

		case Backward:
			UART_SendString("Moving backward\r\n");
 8001cda:	483b      	ldr	r0, [pc, #236]	; (8001dc8 <main+0x17c>)
 8001cdc:	f000 fa4c 	bl	8002178 <UART_SendString>
			move_backward();
 8001ce0:	f000 f93a 	bl	8001f58 <move_backward>
			HAL_Delay(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f000 fdee 	bl	80028c8 <HAL_Delay>
			current_state = Stop;
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <main+0x174>)
 8001cee:	2204      	movs	r2, #4
 8001cf0:	701a      	strb	r2, [r3, #0]
			break;
 8001cf2:	e061      	b.n	8001db8 <main+0x16c>

		case Right:
			UART_SendString("Moving right\r\n");
 8001cf4:	4835      	ldr	r0, [pc, #212]	; (8001dcc <main+0x180>)
 8001cf6:	f000 fa3f 	bl	8002178 <UART_SendString>
			move_right();
 8001cfa:	f000 f93d 	bl	8001f78 <move_right>
			HAL_Delay(500);
 8001cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d02:	f000 fde1 	bl	80028c8 <HAL_Delay>
			current_state = Stop;
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <main+0x174>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
			break;
 8001d0c:	e054      	b.n	8001db8 <main+0x16c>

		case Left:
			UART_SendString("Moving left\r\n");
 8001d0e:	4830      	ldr	r0, [pc, #192]	; (8001dd0 <main+0x184>)
 8001d10:	f000 fa32 	bl	8002178 <UART_SendString>
			move_left();
 8001d14:	f000 f940 	bl	8001f98 <move_left>
			HAL_Delay(500);
 8001d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d1c:	f000 fdd4 	bl	80028c8 <HAL_Delay>
			current_state = Stop;
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <main+0x174>)
 8001d22:	2204      	movs	r2, #4
 8001d24:	701a      	strb	r2, [r3, #0]
			break;
 8001d26:	e047      	b.n	8001db8 <main+0x16c>

		case Stop:
			stop();
 8001d28:	f000 f946 	bl	8001fb8 <stop>
			UART_SendString("Stopped\r\n");
 8001d2c:	4829      	ldr	r0, [pc, #164]	; (8001dd4 <main+0x188>)
 8001d2e:	f000 fa23 	bl	8002178 <UART_SendString>
			break;
 8001d32:	e041      	b.n	8001db8 <main+0x16c>

		case Obstacle_Avoidance:
			Right_Distance = HCSR04_Read(HCSR04_SENSOR1);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff febb 	bl	8001ab0 <HCSR04_Read>
 8001d3a:	6138      	str	r0, [r7, #16]

			Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff feb7 	bl	8001ab0 <HCSR04_Read>
 8001d42:	6178      	str	r0, [r7, #20]
			UART_SendString("Front Distance: ");
 8001d44:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <main+0x18c>)
 8001d46:	f000 fa17 	bl	8002178 <UART_SendString>
			UART_SendFloat(Front_Distance);
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f000 fa32 	bl	80021b4 <UART_SendFloat>
			UART_SendString("\r\n");
 8001d50:	4822      	ldr	r0, [pc, #136]	; (8001ddc <main+0x190>)
 8001d52:	f000 fa11 	bl	8002178 <UART_SendString>

			Left_Distance = HCSR04_Read(HCSR04_SENSOR3);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff feaa 	bl	8001ab0 <HCSR04_Read>
 8001d5c:	60f8      	str	r0, [r7, #12]

			ObdtacleAvoidance_Logic(Front_Distance, Right_Distance, Left_Distance);
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f000 f958 	bl	8002018 <ObdtacleAvoidance_Logic>
			HAL_Delay(50);
 8001d68:	2032      	movs	r0, #50	; 0x32
 8001d6a:	f000 fdad 	bl	80028c8 <HAL_Delay>
			break;
 8001d6e:	e023      	b.n	8001db8 <main+0x16c>

		case Blind_Spot:
			Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff fe9d 	bl	8001ab0 <HCSR04_Read>
 8001d76:	6178      	str	r0, [r7, #20]
			BlindSpot_Right = HCSR04_Read(HCSR04_SENSOR4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f7ff fe99 	bl	8001ab0 <HCSR04_Read>
 8001d7e:	60b8      	str	r0, [r7, #8]
			BlindSpot_Left = HCSR04_Read(HCSR04_SENSOR5);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f7ff fe95 	bl	8001ab0 <HCSR04_Read>
 8001d86:	6078      	str	r0, [r7, #4]

			UART_SendString("Front Distance: ");
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <main+0x18c>)
 8001d8a:	f000 f9f5 	bl	8002178 <UART_SendString>
			UART_SendFloat(Front_Distance);
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f000 fa10 	bl	80021b4 <UART_SendFloat>
			UART_SendString("\r\n");
 8001d94:	4811      	ldr	r0, [pc, #68]	; (8001ddc <main+0x190>)
 8001d96:	f000 f9ef 	bl	8002178 <UART_SendString>

			SafeDistance_Logic(Front_Distance);
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f000 f9a4 	bl	80020e8 <SafeDistance_Logic>
			HAL_Delay(50);
 8001da0:	2032      	movs	r0, #50	; 0x32
 8001da2:	f000 fd91 	bl	80028c8 <HAL_Delay>

			BlindSpot_Logic(BlindSpot_Right, BlindSpot_Left);
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f000 f9c1 	bl	8002130 <BlindSpot_Logic>
			HAL_Delay(50);
 8001dae:	2032      	movs	r0, #50	; 0x32
 8001db0:	f000 fd8a 	bl	80028c8 <HAL_Delay>

			break;
 8001db4:	e000      	b.n	8001db8 <main+0x16c>

		default:
			break;
 8001db6:	bf00      	nop
	switch (current_state) {
 8001db8:	e76c      	b.n	8001c94 <main+0x48>
 8001dba:	bf00      	nop
 8001dbc:	08008490 	.word	0x08008490
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	080084bc 	.word	0x080084bc
 8001dc8:	080084d0 	.word	0x080084d0
 8001dcc:	080084e4 	.word	0x080084e4
 8001dd0:	080084f4 	.word	0x080084f4
 8001dd4:	08008504 	.word	0x08008504
 8001dd8:	08008510 	.word	0x08008510
 8001ddc:	08008524 	.word	0x08008524

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b090      	sub	sp, #64	; 0x40
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	2228      	movs	r2, #40	; 0x28
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fa57 	bl	80062a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e14:	2302      	movs	r3, #2
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f8cb 	bl	8002fc4 <HAL_RCC_OscConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e34:	f000 fa3c 	bl	80022b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e38:	230f      	movs	r3, #15
 8001e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2102      	movs	r1, #2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fb38 	bl	80034c8 <HAL_RCC_ClockConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e5e:	f000 fa27 	bl	80022b0 <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3740      	adds	r7, #64	; 0x40
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <Sys_Init>:

/* USER CODE BEGIN 4 */
static void Sys_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HCSR04_Init(HCSR04_SENSOR1, &htim4);
 8001e70:	4913      	ldr	r1, [pc, #76]	; (8001ec0 <Sys_Init+0x54>)
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff f9d2 	bl	800121c <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR2, &htim4);
 8001e78:	4911      	ldr	r1, [pc, #68]	; (8001ec0 <Sys_Init+0x54>)
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff f9ce 	bl	800121c <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR3, &htim3);
 8001e80:	4910      	ldr	r1, [pc, #64]	; (8001ec4 <Sys_Init+0x58>)
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7ff f9ca 	bl	800121c <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR4, &htim3);
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <Sys_Init+0x58>)
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f7ff f9c6 	bl	800121c <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR5, &htim4);
 8001e90:	490b      	ldr	r1, [pc, #44]	; (8001ec0 <Sys_Init+0x54>)
 8001e92:	2004      	movs	r0, #4
 8001e94:	f7ff f9c2 	bl	800121c <HCSR04_Init>
    DC_MOTOR_Init(DC_MOTOR1);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe fedf 	bl	8000c5c <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR2);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7fe fedc 	bl	8000c5c <DC_MOTOR_Init>
    DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MIN_SPEED);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff f877 	bl	8000f9c <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR2, DIR_CW, MIN_SPEED);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f7ff f872 	bl	8000f9c <DC_MOTOR_Start>
    Buzzer_Init();
 8001eb8:	f7fe feac 	bl	8000c14 <Buzzer_Init>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200002f0 	.word	0x200002f0
 8001ec4:	200002a8 	.word	0x200002a8

08001ec8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fba5 	bl	8001620 <HCSR04_TMR_IC_ISR>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_OVF_ISR(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fb5e 	bl	80015a8 <HCSR04_TMR_OVF_ISR>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <SysTick_CallBack>:

void SysTick_CallBack(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	TRIG_Ticks++;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <SysTick_CallBack+0x40>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <SysTick_CallBack+0x40>)
 8001f02:	801a      	strh	r2, [r3, #0]
    if(TRIG_Ticks >= 10) // Each 10msec
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <SysTick_CallBack+0x40>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d911      	bls.n	8001f30 <SysTick_CallBack+0x3c>
    {
    	HCSR04_Trigger(HCSR04_SENSOR1);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fde5 	bl	8001adc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR2);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fde2 	bl	8001adc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR3);
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff fddf 	bl	8001adc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR4);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f7ff fddc 	bl	8001adc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR5);
 8001f24:	2004      	movs	r0, #4
 8001f26:	f7ff fdd9 	bl	8001adc <HCSR04_Trigger>
    	TRIG_Ticks = 0;
 8001f2a:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <SysTick_CallBack+0x40>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	801a      	strh	r2, [r3, #0]
    }
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000338 	.word	0x20000338

08001f38 <move_forward>:

void move_forward(void){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	2101      	movs	r1, #1
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff f82a 	bl	8000f9c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CW, MAX_SPEED);
 8001f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff f824 	bl	8000f9c <DC_MOTOR_Start>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <move_backward>:


void move_backward(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, MAX_SPEED);
 8001f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f60:	2100      	movs	r1, #0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff f81a 	bl	8000f9c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, MAX_SPEED);
 8001f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff f814 	bl	8000f9c <DC_MOTOR_Start>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <move_right>:


void move_right(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	2101      	movs	r1, #1
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff f80a 	bl	8000f9c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, MAX_SPEED);
 8001f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff f804 	bl	8000f9c <DC_MOTOR_Start>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <move_left>:


void move_left(void){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, MAX_SPEED);
 8001f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7fe fffa 	bl	8000f9c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CW, MAX_SPEED);
 8001fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fac:	2100      	movs	r1, #0
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe fff4 	bl	8000f9c <DC_MOTOR_Start>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <stop>:


void stop(void){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	DC_MOTOR_Stop(DC_MOTOR1);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff f8c7 	bl	8001150 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff f8c4 	bl	8001150 <DC_MOTOR_Stop>
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <Speed_Control>:

void Speed_Control(uint16_t Speed){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
	DC_MOTOR_Set_Speed(DC_MOTOR1, Speed);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff f86e 	bl	80010bc <DC_MOTOR_Set_Speed>
	DC_MOTOR_Set_Speed(DC_MOTOR2, Speed);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff f869 	bl	80010bc <DC_MOTOR_Set_Speed>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <UART_Receiving_Init>:

void UART_Receiving_Init(void){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &RX_Data, 1) != HAL_OK) {
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4905      	ldr	r1, [pc, #20]	; (8002010 <UART_Receiving_Init+0x1c>)
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <UART_Receiving_Init+0x20>)
 8001ffe:	f002 ff74 	bl	8004eea <HAL_UART_Receive_IT>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <UART_Receiving_Init+0x18>
		  Error_Handler();
 8002008:	f000 f952 	bl	80022b0 <Error_Handler>
	  }
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000033a 	.word	0x2000033a
 8002014:	20000340 	.word	0x20000340

08002018 <ObdtacleAvoidance_Logic>:

void ObdtacleAvoidance_Logic(float Front_Distance, float Right_Distance, float Left_Distance){
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	// Perform obstacle avoidance logic
	if (Right_Distance < THRESHOLD_DISTANCE || Front_Distance < THRESHOLD_DISTANCE || Left_Distance < THRESHOLD_DISTANCE) {
 8002024:	492f      	ldr	r1, [pc, #188]	; (80020e4 <ObdtacleAvoidance_Logic+0xcc>)
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f7fe fdcc 	bl	8000bc4 <__aeabi_fcmplt>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <ObdtacleAvoidance_Logic+0x36>
 8002032:	492c      	ldr	r1, [pc, #176]	; (80020e4 <ObdtacleAvoidance_Logic+0xcc>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7fe fdc5 	bl	8000bc4 <__aeabi_fcmplt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <ObdtacleAvoidance_Logic+0x36>
 8002040:	4928      	ldr	r1, [pc, #160]	; (80020e4 <ObdtacleAvoidance_Logic+0xcc>)
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fdbe 	bl	8000bc4 <__aeabi_fcmplt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d042      	beq.n	80020d4 <ObdtacleAvoidance_Logic+0xbc>
		// Obstacle detected
		// Choose appropriate avoidance maneuver
		if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f7fe fdb7 	bl	8000bc4 <__aeabi_fcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <ObdtacleAvoidance_Logic+0x58>
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68b8      	ldr	r0, [r7, #8]
 8002060:	f7fe fdb0 	bl	8000bc4 <__aeabi_fcmplt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <ObdtacleAvoidance_Logic+0x58>
			// Obstacle is closer to sensor 1
 			//UART_SendString("Moving left\r\n");
			move_left();
 800206a:	f7ff ff95 	bl	8001f98 <move_left>
 800206e:	e030      	b.n	80020d2 <ObdtacleAvoidance_Logic+0xba>
		} else if (Front_Distance < Right_Distance && Front_Distance < Left_Distance) {
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7fe fda6 	bl	8000bc4 <__aeabi_fcmplt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d026      	beq.n	80020cc <ObdtacleAvoidance_Logic+0xb4>
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7fe fd9f 	bl	8000bc4 <__aeabi_fcmplt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <ObdtacleAvoidance_Logic+0xb4>
			// Obstacle is closer to sensor 2
			//UART_SendString("Moving backward\r\n");
			stop();
 800208c:	f7ff ff94 	bl	8001fb8 <stop>
			move_backward();
 8002090:	f7ff ff62 	bl	8001f58 <move_backward>
			HAL_Delay(50);
 8002094:	2032      	movs	r0, #50	; 0x32
 8002096:	f000 fc17 	bl	80028c8 <HAL_Delay>

			if (Right_Distance < Left_Distance) {
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f7fe fd91 	bl	8000bc4 <__aeabi_fcmplt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <ObdtacleAvoidance_Logic+0xa2>
				//UART_SendString("Moving left\r\n");
				move_left();
 80020a8:	f7ff ff76 	bl	8001f98 <move_left>
				HAL_Delay(500);
 80020ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020b0:	f000 fc0a 	bl	80028c8 <HAL_Delay>
				move_forward();
 80020b4:	f7ff ff40 	bl	8001f38 <move_forward>
			if (Right_Distance < Left_Distance) {
 80020b8:	e00b      	b.n	80020d2 <ObdtacleAvoidance_Logic+0xba>
			} else {
				//UART_SendString("Moving right\r\n");
				move_right();
 80020ba:	f7ff ff5d 	bl	8001f78 <move_right>
				HAL_Delay(500);
 80020be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c2:	f000 fc01 	bl	80028c8 <HAL_Delay>
				move_forward();
 80020c6:	f7ff ff37 	bl	8001f38 <move_forward>
			if (Right_Distance < Left_Distance) {
 80020ca:	e002      	b.n	80020d2 <ObdtacleAvoidance_Logic+0xba>
			}
		} else {
			// Obstacle is closer to sensor 3
			//UART_SendString("Moving right\r\n");
			move_right();
 80020cc:	f7ff ff54 	bl	8001f78 <move_right>
		if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 80020d0:	e003      	b.n	80020da <ObdtacleAvoidance_Logic+0xc2>
 80020d2:	e002      	b.n	80020da <ObdtacleAvoidance_Logic+0xc2>
		}
	} else {
		// No obstacle detected
		//UART_SendString("Moving forward\r\n");
		move_forward();
 80020d4:	f7ff ff30 	bl	8001f38 <move_forward>
	}
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	41a00000 	.word	0x41a00000

080020e8 <SafeDistance_Logic>:

void SafeDistance_Logic(float Safe_Distance){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	//For safe distance detection
	if(Safe_Distance < SAFE_DISTANCE){
 80020f0:	490d      	ldr	r1, [pc, #52]	; (8002128 <SafeDistance_Logic+0x40>)
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fd66 	bl	8000bc4 <__aeabi_fcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <SafeDistance_Logic+0x20>
		Speed_Control(0XFFF);
 80020fe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002102:	f7ff ff63 	bl	8001fcc <Speed_Control>
		//UART_SendString("Stopped\r\n");
	} else {
		move_forward();
		//UART_SendString("Moving forward\r\n");
	}
}
 8002106:	e00b      	b.n	8002120 <SafeDistance_Logic+0x38>
	} else if (Safe_Distance < THRESHOLD_DISTANCE) {
 8002108:	4908      	ldr	r1, [pc, #32]	; (800212c <SafeDistance_Logic+0x44>)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd5a 	bl	8000bc4 <__aeabi_fcmplt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <SafeDistance_Logic+0x34>
		stop();
 8002116:	f7ff ff4f 	bl	8001fb8 <stop>
}
 800211a:	e001      	b.n	8002120 <SafeDistance_Logic+0x38>
		move_forward();
 800211c:	f7ff ff0c 	bl	8001f38 <move_forward>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	41c80000 	.word	0x41c80000
 800212c:	41a00000 	.word	0x41a00000

08002130 <BlindSpot_Logic>:

void BlindSpot_Logic(float BlindSpot_right, float BlindSpot_left){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	//For blind spot detection
	if (BlindSpot_right < BLINDSPOT_DISTANCE || BlindSpot_left < BLINDSPOT_DISTANCE) {
 800213a:	490d      	ldr	r1, [pc, #52]	; (8002170 <BlindSpot_Logic+0x40>)
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7fe fd41 	bl	8000bc4 <__aeabi_fcmplt>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <BlindSpot_Logic+0x26>
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <BlindSpot_Logic+0x40>)
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f7fe fd3a 	bl	8000bc4 <__aeabi_fcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <BlindSpot_Logic+0x32>
		Buzzer_ON();
 8002156:	f7fe fd69 	bl	8000c2c <Buzzer_ON>
		UART_SendString("Be careful!! Your blind spot is not safe\r\n");
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <BlindSpot_Logic+0x44>)
 800215c:	f000 f80c 	bl	8002178 <UART_SendString>
 8002160:	e002      	b.n	8002168 <BlindSpot_Logic+0x38>
	} else {
		Buzzer_OFF();
 8002162:	f7fe fd6f 	bl	8000c44 <Buzzer_OFF>
		//UART_SendString("Your blind spot is safe\r\n");
	}
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	41f00000 	.word	0x41f00000
 8002174:	08008528 	.word	0x08008528

08002178 <UART_SendString>:

//Function to send string over UART
void UART_SendString(char *string){
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	uint16_t length = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 8002184:	e002      	b.n	800218c <UART_SendString+0x14>
		length++;
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	3301      	adds	r3, #1
 800218a:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f6      	bne.n	8002186 <UART_SendString+0xe>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *)string, length, HAL_MAX_DELAY);
 8002198:	89fa      	ldrh	r2, [r7, #14]
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <UART_SendString+0x38>)
 80021a2:	f002 fe10 	bl	8004dc6 <HAL_UART_Transmit>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000340 	.word	0x20000340

080021b4 <UART_SendFloat>:

void UART_SendFloat(float num){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    char buffer[20];               // Buffer to hold the string representation of the float
    sprintf(buffer, "%.2f", num);  // Convert float to string with 2 decimal places
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe f933 	bl	8000428 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	f107 000c 	add.w	r0, r7, #12
 80021ca:	4906      	ldr	r1, [pc, #24]	; (80021e4 <UART_SendFloat+0x30>)
 80021cc:	f004 f806 	bl	80061dc <siprintf>
    UART_SendString(buffer);       // Send the string via UART
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffcf 	bl	8002178 <UART_SendString>
}
 80021da:	bf00      	nop
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	08008554 	.word	0x08008554

080021e8 <HAL_UART_RxCpltCallback>:

//Auto Called when receiving a new data over UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <HAL_UART_RxCpltCallback+0xb8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d14d      	bne.n	8002296 <HAL_UART_RxCpltCallback+0xae>
    	//new_data_flag = 1;
        HAL_UART_Receive_IT(&huart1, &RX_Data, 1);
 80021fa:	2201      	movs	r2, #1
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <HAL_UART_RxCpltCallback+0xbc>)
 80021fe:	482a      	ldr	r0, [pc, #168]	; (80022a8 <HAL_UART_RxCpltCallback+0xc0>)
 8002200:	f002 fe73 	bl	8004eea <HAL_UART_Receive_IT>
		switch (RX_Data) {
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	3b42      	subs	r3, #66	; 0x42
 800220a:	2b11      	cmp	r3, #17
 800220c:	d842      	bhi.n	8002294 <HAL_UART_RxCpltCallback+0xac>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_UART_RxCpltCallback+0x2c>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002265 	.word	0x08002265
 8002218:	08002295 	.word	0x08002295
 800221c:	0800228d 	.word	0x0800228d
 8002220:	08002295 	.word	0x08002295
 8002224:	0800225d 	.word	0x0800225d
 8002228:	08002295 	.word	0x08002295
 800222c:	08002295 	.word	0x08002295
 8002230:	08002295 	.word	0x08002295
 8002234:	08002295 	.word	0x08002295
 8002238:	08002295 	.word	0x08002295
 800223c:	08002275 	.word	0x08002275
 8002240:	08002295 	.word	0x08002295
 8002244:	08002295 	.word	0x08002295
 8002248:	08002285 	.word	0x08002285
 800224c:	08002295 	.word	0x08002295
 8002250:	08002295 	.word	0x08002295
 8002254:	0800226d 	.word	0x0800226d
 8002258:	0800227d 	.word	0x0800227d
			case FORWARD:
				current_state = Forward;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
				break;
 8002262:	e018      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case BACKWARD:
				current_state = Backward;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
				break;
 800226a:	e014      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case RIGHT:
				current_state = Right;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
				break;
 8002272:	e010      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case LEFT:
				current_state = Left;
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
				break;
 800227a:	e00c      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case STOP:
				current_state = Stop;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 800227e:	2204      	movs	r2, #4
 8002280:	701a      	strb	r2, [r3, #0]
				break;
 8002282:	e008      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case OBSTACLE_AVOIDANCE:
				current_state = Obstacle_Avoidance;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 8002286:	2205      	movs	r2, #5
 8002288:	701a      	strb	r2, [r3, #0]
				break;
 800228a:	e004      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			case BLIND_SPOT_SAFE_DISTANCE:
				current_state = Blind_Spot;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_UART_RxCpltCallback+0xc4>)
 800228e:	2206      	movs	r2, #6
 8002290:	701a      	strb	r2, [r3, #0]
				break;
 8002292:	e000      	b.n	8002296 <HAL_UART_RxCpltCallback+0xae>

			default:
				break;
 8002294:	bf00      	nop
		}

    }
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40013800 	.word	0x40013800
 80022a4:	2000033a 	.word	0x2000033a
 80022a8:	20000340 	.word	0x20000340
 80022ac:	20000000 	.word	0x20000000

080022b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b4:	b672      	cpsid	i
}
 80022b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <Error_Handler+0x8>
	...

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_MspInit+0x5c>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_MspInit+0x5c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6193      	str	r3, [r2, #24]
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_MspInit+0x5c>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_MspInit+0x5c>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_MspInit+0x5c>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	61d3      	str	r3, [r2, #28]
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_MspInit+0x5c>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_MspInit+0x60>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_MspInit+0x60>)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <NMI_Handler+0x4>

08002326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <HardFault_Handler+0x4>

0800232c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <MemManage_Handler+0x4>

08002332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <BusFault_Handler+0x4>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <UsageFault_Handler+0x4>

0800233e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002366:	f000 fa93 	bl	8002890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 800236a:	f7ff fdc3 	bl	8001ef4 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM3_IRQHandler+0x10>)
 800237a:	f001 fd37 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200002a8 	.word	0x200002a8

08002388 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <TIM4_IRQHandler+0x10>)
 800238e:	f001 fd2d 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200002f0 	.word	0x200002f0

0800239c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <USART1_IRQHandler+0x10>)
 80023a2:	f002 fdd3 	bl	8004f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000340 	.word	0x20000340

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <_kill>:

int _kill(int pid, int sig)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023c8:	f003 ffbe 	bl	8006348 <__errno>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2216      	movs	r2, #22
 80023d0:	601a      	str	r2, [r3, #0]
  return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_exit>:

void _exit (int status)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffe7 	bl	80023be <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f0:	e7fe      	b.n	80023f0 <_exit+0x12>

080023f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e00a      	b.n	800241a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002404:	f3af 8000 	nop.w
 8002408:	4601      	mov	r1, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	60ba      	str	r2, [r7, #8]
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3301      	adds	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	dbf0      	blt.n	8002404 <_read+0x12>
  }

  return len;
 8002422:	687b      	ldr	r3, [r7, #4]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e009      	b.n	8002452 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	dbf1      	blt.n	800243e <_write+0x12>
  }
  return len;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_close>:

int _close(int file)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248a:	605a      	str	r2, [r3, #4]
  return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <_isatty>:

int _isatty(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <_sbrk+0x5c>)
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <_sbrk+0x60>)
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <_sbrk+0x64>)
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <_sbrk+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f4:	f003 ff28 	bl	8006348 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005000 	.word	0x20005000
 8002524:	00000400 	.word	0x00000400
 8002528:	2000033c 	.word	0x2000033c
 800252c:	200004d8 	.word	0x200004d8

08002530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_Base_MspInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0320 	add.w	r3, r7, #32
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d10c      	bne.n	8002576 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a39      	ldr	r2, [pc, #228]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002574:	e063      	b.n	800263e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_TIM_Base_MspInit+0x110>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d12c      	bne.n	80025da <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	61d3      	str	r3, [r2, #28]
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Echo3_Pin|Echo4_Pin;
 80025b0:	23c0      	movs	r3, #192	; 0xc0
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0320 	add.w	r3, r7, #32
 80025c0:	4619      	mov	r1, r3
 80025c2:	4823      	ldr	r0, [pc, #140]	; (8002650 <HAL_TIM_Base_MspInit+0x114>)
 80025c4:	f000 fb62 	bl	8002c8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	201d      	movs	r0, #29
 80025ce:	f000 fa76 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025d2:	201d      	movs	r0, #29
 80025d4:	f000 fa8f 	bl	8002af6 <HAL_NVIC_EnableIRQ>
}
 80025d8:	e031      	b.n	800263e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM4)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_TIM_Base_MspInit+0x118>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d12c      	bne.n	800263e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	61d3      	str	r3, [r2, #28]
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_TIM_Base_MspInit+0x10c>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin|Echo5_Pin;
 8002614:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	4619      	mov	r1, r3
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <HAL_TIM_Base_MspInit+0x11c>)
 800262a:	f000 fb2f 	bl	8002c8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	201e      	movs	r0, #30
 8002634:	f000 fa43 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002638:	201e      	movs	r0, #30
 800263a:	f000 fa5c 	bl	8002af6 <HAL_NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	40000400 	.word	0x40000400
 8002650:	40010800 	.word	0x40010800
 8002654:	40000800 	.word	0x40000800
 8002658:	40010c00 	.word	0x40010c00

0800265c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d117      	bne.n	80026ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_TIM_MspPostInit+0x58>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_TIM_MspPostInit+0x58>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_TIM_MspPostInit+0x58>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = L298_ENA_Pin|L298_ENB_Pin;
 8002694:	2306      	movs	r3, #6
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2302      	movs	r3, #2
 800269e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <HAL_TIM_MspPostInit+0x5c>)
 80026a8:	f000 faf0 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010800 	.word	0x40010800

080026bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <MX_USART1_UART_Init+0x50>)
 80026c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026e2:	220c      	movs	r2, #12
 80026e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_USART1_UART_Init+0x4c>)
 80026f4:	f002 fb1a 	bl	8004d2c <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026fe:	f7ff fdd7 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000340 	.word	0x20000340
 800270c:	40013800 	.word	0x40013800

08002710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_UART_MspInit+0x9c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d139      	bne.n	80027a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 8002736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_UART_MspInit+0xa0>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	4619      	mov	r1, r3
 8002774:	480f      	ldr	r0, [pc, #60]	; (80027b4 <HAL_UART_MspInit+0xa4>)
 8002776:	f000 fa89 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4619      	mov	r1, r3
 800278e:	4809      	ldr	r0, [pc, #36]	; (80027b4 <HAL_UART_MspInit+0xa4>)
 8002790:	f000 fa7c 	bl	8002c8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2025      	movs	r0, #37	; 0x25
 800279a:	f000 f990 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800279e:	2025      	movs	r0, #37	; 0x25
 80027a0:	f000 f9a9 	bl	8002af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010800 	.word	0x40010800

080027b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027de:	f7ff fea7 	bl	8002530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e2:	f003 fdb7 	bl	8006354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027e6:	f7ff fa31 	bl	8001c4c <main>
  bx lr
 80027ea:	4770      	bx	lr
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80027f4:	080089a4 	.word	0x080089a4
  ldr r2, =_sbss
 80027f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027fc:	200004d4 	.word	0x200004d4

08002800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC1_2_IRQHandler>
	...

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_Init+0x28>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_Init+0x28>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002814:	2003      	movs	r0, #3
 8002816:	f000 f947 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281a:	200f      	movs	r0, #15
 800281c:	f000 f808 	bl	8002830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002820:	f7ff fd4c 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000

08002830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x54>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x58>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002846:	fbb3 f3f1 	udiv	r3, r3, r1
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f95f 	bl	8002b12 <HAL_SYSTICK_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e00e      	b.n	800287c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d80a      	bhi.n	800287a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002864:	2200      	movs	r2, #0
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f000 f927 	bl	8002abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002870:	4a06      	ldr	r2, [pc, #24]	; (800288c <HAL_InitTick+0x5c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000004 	.word	0x20000004
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000008 	.word	0x20000008

08002890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_IncTick+0x1c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_IncTick+0x20>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_IncTick+0x20>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20000384 	.word	0x20000384

080028b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <HAL_GetTick+0x10>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000384 	.word	0x20000384

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d005      	beq.n	80028ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_Delay+0x44>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ee:	bf00      	nop
 80028f0:	f7ff ffe0 	bl	80028b4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d8f7      	bhi.n	80028f0 <HAL_Delay+0x28>
  {
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000000c 	.word	0x2000000c

08002910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60d3      	str	r3, [r2, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <__NVIC_GetPriorityGrouping+0x18>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0307 	and.w	r3, r3, #7
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	2b00      	cmp	r3, #0
 8002984:	db0b      	blt.n	800299e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f003 021f 	and.w	r2, r3, #31
 800298c:	4906      	ldr	r1, [pc, #24]	; (80029a8 <__NVIC_EnableIRQ+0x34>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2001      	movs	r0, #1
 8002996:	fa00 f202 	lsl.w	r2, r0, r2
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a74:	d301      	bcc.n	8002a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00f      	b.n	8002a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <SysTick_Config+0x40>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a82:	210f      	movs	r1, #15
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	f7ff ff90 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <SysTick_Config+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <SysTick_Config+0x40>)
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff2d 	bl	8002910 <__NVIC_SetPriorityGrouping>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad0:	f7ff ff42 	bl	8002958 <__NVIC_GetPriorityGrouping>
 8002ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff ff90 	bl	8002a00 <NVIC_EncodePriority>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff5f 	bl	80029ac <__NVIC_SetPriority>
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff35 	bl	8002974 <__NVIC_EnableIRQ>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ffa2 	bl	8002a64 <SysTick_Config>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2204      	movs	r2, #4
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e020      	b.n	8002b94 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020e 	bic.w	r2, r2, #14
 8002b60:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e051      	b.n	8002c66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 020e 	bic.w	r2, r2, #14
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_Abort_IT+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d029      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xa0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <HAL_DMA_Abort_IT+0xd4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x9c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_DMA_Abort_IT+0xd8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01a      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x96>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_DMA_Abort_IT+0xdc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d012      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x90>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_DMA_Abort_IT+0xe0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00a      	beq.n	8002c2a <HAL_DMA_Abort_IT+0x8a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_DMA_Abort_IT+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <HAL_DMA_Abort_IT+0x84>
 8002c1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c22:	e00e      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	e00b      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2e:	e008      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	e005      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c3a:	e002      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c40:	2301      	movs	r3, #1
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_DMA_Abort_IT+0xe8>)
 8002c44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
    } 
  }
  return status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40020008 	.word	0x40020008
 8002c74:	4002001c 	.word	0x4002001c
 8002c78:	40020030 	.word	0x40020030
 8002c7c:	40020044 	.word	0x40020044
 8002c80:	40020058 	.word	0x40020058
 8002c84:	4002006c 	.word	0x4002006c
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b08b      	sub	sp, #44	; 0x2c
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9e:	e169      	b.n	8002f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f040 8158 	bne.w	8002f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a9a      	ldr	r2, [pc, #616]	; (8002f2c <HAL_GPIO_Init+0x2a0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d05e      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
 8002cc8:	4a98      	ldr	r2, [pc, #608]	; (8002f2c <HAL_GPIO_Init+0x2a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d875      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002cce:	4a98      	ldr	r2, [pc, #608]	; (8002f30 <HAL_GPIO_Init+0x2a4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d058      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
 8002cd4:	4a96      	ldr	r2, [pc, #600]	; (8002f30 <HAL_GPIO_Init+0x2a4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d86f      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002cda:	4a96      	ldr	r2, [pc, #600]	; (8002f34 <HAL_GPIO_Init+0x2a8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d052      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
 8002ce0:	4a94      	ldr	r2, [pc, #592]	; (8002f34 <HAL_GPIO_Init+0x2a8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d869      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002ce6:	4a94      	ldr	r2, [pc, #592]	; (8002f38 <HAL_GPIO_Init+0x2ac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04c      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
 8002cec:	4a92      	ldr	r2, [pc, #584]	; (8002f38 <HAL_GPIO_Init+0x2ac>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d863      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002cf2:	4a92      	ldr	r2, [pc, #584]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d046      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
 8002cf8:	4a90      	ldr	r2, [pc, #576]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d85d      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d82a      	bhi.n	8002d58 <HAL_GPIO_Init+0xcc>
 8002d02:	2b12      	cmp	r3, #18
 8002d04:	d859      	bhi.n	8002dba <HAL_GPIO_Init+0x12e>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_GPIO_Init+0x80>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d61 	.word	0x08002d61
 8002d14:	08002d73 	.word	0x08002d73
 8002d18:	08002db5 	.word	0x08002db5
 8002d1c:	08002dbb 	.word	0x08002dbb
 8002d20:	08002dbb 	.word	0x08002dbb
 8002d24:	08002dbb 	.word	0x08002dbb
 8002d28:	08002dbb 	.word	0x08002dbb
 8002d2c:	08002dbb 	.word	0x08002dbb
 8002d30:	08002dbb 	.word	0x08002dbb
 8002d34:	08002dbb 	.word	0x08002dbb
 8002d38:	08002dbb 	.word	0x08002dbb
 8002d3c:	08002dbb 	.word	0x08002dbb
 8002d40:	08002dbb 	.word	0x08002dbb
 8002d44:	08002dbb 	.word	0x08002dbb
 8002d48:	08002dbb 	.word	0x08002dbb
 8002d4c:	08002dbb 	.word	0x08002dbb
 8002d50:	08002d69 	.word	0x08002d69
 8002d54:	08002d7d 	.word	0x08002d7d
 8002d58:	4a79      	ldr	r2, [pc, #484]	; (8002f40 <HAL_GPIO_Init+0x2b4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d5e:	e02c      	b.n	8002dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e029      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e024      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	3308      	adds	r3, #8
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e01f      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	330c      	adds	r3, #12
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e01a      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e013      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	611a      	str	r2, [r3, #16]
          break;
 8002da6:	e009      	b.n	8002dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da8:	2308      	movs	r3, #8
 8002daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	615a      	str	r2, [r3, #20]
          break;
 8002db2:	e003      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
          break;
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x130>
          break;
 8002dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2bff      	cmp	r3, #255	; 0xff
 8002dc0:	d801      	bhi.n	8002dc6 <HAL_GPIO_Init+0x13a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_Init+0x13e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2bff      	cmp	r3, #255	; 0xff
 8002dd0:	d802      	bhi.n	8002dd8 <HAL_GPIO_Init+0x14c>
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	e002      	b.n	8002dde <HAL_GPIO_Init+0x152>
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	3b08      	subs	r3, #8
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	210f      	movs	r1, #15
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	401a      	ands	r2, r3
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80b1 	beq.w	8002f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_GPIO_Init+0x2b8>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <HAL_GPIO_Init+0x2b8>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6193      	str	r3, [r2, #24]
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_GPIO_Init+0x2b8>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e24:	4a48      	ldr	r2, [pc, #288]	; (8002f48 <HAL_GPIO_Init+0x2bc>)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <HAL_GPIO_Init+0x2c0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d013      	beq.n	8002e78 <HAL_GPIO_Init+0x1ec>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3f      	ldr	r2, [pc, #252]	; (8002f50 <HAL_GPIO_Init+0x2c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00d      	beq.n	8002e74 <HAL_GPIO_Init+0x1e8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <HAL_GPIO_Init+0x2c8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <HAL_GPIO_Init+0x1e4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_GPIO_Init+0x1e0>
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e004      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	f002 0203 	and.w	r2, r2, #3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4093      	lsls	r3, r2
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e8a:	492f      	ldr	r1, [pc, #188]	; (8002f48 <HAL_GPIO_Init+0x2bc>)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	492c      	ldr	r1, [pc, #176]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eb2:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4928      	ldr	r1, [pc, #160]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4922      	ldr	r1, [pc, #136]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	491e      	ldr	r1, [pc, #120]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4918      	ldr	r1, [pc, #96]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	4914      	ldr	r1, [pc, #80]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d021      	beq.n	8002f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_GPIO_Init+0x2d0>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
 8002f28:	e021      	b.n	8002f6e <HAL_GPIO_Init+0x2e2>
 8002f2a:	bf00      	nop
 8002f2c:	10320000 	.word	0x10320000
 8002f30:	10310000 	.word	0x10310000
 8002f34:	10220000 	.word	0x10220000
 8002f38:	10210000 	.word	0x10210000
 8002f3c:	10120000 	.word	0x10120000
 8002f40:	10110000 	.word	0x10110000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40010800 	.word	0x40010800
 8002f50:	40010c00 	.word	0x40010c00
 8002f54:	40011000 	.word	0x40011000
 8002f58:	40011400 	.word	0x40011400
 8002f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	4909      	ldr	r1, [pc, #36]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	3301      	adds	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f47f ae8e 	bne.w	8002ca0 <HAL_GPIO_Init+0x14>
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	372c      	adds	r7, #44	; 0x2c
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fb0:	e003      	b.n	8002fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	041a      	lsls	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e272      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe4:	4b92      	ldr	r3, [pc, #584]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x12c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e24c      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x76>
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7f      	ldr	r2, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e02e      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x98>
 8003042:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7a      	ldr	r2, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b78      	ldr	r3, [pc, #480]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xbc>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a71      	ldr	r2, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fc08 	bl	80028b4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fc04 	bl	80028b4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e200      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe4>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7ff fbf4 	bl	80028b4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff fbf0 	bl	80028b4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1ec      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x10c>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1c0      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7ff fba9 	bl	80028b4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff fba5 	bl	80028b4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1a1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4927      	ldr	r1, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7ff fb88 	bl	80028b4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7ff fb84 	bl	80028b4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e180      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03a      	beq.n	8003248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7ff fb68 	bl	80028b4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7ff fb64 	bl	80028b4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e160      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f000 fad8 	bl	80037bc <RCC_Delay>
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7ff fb4e 	bl	80028b4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321a:	e00f      	b.n	800323c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7ff fb4a 	bl	80028b4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d908      	bls.n	800323c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e146      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	42420000 	.word	0x42420000
 8003238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e9      	bne.n	800321c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a6 	beq.w	80033a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a87      	ldr	r2, [pc, #540]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b7f      	ldr	r3, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7e      	ldr	r2, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7ff fb0b 	bl	80028b4 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7ff fb07 	bl	80028b4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e103      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x312>
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e02d      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x334>
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	e01c      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d10c      	bne.n	800331a <HAL_RCC_OscConfig+0x356>
 8003300:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4a5d      	ldr	r2, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	e00b      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a5a      	ldr	r2, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d015      	beq.n	8003366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7ff fabb 	bl	80028b4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7ff fab7 	bl	80028b4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0b1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <HAL_RCC_OscConfig+0x37e>
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7ff faa5 	bl	80028b4 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7ff faa1 	bl	80028b4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e09b      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d061      	beq.n	800347c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d146      	bne.n	800344e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7ff fa75 	bl	80028b4 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7ff fa71 	bl	80028b4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e06d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4921      	ldr	r1, [pc, #132]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a19      	ldr	r1, [r3, #32]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	430b      	orrs	r3, r1
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7ff fa45 	bl	80028b4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7ff fa41 	bl	80028b4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x46a>
 800344c:	e035      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff fa2e 	bl	80028b4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff fa2a 	bl	80028b4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e026      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x498>
 800347a:	e01e      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e019      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
 8003490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_OscConfig+0x500>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d0      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d910      	bls.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4965      	ldr	r1, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d040      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e073      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06b      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4936      	ldr	r1, [pc, #216]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7ff f97c 	bl	80028b4 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7ff f978 	bl	80028b4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e053      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d210      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4922      	ldr	r1, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1cc>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1d0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f8da 	bl	8002830 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	08008610 	.word	0x08008610
 8003694:	20000004 	.word	0x20000004
 8003698:	20000008 	.word	0x20000008

0800369c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b490      	push	{r4, r7}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_GetSysClockFreq+0xac>)
 80036a4:	1d3c      	adds	r4, r7, #4
 80036a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036ac:	f240 2301 	movw	r3, #513	; 0x201
 80036b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x46>
 80036da:	e02b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036de:	623b      	str	r3, [r7, #32]
      break;
 80036e0:	e02b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3328      	adds	r3, #40	; 0x28
 80036ec:	443b      	add	r3, r7
 80036ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	0c5b      	lsrs	r3, r3, #17
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	3328      	adds	r3, #40	; 0x28
 800370a:	443b      	add	r3, r7
 800370c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	fb03 f202 	mul.w	r2, r3, r2
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e004      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	623b      	str	r3, [r7, #32]
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003736:	623b      	str	r3, [r7, #32]
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6a3b      	ldr	r3, [r7, #32]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc90      	pop	{r4, r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	0800855c 	.word	0x0800855c
 800374c:	40021000 	.word	0x40021000
 8003750:	007a1200 	.word	0x007a1200
 8003754:	003d0900 	.word	0x003d0900

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <HAL_RCC_GetHCLKFreq+0x10>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff fff2 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	08008620 	.word	0x08008620

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffde 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	0adb      	lsrs	r3, r3, #11
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08008620 	.word	0x08008620

080037bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <RCC_Delay+0x34>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <RCC_Delay+0x38>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0a5b      	lsrs	r3, r3, #9
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037d8:	bf00      	nop
  }
  while (Delay --);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	60fa      	str	r2, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <RCC_Delay+0x1c>
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	20000004 	.word	0x20000004
 80037f4:	10624dd3 	.word	0x10624dd3

080037f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e041      	b.n	800388e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fe8c 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 fe56 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d001      	beq.n	80038b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e03a      	b.n	8003926 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIM_Base_Start_IT+0x98>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x58>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d009      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x58>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <HAL_TIM_Base_Start_IT+0x9c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x58>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <HAL_TIM_Base_Start_IT+0xa0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d111      	bne.n	8003914 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d010      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	e007      	b.n	8003924 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800

0800393c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f839 	bl	80039da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fdb4 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x24>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e022      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d109      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x3e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e015      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x58>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e008      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e05e      	b.n	8003b1c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x82>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x92>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f8af 	bl	8004c02 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <HAL_TIM_PWM_Start+0x138>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_TIM_PWM_Start+0x138>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0xfa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0xfa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <HAL_TIM_PWM_Start+0x13c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0xfa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_TIM_PWM_Start+0x140>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d010      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b08:	e007      	b.n	8003b1a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800

08003b30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e041      	b.n	8003bc6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f839 	bl	8003bce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 fcba 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0x1a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e013      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x42>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0x2a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e00b      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x42>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_IC_Start_IT+0x3a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e003      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x42>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_TIM_IC_Start_IT+0x54>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e013      	b.n	8003c5c <HAL_TIM_IC_Start_IT+0x7c>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d104      	bne.n	8003c44 <HAL_TIM_IC_Start_IT+0x64>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e00b      	b.n	8003c5c <HAL_TIM_IC_Start_IT+0x7c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d104      	bne.n	8003c54 <HAL_TIM_IC_Start_IT+0x74>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_IC_Start_IT+0x7c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d102      	bne.n	8003c6a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c64:	7bbb      	ldrb	r3, [r7, #14]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0b3      	b.n	8003dd6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_IC_Start_IT+0x9e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	e013      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0xc6>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_IC_Start_IT+0xae>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8c:	e00b      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0xc6>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_IC_Start_IT+0xbe>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9c:	e003      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0xc6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start_IT+0xd6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	e013      	b.n	8003cde <HAL_TIM_IC_Start_IT+0xfe>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_IC_Start_IT+0xe6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	e00b      	b.n	8003cde <HAL_TIM_IC_Start_IT+0xfe>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_IC_Start_IT+0xf6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd4:	e003      	b.n	8003cde <HAL_TIM_IC_Start_IT+0xfe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d841      	bhi.n	8003d68 <HAL_TIM_IC_Start_IT+0x188>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_TIM_IC_Start_IT+0x10c>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d69 	.word	0x08003d69
 8003cf4:	08003d69 	.word	0x08003d69
 8003cf8:	08003d69 	.word	0x08003d69
 8003cfc:	08003d33 	.word	0x08003d33
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d57 	.word	0x08003d57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0202 	orr.w	r2, r2, #2
 8003d2e:	60da      	str	r2, [r3, #12]
      break;
 8003d30:	e01b      	b.n	8003d6a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0204 	orr.w	r2, r2, #4
 8003d40:	60da      	str	r2, [r3, #12]
      break;
 8003d42:	e012      	b.n	8003d6a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0208 	orr.w	r2, r2, #8
 8003d52:	60da      	str	r2, [r3, #12]
      break;
 8003d54:	e009      	b.n	8003d6a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0210 	orr.w	r2, r2, #16
 8003d64:	60da      	str	r2, [r3, #12]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003d68:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ff45 	bl	8004c02 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_TIM_IC_Start_IT+0x200>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_TIM_IC_Start_IT+0x1c0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d009      	beq.n	8003da0 <HAL_TIM_IC_Start_IT+0x1c0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_TIM_IC_Start_IT+0x204>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_TIM_IC_Start_IT+0x1c0>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <HAL_TIM_IC_Start_IT+0x208>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d111      	bne.n	8003dc4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d010      	beq.n	8003dd4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	e007      	b.n	8003dd4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800

08003dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0202 	mvn.w	r2, #2
 8003e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fe f84a 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fb3a 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb40 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0204 	mvn.w	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe f820 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fb10 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb16 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0208 	mvn.w	r2, #8
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fff6 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fae6 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 faec 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd ffcc 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fabc 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fac2 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0201 	mvn.w	r2, #1
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd ffb7 	bl	8001ede <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 febf 	bl	8004d1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fa86 	bl	80044d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0220 	mvn.w	r2, #32
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fe8a 	bl	8004d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e082      	b.n	800411c <HAL_TIM_IC_ConfigChannel+0x120>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f000 fc42 	bl	80048bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020c 	bic.w	r2, r2, #12
 8004046:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6999      	ldr	r1, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	619a      	str	r2, [r3, #24]
 800405a:	e05a      	b.n	8004112 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d11c      	bne.n	800409c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f000 fcab 	bl	80049cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004084:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
 800409a:	e03a      	b.n	8004112 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11b      	bne.n	80040da <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f000 fcf6 	bl	8004aa2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 020c 	bic.w	r2, r2, #12
 80040c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69d9      	ldr	r1, [r3, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	61da      	str	r2, [r3, #28]
 80040d8:	e01b      	b.n	8004112 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f000 fd15 	bl	8004b18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	021a      	lsls	r2, r3, #8
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800413a:	2302      	movs	r3, #2
 800413c:	e0ac      	b.n	8004298 <HAL_TIM_PWM_ConfigChannel+0x174>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	f200 809f 	bhi.w	800428c <HAL_TIM_PWM_ConfigChannel+0x168>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004189 	.word	0x08004189
 8004158:	0800428d 	.word	0x0800428d
 800415c:	0800428d 	.word	0x0800428d
 8004160:	0800428d 	.word	0x0800428d
 8004164:	080041c9 	.word	0x080041c9
 8004168:	0800428d 	.word	0x0800428d
 800416c:	0800428d 	.word	0x0800428d
 8004170:	0800428d 	.word	0x0800428d
 8004174:	0800420b 	.word	0x0800420b
 8004178:	0800428d 	.word	0x0800428d
 800417c:	0800428d 	.word	0x0800428d
 8004180:	0800428d 	.word	0x0800428d
 8004184:	0800424b 	.word	0x0800424b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fa0c 	bl	80045ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0208 	orr.w	r2, r2, #8
 80041a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0204 	bic.w	r2, r2, #4
 80041b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	619a      	str	r2, [r3, #24]
      break;
 80041c6:	e062      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa52 	bl	8004678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6999      	ldr	r1, [r3, #24]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]
      break;
 8004208:	e041      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa9b 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0208 	orr.w	r2, r2, #8
 8004224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0204 	bic.w	r2, r2, #4
 8004234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69d9      	ldr	r1, [r3, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
      break;
 8004248:	e021      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fae5 	bl	8004820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69d9      	ldr	r1, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	021a      	lsls	r2, r3, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	61da      	str	r2, [r3, #28]
      break;
 800428a:	e000      	b.n	800428e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800428c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_TIM_ConfigClockSource+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e0b3      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x180>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	d03e      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0xd0>
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	f200 8087 	bhi.w	8004408 <HAL_TIM_ConfigClockSource+0x168>
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	f000 8085 	beq.w	800440c <HAL_TIM_ConfigClockSource+0x16c>
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d87f      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b70      	cmp	r3, #112	; 0x70
 800430a:	d01a      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0xa2>
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d87b      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b60      	cmp	r3, #96	; 0x60
 8004312:	d050      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x116>
 8004314:	2b60      	cmp	r3, #96	; 0x60
 8004316:	d877      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004318:	2b50      	cmp	r3, #80	; 0x50
 800431a:	d03c      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xf6>
 800431c:	2b50      	cmp	r3, #80	; 0x50
 800431e:	d873      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d058      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x136>
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d86f      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004328:	2b30      	cmp	r3, #48	; 0x30
 800432a:	d064      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x156>
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d86b      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d060      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x156>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d867      	bhi.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05c      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x156>
 800433c:	2b10      	cmp	r3, #16
 800433e:	d05a      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004340:	e062      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f000 fc37 	bl	8004bc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004364:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	609a      	str	r2, [r3, #8]
      break;
 800436e:	e04e      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f000 fc20 	bl	8004bc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004392:	609a      	str	r2, [r3, #8]
      break;
 8004394:	e03b      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 fae4 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2150      	movs	r1, #80	; 0x50
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fbee 	bl	8004b90 <TIM_ITRx_SetConfig>
      break;
 80043b4:	e02b      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f000 fb3e 	bl	8004a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2160      	movs	r1, #96	; 0x60
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fbde 	bl	8004b90 <TIM_ITRx_SetConfig>
      break;
 80043d4:	e01b      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f000 fac4 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fbce 	bl	8004b90 <TIM_ITRx_SetConfig>
      break;
 80043f4:	e00b      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f000 fbc5 	bl	8004b90 <TIM_ITRx_SetConfig>
        break;
 8004406:	e002      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800440c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d831      	bhi.n	80044a0 <HAL_TIM_ReadCapturedValue+0x78>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <HAL_TIM_ReadCapturedValue+0x1c>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004479 	.word	0x08004479
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080044a1 	.word	0x080044a1
 8004454:	08004483 	.word	0x08004483
 8004458:	080044a1 	.word	0x080044a1
 800445c:	080044a1 	.word	0x080044a1
 8004460:	080044a1 	.word	0x080044a1
 8004464:	0800448d 	.word	0x0800448d
 8004468:	080044a1 	.word	0x080044a1
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080044a1 	.word	0x080044a1
 8004474:	08004497 	.word	0x08004497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	60fb      	str	r3, [r7, #12]

      break;
 8004480:	e00f      	b.n	80044a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	60fb      	str	r3, [r7, #12]

      break;
 800448a:	e00a      	b.n	80044a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	60fb      	str	r3, [r7, #12]

      break;
 8004494:	e005      	b.n	80044a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	60fb      	str	r3, [r7, #12]

      break;
 800449e:	e000      	b.n	80044a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044a0:	bf00      	nop
  }

  return tmpreg;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
	...

080044e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_Base_SetConfig+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_Base_SetConfig+0xc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <TIM_Base_SetConfig+0xbc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <TIM_Base_SetConfig+0xc0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	615a      	str	r2, [r3, #20]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800

080045ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0302 	bic.w	r3, r3, #2
 80045f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <TIM_OC1_SetConfig+0xc8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10c      	bne.n	8004622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0308 	bic.w	r3, r3, #8
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <TIM_OC1_SetConfig+0xc8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00

08004678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0210 	bic.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0320 	bic.w	r3, r3, #32
 80046c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <TIM_OC2_SetConfig+0xd0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10d      	bne.n	80046f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <TIM_OC2_SetConfig+0xd0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d113      	bne.n	8004724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <TIM_OC3_SetConfig+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10d      	bne.n	80047c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <TIM_OC3_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00

08004820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800486a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <TIM_OC4_SetConfig+0x98>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00

080048bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <TIM_TI1_SetConfig+0xa8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_TI1_SetConfig+0x46>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d007      	beq.n	8004902 <TIM_TI1_SetConfig+0x46>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <TIM_TI1_SetConfig+0xac>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_TI1_SetConfig+0x46>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <TIM_TI1_SetConfig+0xb0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <TIM_TI1_SetConfig+0x4a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <TIM_TI1_SetConfig+0x4c>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e003      	b.n	8004926 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	b2db      	uxtb	r3, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 030a 	and.w	r3, r3, #10
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800

08004970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0210 	bic.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 0210 	bic.w	r2, r3, #16
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	031b      	lsls	r3, r3, #12
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ade:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	031b      	lsls	r3, r3, #12
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	031b      	lsls	r3, r3, #12
 8004b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f043 0307 	orr.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2201      	movs	r2, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	401a      	ands	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e046      	b.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800

08004d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03f      	b.n	8004dbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd fcdc 	bl	8002710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	; 0x24
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fc85 	bl	8005680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	; 0x28
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d17c      	bne.n	8004ee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_UART_Transmit+0x2c>
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e075      	b.n	8004ee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Transmit+0x3e>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e06e      	b.n	8004ee2 <HAL_UART_Transmit+0x11c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fd fd4b 	bl	80028b4 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d108      	bne.n	8004e48 <HAL_UART_Transmit+0x82>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e58:	e02a      	b.n	8004eb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fa38 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e036      	b.n	8004ee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e007      	b.n	8004ea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1cf      	bne.n	8004e5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2140      	movs	r1, #64	; 0x40
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fa08 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e006      	b.n	8004ee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d11d      	bne.n	8004f40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_UART_Receive_IT+0x26>
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e016      	b.n	8004f42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Receive_IT+0x38>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e00f      	b.n	8004f42 <HAL_UART_Receive_IT+0x58>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa19 	bl	800536e <UART_Start_Receive_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_UART_IRQHandler+0x52>
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fac9 	bl	800552e <UART_Receive_IT>
      return;
 8004f9c:	e17b      	b.n	8005296 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80b1 	beq.w	8005108 <HAL_UART_IRQHandler+0x1bc>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_UART_IRQHandler+0x70>
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80a6 	beq.w	8005108 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_UART_IRQHandler+0x90>
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_UART_IRQHandler+0xb0>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f043 0202 	orr.w	r2, r3, #2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_UART_IRQHandler+0xd0>
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	f043 0204 	orr.w	r2, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00f      	beq.n	8005046 <HAL_UART_IRQHandler+0xfa>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_IRQHandler+0xee>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0208 	orr.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 811e 	beq.w	800528c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_UART_IRQHandler+0x11e>
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fa62 	bl	800552e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <HAL_UART_IRQHandler+0x146>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d031      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9a4 	bl	80053e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d023      	beq.n	80050ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	4a76      	ldr	r2, [pc, #472]	; (800529c <HAL_UART_IRQHandler+0x350>)
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fd68 	bl	8002ba0 <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00e      	b.n	8005104 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8e3 	bl	80052b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00a      	b.n	8005104 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8df 	bl	80052b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e006      	b.n	8005104 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8db 	bl	80052b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005102:	e0c3      	b.n	800528c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	bf00      	nop
    return;
 8005106:	e0c1      	b.n	800528c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 80a1 	bne.w	8005254 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 809b 	beq.w	8005254 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8095 	beq.w	8005254 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04e      	beq.n	80051ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005158:	8a3b      	ldrh	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8098 	beq.w	8005290 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005164:	8a3a      	ldrh	r2, [r7, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	f080 8092 	bcs.w	8005290 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8a3a      	ldrh	r2, [r7, #16]
 8005170:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b20      	cmp	r3, #32
 800517a:	d02b      	beq.n	80051d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0210 	bic.w	r2, r2, #16
 80051c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fcab 	bl	8002b2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f86d 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051ea:	e051      	b.n	8005290 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d047      	beq.n	8005294 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005204:	8a7b      	ldrh	r3, [r7, #18]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d044      	beq.n	8005294 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005218:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0210 	bic.w	r2, r2, #16
 8005246:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005248:	8a7b      	ldrh	r3, [r7, #18]
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f839 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005252:	e01f      	b.n	8005294 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_UART_IRQHandler+0x324>
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8f9 	bl	8005460 <UART_Transmit_IT>
    return;
 800526e:	e012      	b.n	8005296 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <HAL_UART_IRQHandler+0x34a>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f93a 	bl	80054fe <UART_EndTransmit_IT>
    return;
 800528a:	e004      	b.n	8005296 <HAL_UART_IRQHandler+0x34a>
    return;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_UART_IRQHandler+0x34a>
      return;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_UART_IRQHandler+0x34a>
      return;
 8005294:	bf00      	nop
  }
}
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08005439 	.word	0x08005439

080052a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ea:	e02c      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d028      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x30>
 80052fa:	f7fd fadb 	bl	80028b4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	d21d      	bcs.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005318:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e00f      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	429a      	cmp	r2, r3
 8005362:	d0c3      	beq.n	80052ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2222      	movs	r2, #34	; 0x22
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0220 	orr.w	r2, r2, #32
 80053d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0210 	bic.w	r2, r2, #16
 800541e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ff2d 	bl	80052b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b21      	cmp	r3, #33	; 0x21
 8005472:	d13e      	bne.n	80054f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547c:	d114      	bne.n	80054a8 <UART_Transmit_IT+0x48>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d110      	bne.n	80054a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]
 80054a6:	e008      	b.n	80054ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6211      	str	r1, [r2, #32]
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4619      	mov	r1, r3
 80054c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10f      	bne.n	80054ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff febe 	bl	80052a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b22      	cmp	r3, #34	; 0x22
 8005540:	f040 8099 	bne.w	8005676 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d117      	bne.n	800557e <UART_Receive_IT+0x50>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d113      	bne.n	800557e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	b29a      	uxth	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	1c9a      	adds	r2, r3, #2
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
 800557c:	e026      	b.n	80055cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005590:	d007      	beq.n	80055a2 <UART_Receive_IT+0x74>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <UART_Receive_IT+0x82>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e008      	b.n	80055c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4619      	mov	r1, r3
 80055da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d148      	bne.n	8005672 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0220 	bic.w	r2, r2, #32
 80055ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d123      	bne.n	8005668 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0210 	bic.w	r2, r2, #16
 8005634:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d10a      	bne.n	800565a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fe2f 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
 8005666:	e002      	b.n	800566e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fc fdbd 	bl	80021e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e002      	b.n	8005678 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
  }
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056ba:	f023 030c 	bic.w	r3, r3, #12
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <UART_SetConfig+0x114>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7fe f854 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	e002      	b.n	80056f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe f83c 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80056f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009a      	lsls	r2, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	4a22      	ldr	r2, [pc, #136]	; (8005798 <UART_SetConfig+0x118>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	0119      	lsls	r1, r3, #4
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fbb2 f2f3 	udiv	r2, r2, r3
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <UART_SetConfig+0x118>)
 800572e:	fba3 0302 	umull	r0, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2064      	movs	r0, #100	; 0x64
 8005736:	fb00 f303 	mul.w	r3, r0, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	3332      	adds	r3, #50	; 0x32
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <UART_SetConfig+0x118>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800574c:	4419      	add	r1, r3
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fbb2 f2f3 	udiv	r2, r2, r3
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <UART_SetConfig+0x118>)
 8005766:	fba3 0302 	umull	r0, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2064      	movs	r0, #100	; 0x64
 800576e:	fb00 f303 	mul.w	r3, r0, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a07      	ldr	r2, [pc, #28]	; (8005798 <UART_SetConfig+0x118>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	440a      	add	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40013800 	.word	0x40013800
 8005798:	51eb851f 	.word	0x51eb851f

0800579c <__cvt>:
 800579c:	2b00      	cmp	r3, #0
 800579e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a2:	461f      	mov	r7, r3
 80057a4:	bfbb      	ittet	lt
 80057a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	461f      	movlt	r7, r3
 80057ac:	2300      	movge	r3, #0
 80057ae:	232d      	movlt	r3, #45	; 0x2d
 80057b0:	b088      	sub	sp, #32
 80057b2:	4614      	mov	r4, r2
 80057b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057b8:	7013      	strb	r3, [r2, #0]
 80057ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80057c0:	f023 0820 	bic.w	r8, r3, #32
 80057c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057c8:	d005      	beq.n	80057d6 <__cvt+0x3a>
 80057ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ce:	d100      	bne.n	80057d2 <__cvt+0x36>
 80057d0:	3501      	adds	r5, #1
 80057d2:	2302      	movs	r3, #2
 80057d4:	e000      	b.n	80057d8 <__cvt+0x3c>
 80057d6:	2303      	movs	r3, #3
 80057d8:	aa07      	add	r2, sp, #28
 80057da:	9204      	str	r2, [sp, #16]
 80057dc:	aa06      	add	r2, sp, #24
 80057de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057e2:	e9cd 3500 	strd	r3, r5, [sp]
 80057e6:	4622      	mov	r2, r4
 80057e8:	463b      	mov	r3, r7
 80057ea:	f000 fe71 	bl	80064d0 <_dtoa_r>
 80057ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057f2:	4606      	mov	r6, r0
 80057f4:	d102      	bne.n	80057fc <__cvt+0x60>
 80057f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057f8:	07db      	lsls	r3, r3, #31
 80057fa:	d522      	bpl.n	8005842 <__cvt+0xa6>
 80057fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005800:	eb06 0905 	add.w	r9, r6, r5
 8005804:	d110      	bne.n	8005828 <__cvt+0x8c>
 8005806:	7833      	ldrb	r3, [r6, #0]
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d10a      	bne.n	8005822 <__cvt+0x86>
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4620      	mov	r0, r4
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005818:	b918      	cbnz	r0, 8005822 <__cvt+0x86>
 800581a:	f1c5 0501 	rsb	r5, r5, #1
 800581e:	f8ca 5000 	str.w	r5, [sl]
 8005822:	f8da 3000 	ldr.w	r3, [sl]
 8005826:	4499      	add	r9, r3
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	4620      	mov	r0, r4
 800582e:	4639      	mov	r1, r7
 8005830:	f7fb f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8005834:	b108      	cbz	r0, 800583a <__cvt+0x9e>
 8005836:	f8cd 901c 	str.w	r9, [sp, #28]
 800583a:	2230      	movs	r2, #48	; 0x30
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	454b      	cmp	r3, r9
 8005840:	d307      	bcc.n	8005852 <__cvt+0xb6>
 8005842:	4630      	mov	r0, r6
 8005844:	9b07      	ldr	r3, [sp, #28]
 8005846:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005848:	1b9b      	subs	r3, r3, r6
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	b008      	add	sp, #32
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	9107      	str	r1, [sp, #28]
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e7f0      	b.n	800583c <__cvt+0xa0>

0800585a <__exponent>:
 800585a:	4603      	mov	r3, r0
 800585c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800585e:	2900      	cmp	r1, #0
 8005860:	f803 2b02 	strb.w	r2, [r3], #2
 8005864:	bfb6      	itet	lt
 8005866:	222d      	movlt	r2, #45	; 0x2d
 8005868:	222b      	movge	r2, #43	; 0x2b
 800586a:	4249      	neglt	r1, r1
 800586c:	2909      	cmp	r1, #9
 800586e:	7042      	strb	r2, [r0, #1]
 8005870:	dd2a      	ble.n	80058c8 <__exponent+0x6e>
 8005872:	f10d 0207 	add.w	r2, sp, #7
 8005876:	4617      	mov	r7, r2
 8005878:	260a      	movs	r6, #10
 800587a:	fb91 f5f6 	sdiv	r5, r1, r6
 800587e:	4694      	mov	ip, r2
 8005880:	fb06 1415 	mls	r4, r6, r5, r1
 8005884:	3430      	adds	r4, #48	; 0x30
 8005886:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800588a:	460c      	mov	r4, r1
 800588c:	2c63      	cmp	r4, #99	; 0x63
 800588e:	4629      	mov	r1, r5
 8005890:	f102 32ff 	add.w	r2, r2, #4294967295
 8005894:	dcf1      	bgt.n	800587a <__exponent+0x20>
 8005896:	3130      	adds	r1, #48	; 0x30
 8005898:	f1ac 0402 	sub.w	r4, ip, #2
 800589c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058a0:	4622      	mov	r2, r4
 80058a2:	1c41      	adds	r1, r0, #1
 80058a4:	42ba      	cmp	r2, r7
 80058a6:	d30a      	bcc.n	80058be <__exponent+0x64>
 80058a8:	f10d 0209 	add.w	r2, sp, #9
 80058ac:	eba2 020c 	sub.w	r2, r2, ip
 80058b0:	42bc      	cmp	r4, r7
 80058b2:	bf88      	it	hi
 80058b4:	2200      	movhi	r2, #0
 80058b6:	4413      	add	r3, r2
 80058b8:	1a18      	subs	r0, r3, r0
 80058ba:	b003      	add	sp, #12
 80058bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80058c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80058c6:	e7ed      	b.n	80058a4 <__exponent+0x4a>
 80058c8:	2330      	movs	r3, #48	; 0x30
 80058ca:	3130      	adds	r1, #48	; 0x30
 80058cc:	7083      	strb	r3, [r0, #2]
 80058ce:	70c1      	strb	r1, [r0, #3]
 80058d0:	1d03      	adds	r3, r0, #4
 80058d2:	e7f1      	b.n	80058b8 <__exponent+0x5e>

080058d4 <_printf_float>:
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	b091      	sub	sp, #68	; 0x44
 80058da:	460c      	mov	r4, r1
 80058dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058e0:	4616      	mov	r6, r2
 80058e2:	461f      	mov	r7, r3
 80058e4:	4605      	mov	r5, r0
 80058e6:	f000 fce5 	bl	80062b4 <_localeconv_r>
 80058ea:	6803      	ldr	r3, [r0, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	f7fa fc2e 	bl	8000150 <strlen>
 80058f4:	2300      	movs	r3, #0
 80058f6:	930e      	str	r3, [sp, #56]	; 0x38
 80058f8:	f8d8 3000 	ldr.w	r3, [r8]
 80058fc:	900a      	str	r0, [sp, #40]	; 0x28
 80058fe:	3307      	adds	r3, #7
 8005900:	f023 0307 	bic.w	r3, r3, #7
 8005904:	f103 0208 	add.w	r2, r3, #8
 8005908:	f894 9018 	ldrb.w	r9, [r4, #24]
 800590c:	f8d4 b000 	ldr.w	fp, [r4]
 8005910:	f8c8 2000 	str.w	r2, [r8]
 8005914:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005918:	4652      	mov	r2, sl
 800591a:	4643      	mov	r3, r8
 800591c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005920:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005924:	930b      	str	r3, [sp, #44]	; 0x2c
 8005926:	f04f 32ff 	mov.w	r2, #4294967295
 800592a:	4650      	mov	r0, sl
 800592c:	4b9c      	ldr	r3, [pc, #624]	; (8005ba0 <_printf_float+0x2cc>)
 800592e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005930:	f7fb f86c 	bl	8000a0c <__aeabi_dcmpun>
 8005934:	bb70      	cbnz	r0, 8005994 <_printf_float+0xc0>
 8005936:	f04f 32ff 	mov.w	r2, #4294967295
 800593a:	4650      	mov	r0, sl
 800593c:	4b98      	ldr	r3, [pc, #608]	; (8005ba0 <_printf_float+0x2cc>)
 800593e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005940:	f7fb f846 	bl	80009d0 <__aeabi_dcmple>
 8005944:	bb30      	cbnz	r0, 8005994 <_printf_float+0xc0>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4650      	mov	r0, sl
 800594c:	4641      	mov	r1, r8
 800594e:	f7fb f835 	bl	80009bc <__aeabi_dcmplt>
 8005952:	b110      	cbz	r0, 800595a <_printf_float+0x86>
 8005954:	232d      	movs	r3, #45	; 0x2d
 8005956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595a:	4a92      	ldr	r2, [pc, #584]	; (8005ba4 <_printf_float+0x2d0>)
 800595c:	4b92      	ldr	r3, [pc, #584]	; (8005ba8 <_printf_float+0x2d4>)
 800595e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005962:	bf94      	ite	ls
 8005964:	4690      	movls	r8, r2
 8005966:	4698      	movhi	r8, r3
 8005968:	2303      	movs	r3, #3
 800596a:	f04f 0a00 	mov.w	sl, #0
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	f02b 0304 	bic.w	r3, fp, #4
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	4633      	mov	r3, r6
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	9700      	str	r7, [sp, #0]
 800597e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005980:	f000 f9d6 	bl	8005d30 <_printf_common>
 8005984:	3001      	adds	r0, #1
 8005986:	f040 8090 	bne.w	8005aaa <_printf_float+0x1d6>
 800598a:	f04f 30ff 	mov.w	r0, #4294967295
 800598e:	b011      	add	sp, #68	; 0x44
 8005990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005994:	4652      	mov	r2, sl
 8005996:	4643      	mov	r3, r8
 8005998:	4650      	mov	r0, sl
 800599a:	4641      	mov	r1, r8
 800599c:	f7fb f836 	bl	8000a0c <__aeabi_dcmpun>
 80059a0:	b148      	cbz	r0, 80059b6 <_printf_float+0xe2>
 80059a2:	f1b8 0f00 	cmp.w	r8, #0
 80059a6:	bfb8      	it	lt
 80059a8:	232d      	movlt	r3, #45	; 0x2d
 80059aa:	4a80      	ldr	r2, [pc, #512]	; (8005bac <_printf_float+0x2d8>)
 80059ac:	bfb8      	it	lt
 80059ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059b2:	4b7f      	ldr	r3, [pc, #508]	; (8005bb0 <_printf_float+0x2dc>)
 80059b4:	e7d3      	b.n	800595e <_printf_float+0x8a>
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	d142      	bne.n	8005a46 <_printf_float+0x172>
 80059c0:	2306      	movs	r3, #6
 80059c2:	6063      	str	r3, [r4, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	9206      	str	r2, [sp, #24]
 80059c8:	aa0e      	add	r2, sp, #56	; 0x38
 80059ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059ce:	aa0d      	add	r2, sp, #52	; 0x34
 80059d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059d4:	9203      	str	r2, [sp, #12]
 80059d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	4652      	mov	r2, sl
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4628      	mov	r0, r5
 80059e8:	4643      	mov	r3, r8
 80059ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80059ec:	f7ff fed6 	bl	800579c <__cvt>
 80059f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059f2:	4680      	mov	r8, r0
 80059f4:	2947      	cmp	r1, #71	; 0x47
 80059f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059f8:	d108      	bne.n	8005a0c <_printf_float+0x138>
 80059fa:	1cc8      	adds	r0, r1, #3
 80059fc:	db02      	blt.n	8005a04 <_printf_float+0x130>
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	4299      	cmp	r1, r3
 8005a02:	dd40      	ble.n	8005a86 <_printf_float+0x1b2>
 8005a04:	f1a9 0902 	sub.w	r9, r9, #2
 8005a08:	fa5f f989 	uxtb.w	r9, r9
 8005a0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a10:	d81f      	bhi.n	8005a52 <_printf_float+0x17e>
 8005a12:	464a      	mov	r2, r9
 8005a14:	3901      	subs	r1, #1
 8005a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005a1c:	f7ff ff1d 	bl	800585a <__exponent>
 8005a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a22:	4682      	mov	sl, r0
 8005a24:	1813      	adds	r3, r2, r0
 8005a26:	2a01      	cmp	r2, #1
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	dc02      	bgt.n	8005a32 <_printf_float+0x15e>
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	07d2      	lsls	r2, r2, #31
 8005a30:	d501      	bpl.n	8005a36 <_printf_float+0x162>
 8005a32:	3301      	adds	r3, #1
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d09b      	beq.n	8005976 <_printf_float+0xa2>
 8005a3e:	232d      	movs	r3, #45	; 0x2d
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a44:	e797      	b.n	8005976 <_printf_float+0xa2>
 8005a46:	2947      	cmp	r1, #71	; 0x47
 8005a48:	d1bc      	bne.n	80059c4 <_printf_float+0xf0>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ba      	bne.n	80059c4 <_printf_float+0xf0>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7b7      	b.n	80059c2 <_printf_float+0xee>
 8005a52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a56:	d118      	bne.n	8005a8a <_printf_float+0x1b6>
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	dd0b      	ble.n	8005a76 <_printf_float+0x1a2>
 8005a5e:	6121      	str	r1, [r4, #16]
 8005a60:	b913      	cbnz	r3, 8005a68 <_printf_float+0x194>
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	07d0      	lsls	r0, r2, #31
 8005a66:	d502      	bpl.n	8005a6e <_printf_float+0x19a>
 8005a68:	3301      	adds	r3, #1
 8005a6a:	440b      	add	r3, r1
 8005a6c:	6123      	str	r3, [r4, #16]
 8005a6e:	f04f 0a00 	mov.w	sl, #0
 8005a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a74:	e7df      	b.n	8005a36 <_printf_float+0x162>
 8005a76:	b913      	cbnz	r3, 8005a7e <_printf_float+0x1aa>
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	07d2      	lsls	r2, r2, #31
 8005a7c:	d501      	bpl.n	8005a82 <_printf_float+0x1ae>
 8005a7e:	3302      	adds	r3, #2
 8005a80:	e7f4      	b.n	8005a6c <_printf_float+0x198>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7f2      	b.n	8005a6c <_printf_float+0x198>
 8005a86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	db05      	blt.n	8005a9c <_printf_float+0x1c8>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	6121      	str	r1, [r4, #16]
 8005a94:	07d8      	lsls	r0, r3, #31
 8005a96:	d5ea      	bpl.n	8005a6e <_printf_float+0x19a>
 8005a98:	1c4b      	adds	r3, r1, #1
 8005a9a:	e7e7      	b.n	8005a6c <_printf_float+0x198>
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	bfcc      	ite	gt
 8005aa0:	2201      	movgt	r2, #1
 8005aa2:	f1c1 0202 	rsble	r2, r1, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	e7e0      	b.n	8005a6c <_printf_float+0x198>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	055a      	lsls	r2, r3, #21
 8005aae:	d407      	bmi.n	8005ac0 <_printf_float+0x1ec>
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	4642      	mov	r2, r8
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	d12b      	bne.n	8005b16 <_printf_float+0x242>
 8005abe:	e764      	b.n	800598a <_printf_float+0xb6>
 8005ac0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ac4:	f240 80dd 	bls.w	8005c82 <_printf_float+0x3ae>
 8005ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f7fa ff6a 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d033      	beq.n	8005b40 <_printf_float+0x26c>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <_printf_float+0x2e0>)
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f af51 	beq.w	800598a <_printf_float+0xb6>
 8005ae8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005aec:	429a      	cmp	r2, r3
 8005aee:	db02      	blt.n	8005af6 <_printf_float+0x222>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	07d8      	lsls	r0, r3, #31
 8005af4:	d50f      	bpl.n	8005b16 <_printf_float+0x242>
 8005af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f af42 	beq.w	800598a <_printf_float+0xb6>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	f104 091a 	add.w	r9, r4, #26
 8005b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b10:	3b01      	subs	r3, #1
 8005b12:	4543      	cmp	r3, r8
 8005b14:	dc09      	bgt.n	8005b2a <_printf_float+0x256>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	079b      	lsls	r3, r3, #30
 8005b1a:	f100 8104 	bmi.w	8005d26 <_printf_float+0x452>
 8005b1e:	68e0      	ldr	r0, [r4, #12]
 8005b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b22:	4298      	cmp	r0, r3
 8005b24:	bfb8      	it	lt
 8005b26:	4618      	movlt	r0, r3
 8005b28:	e731      	b.n	800598e <_printf_float+0xba>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	464a      	mov	r2, r9
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f af28 	beq.w	800598a <_printf_float+0xb6>
 8005b3a:	f108 0801 	add.w	r8, r8, #1
 8005b3e:	e7e6      	b.n	8005b0e <_printf_float+0x23a>
 8005b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dc38      	bgt.n	8005bb8 <_printf_float+0x2e4>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <_printf_float+0x2e0>)
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f af1a 	beq.w	800598a <_printf_float+0xb6>
 8005b56:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	d102      	bne.n	8005b64 <_printf_float+0x290>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07d9      	lsls	r1, r3, #31
 8005b62:	d5d8      	bpl.n	8005b16 <_printf_float+0x242>
 8005b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af0b 	beq.w	800598a <_printf_float+0xb6>
 8005b74:	f04f 0900 	mov.w	r9, #0
 8005b78:	f104 0a1a 	add.w	sl, r4, #26
 8005b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b7e:	425b      	negs	r3, r3
 8005b80:	454b      	cmp	r3, r9
 8005b82:	dc01      	bgt.n	8005b88 <_printf_float+0x2b4>
 8005b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b86:	e794      	b.n	8005ab2 <_printf_float+0x1de>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f aef9 	beq.w	800598a <_printf_float+0xb6>
 8005b98:	f109 0901 	add.w	r9, r9, #1
 8005b9c:	e7ee      	b.n	8005b7c <_printf_float+0x2a8>
 8005b9e:	bf00      	nop
 8005ba0:	7fefffff 	.word	0x7fefffff
 8005ba4:	08008628 	.word	0x08008628
 8005ba8:	0800862c 	.word	0x0800862c
 8005bac:	08008630 	.word	0x08008630
 8005bb0:	08008634 	.word	0x08008634
 8005bb4:	08008638 	.word	0x08008638
 8005bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bfa8      	it	ge
 8005bc0:	461a      	movge	r2, r3
 8005bc2:	2a00      	cmp	r2, #0
 8005bc4:	4691      	mov	r9, r2
 8005bc6:	dc37      	bgt.n	8005c38 <_printf_float+0x364>
 8005bc8:	f04f 0b00 	mov.w	fp, #0
 8005bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bd0:	f104 021a 	add.w	r2, r4, #26
 8005bd4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bd8:	ebaa 0309 	sub.w	r3, sl, r9
 8005bdc:	455b      	cmp	r3, fp
 8005bde:	dc33      	bgt.n	8005c48 <_printf_float+0x374>
 8005be0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005be4:	429a      	cmp	r2, r3
 8005be6:	db3b      	blt.n	8005c60 <_printf_float+0x38c>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	07da      	lsls	r2, r3, #31
 8005bec:	d438      	bmi.n	8005c60 <_printf_float+0x38c>
 8005bee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005bf2:	eba2 0903 	sub.w	r9, r2, r3
 8005bf6:	eba2 020a 	sub.w	r2, r2, sl
 8005bfa:	4591      	cmp	r9, r2
 8005bfc:	bfa8      	it	ge
 8005bfe:	4691      	movge	r9, r2
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	dc34      	bgt.n	8005c70 <_printf_float+0x39c>
 8005c06:	f04f 0800 	mov.w	r8, #0
 8005c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0e:	f104 0a1a 	add.w	sl, r4, #26
 8005c12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	eba3 0309 	sub.w	r3, r3, r9
 8005c1c:	4543      	cmp	r3, r8
 8005c1e:	f77f af7a 	ble.w	8005b16 <_printf_float+0x242>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4652      	mov	r2, sl
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f aeac 	beq.w	800598a <_printf_float+0xb6>
 8005c32:	f108 0801 	add.w	r8, r8, #1
 8005c36:	e7ec      	b.n	8005c12 <_printf_float+0x33e>
 8005c38:	4613      	mov	r3, r2
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	d1c0      	bne.n	8005bc8 <_printf_float+0x2f4>
 8005c46:	e6a0      	b.n	800598a <_printf_float+0xb6>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f ae99 	beq.w	800598a <_printf_float+0xb6>
 8005c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c5a:	f10b 0b01 	add.w	fp, fp, #1
 8005c5e:	e7b9      	b.n	8005bd4 <_printf_float+0x300>
 8005c60:	4631      	mov	r1, r6
 8005c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d1bf      	bne.n	8005bee <_printf_float+0x31a>
 8005c6e:	e68c      	b.n	800598a <_printf_float+0xb6>
 8005c70:	464b      	mov	r3, r9
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	eb08 020a 	add.w	r2, r8, sl
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1c2      	bne.n	8005c06 <_printf_float+0x332>
 8005c80:	e683      	b.n	800598a <_printf_float+0xb6>
 8005c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c84:	2a01      	cmp	r2, #1
 8005c86:	dc01      	bgt.n	8005c8c <_printf_float+0x3b8>
 8005c88:	07db      	lsls	r3, r3, #31
 8005c8a:	d539      	bpl.n	8005d00 <_printf_float+0x42c>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4642      	mov	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f ae77 	beq.w	800598a <_printf_float+0xb6>
 8005c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f ae6f 	beq.w	800598a <_printf_float+0xb6>
 8005cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005cb8:	f7fa fe76 	bl	80009a8 <__aeabi_dcmpeq>
 8005cbc:	b9d8      	cbnz	r0, 8005cf6 <_printf_float+0x422>
 8005cbe:	f109 33ff 	add.w	r3, r9, #4294967295
 8005cc2:	f108 0201 	add.w	r2, r8, #1
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b8      	blx	r7
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d10e      	bne.n	8005cee <_printf_float+0x41a>
 8005cd0:	e65b      	b.n	800598a <_printf_float+0xb6>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	464a      	mov	r2, r9
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f ae54 	beq.w	800598a <_printf_float+0xb6>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	4543      	cmp	r3, r8
 8005cec:	dcf1      	bgt.n	8005cd2 <_printf_float+0x3fe>
 8005cee:	4653      	mov	r3, sl
 8005cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cf4:	e6de      	b.n	8005ab4 <_printf_float+0x1e0>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	f104 091a 	add.w	r9, r4, #26
 8005cfe:	e7f2      	b.n	8005ce6 <_printf_float+0x412>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4642      	mov	r2, r8
 8005d04:	e7df      	b.n	8005cc6 <_printf_float+0x3f2>
 8005d06:	2301      	movs	r3, #1
 8005d08:	464a      	mov	r2, r9
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f ae3a 	beq.w	800598a <_printf_float+0xb6>
 8005d16:	f108 0801 	add.w	r8, r8, #1
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	4543      	cmp	r3, r8
 8005d22:	dcf0      	bgt.n	8005d06 <_printf_float+0x432>
 8005d24:	e6fb      	b.n	8005b1e <_printf_float+0x24a>
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	f104 0919 	add.w	r9, r4, #25
 8005d2e:	e7f4      	b.n	8005d1a <_printf_float+0x446>

08005d30 <_printf_common>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	4616      	mov	r6, r2
 8005d36:	4699      	mov	r9, r3
 8005d38:	688a      	ldr	r2, [r1, #8]
 8005d3a:	690b      	ldr	r3, [r1, #16]
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	bfb8      	it	lt
 8005d42:	4613      	movlt	r3, r2
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d50:	b10a      	cbz	r2, 8005d56 <_printf_common+0x26>
 8005d52:	3301      	adds	r3, #1
 8005d54:	6033      	str	r3, [r6, #0]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	0699      	lsls	r1, r3, #26
 8005d5a:	bf42      	ittt	mi
 8005d5c:	6833      	ldrmi	r3, [r6, #0]
 8005d5e:	3302      	addmi	r3, #2
 8005d60:	6033      	strmi	r3, [r6, #0]
 8005d62:	6825      	ldr	r5, [r4, #0]
 8005d64:	f015 0506 	ands.w	r5, r5, #6
 8005d68:	d106      	bne.n	8005d78 <_printf_common+0x48>
 8005d6a:	f104 0a19 	add.w	sl, r4, #25
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	6832      	ldr	r2, [r6, #0]
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dc2b      	bgt.n	8005dd0 <_printf_common+0xa0>
 8005d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d7c:	1e13      	subs	r3, r2, #0
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	bf18      	it	ne
 8005d82:	2301      	movne	r3, #1
 8005d84:	0692      	lsls	r2, r2, #26
 8005d86:	d430      	bmi.n	8005dea <_printf_common+0xba>
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d90:	47c0      	blx	r8
 8005d92:	3001      	adds	r0, #1
 8005d94:	d023      	beq.n	8005dde <_printf_common+0xae>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	6922      	ldr	r2, [r4, #16]
 8005d9a:	f003 0306 	and.w	r3, r3, #6
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	bf14      	ite	ne
 8005da2:	2500      	movne	r5, #0
 8005da4:	6833      	ldreq	r3, [r6, #0]
 8005da6:	f04f 0600 	mov.w	r6, #0
 8005daa:	bf08      	it	eq
 8005dac:	68e5      	ldreq	r5, [r4, #12]
 8005dae:	f104 041a 	add.w	r4, r4, #26
 8005db2:	bf08      	it	eq
 8005db4:	1aed      	subeq	r5, r5, r3
 8005db6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dba:	bf08      	it	eq
 8005dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	bfc4      	itt	gt
 8005dc4:	1a9b      	subgt	r3, r3, r2
 8005dc6:	18ed      	addgt	r5, r5, r3
 8005dc8:	42b5      	cmp	r5, r6
 8005dca:	d11a      	bne.n	8005e02 <_printf_common+0xd2>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e008      	b.n	8005de2 <_printf_common+0xb2>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d103      	bne.n	8005de6 <_printf_common+0xb6>
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de6:	3501      	adds	r5, #1
 8005de8:	e7c1      	b.n	8005d6e <_printf_common+0x3e>
 8005dea:	2030      	movs	r0, #48	; 0x30
 8005dec:	18e1      	adds	r1, r4, r3
 8005dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005df8:	4422      	add	r2, r4
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e00:	e7c2      	b.n	8005d88 <_printf_common+0x58>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4622      	mov	r2, r4
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d0e6      	beq.n	8005dde <_printf_common+0xae>
 8005e10:	3601      	adds	r6, #1
 8005e12:	e7d9      	b.n	8005dc8 <_printf_common+0x98>

08005e14 <_printf_i>:
 8005e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	7e0f      	ldrb	r7, [r1, #24]
 8005e1a:	4691      	mov	r9, r2
 8005e1c:	2f78      	cmp	r7, #120	; 0x78
 8005e1e:	4680      	mov	r8, r0
 8005e20:	460c      	mov	r4, r1
 8005e22:	469a      	mov	sl, r3
 8005e24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e2a:	d807      	bhi.n	8005e3c <_printf_i+0x28>
 8005e2c:	2f62      	cmp	r7, #98	; 0x62
 8005e2e:	d80a      	bhi.n	8005e46 <_printf_i+0x32>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	f000 80d5 	beq.w	8005fe0 <_printf_i+0x1cc>
 8005e36:	2f58      	cmp	r7, #88	; 0x58
 8005e38:	f000 80c1 	beq.w	8005fbe <_printf_i+0x1aa>
 8005e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e44:	e03a      	b.n	8005ebc <_printf_i+0xa8>
 8005e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e4a:	2b15      	cmp	r3, #21
 8005e4c:	d8f6      	bhi.n	8005e3c <_printf_i+0x28>
 8005e4e:	a101      	add	r1, pc, #4	; (adr r1, 8005e54 <_printf_i+0x40>)
 8005e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005e3d 	.word	0x08005e3d
 8005e60:	08005e3d 	.word	0x08005e3d
 8005e64:	08005e3d 	.word	0x08005e3d
 8005e68:	08005e3d 	.word	0x08005e3d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e3d 	.word	0x08005e3d
 8005e74:	08005e3d 	.word	0x08005e3d
 8005e78:	08005e3d 	.word	0x08005e3d
 8005e7c:	08005e3d 	.word	0x08005e3d
 8005e80:	08005fc7 	.word	0x08005fc7
 8005e84:	08005eed 	.word	0x08005eed
 8005e88:	08005f81 	.word	0x08005f81
 8005e8c:	08005e3d 	.word	0x08005e3d
 8005e90:	08005e3d 	.word	0x08005e3d
 8005e94:	08005fe9 	.word	0x08005fe9
 8005e98:	08005e3d 	.word	0x08005e3d
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	08005e3d 	.word	0x08005e3d
 8005ea4:	08005e3d 	.word	0x08005e3d
 8005ea8:	08005f89 	.word	0x08005f89
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	602a      	str	r2, [r5, #0]
 8005eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0a0      	b.n	8006002 <_printf_i+0x1ee>
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	0607      	lsls	r7, r0, #24
 8005ec6:	f103 0104 	add.w	r1, r3, #4
 8005eca:	6029      	str	r1, [r5, #0]
 8005ecc:	d501      	bpl.n	8005ed2 <_printf_i+0xbe>
 8005ece:	681e      	ldr	r6, [r3, #0]
 8005ed0:	e003      	b.n	8005eda <_printf_i+0xc6>
 8005ed2:	0646      	lsls	r6, r0, #25
 8005ed4:	d5fb      	bpl.n	8005ece <_printf_i+0xba>
 8005ed6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	da03      	bge.n	8005ee6 <_printf_i+0xd2>
 8005ede:	232d      	movs	r3, #45	; 0x2d
 8005ee0:	4276      	negs	r6, r6
 8005ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	4859      	ldr	r0, [pc, #356]	; (8006050 <_printf_i+0x23c>)
 8005eea:	e012      	b.n	8005f12 <_printf_i+0xfe>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	1d19      	adds	r1, r3, #4
 8005ef2:	6029      	str	r1, [r5, #0]
 8005ef4:	0605      	lsls	r5, r0, #24
 8005ef6:	d501      	bpl.n	8005efc <_printf_i+0xe8>
 8005ef8:	681e      	ldr	r6, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <_printf_i+0xee>
 8005efc:	0641      	lsls	r1, r0, #25
 8005efe:	d5fb      	bpl.n	8005ef8 <_printf_i+0xe4>
 8005f00:	881e      	ldrh	r6, [r3, #0]
 8005f02:	2f6f      	cmp	r7, #111	; 0x6f
 8005f04:	bf0c      	ite	eq
 8005f06:	2308      	moveq	r3, #8
 8005f08:	230a      	movne	r3, #10
 8005f0a:	4851      	ldr	r0, [pc, #324]	; (8006050 <_printf_i+0x23c>)
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f12:	6865      	ldr	r5, [r4, #4]
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	bfa8      	it	ge
 8005f18:	6821      	ldrge	r1, [r4, #0]
 8005f1a:	60a5      	str	r5, [r4, #8]
 8005f1c:	bfa4      	itt	ge
 8005f1e:	f021 0104 	bicge.w	r1, r1, #4
 8005f22:	6021      	strge	r1, [r4, #0]
 8005f24:	b90e      	cbnz	r6, 8005f2a <_printf_i+0x116>
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d04b      	beq.n	8005fc2 <_printf_i+0x1ae>
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f30:	fb03 6711 	mls	r7, r3, r1, r6
 8005f34:	5dc7      	ldrb	r7, [r0, r7]
 8005f36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f3a:	4637      	mov	r7, r6
 8005f3c:	42bb      	cmp	r3, r7
 8005f3e:	460e      	mov	r6, r1
 8005f40:	d9f4      	bls.n	8005f2c <_printf_i+0x118>
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d10b      	bne.n	8005f5e <_printf_i+0x14a>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07de      	lsls	r6, r3, #31
 8005f4a:	d508      	bpl.n	8005f5e <_printf_i+0x14a>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	4299      	cmp	r1, r3
 8005f52:	bfde      	ittt	le
 8005f54:	2330      	movle	r3, #48	; 0x30
 8005f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f5e:	1b52      	subs	r2, r2, r5
 8005f60:	6122      	str	r2, [r4, #16]
 8005f62:	464b      	mov	r3, r9
 8005f64:	4621      	mov	r1, r4
 8005f66:	4640      	mov	r0, r8
 8005f68:	f8cd a000 	str.w	sl, [sp]
 8005f6c:	aa03      	add	r2, sp, #12
 8005f6e:	f7ff fedf 	bl	8005d30 <_printf_common>
 8005f72:	3001      	adds	r0, #1
 8005f74:	d14a      	bne.n	800600c <_printf_i+0x1f8>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	b004      	add	sp, #16
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f043 0320 	orr.w	r3, r3, #32
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	2778      	movs	r7, #120	; 0x78
 8005f8a:	4832      	ldr	r0, [pc, #200]	; (8006054 <_printf_i+0x240>)
 8005f8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	6829      	ldr	r1, [r5, #0]
 8005f94:	061f      	lsls	r7, r3, #24
 8005f96:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f9a:	d402      	bmi.n	8005fa2 <_printf_i+0x18e>
 8005f9c:	065f      	lsls	r7, r3, #25
 8005f9e:	bf48      	it	mi
 8005fa0:	b2b6      	uxthmi	r6, r6
 8005fa2:	07df      	lsls	r7, r3, #31
 8005fa4:	bf48      	it	mi
 8005fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8005faa:	6029      	str	r1, [r5, #0]
 8005fac:	bf48      	it	mi
 8005fae:	6023      	strmi	r3, [r4, #0]
 8005fb0:	b91e      	cbnz	r6, 8005fba <_printf_i+0x1a6>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f023 0320 	bic.w	r3, r3, #32
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	2310      	movs	r3, #16
 8005fbc:	e7a6      	b.n	8005f0c <_printf_i+0xf8>
 8005fbe:	4824      	ldr	r0, [pc, #144]	; (8006050 <_printf_i+0x23c>)
 8005fc0:	e7e4      	b.n	8005f8c <_printf_i+0x178>
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	e7bd      	b.n	8005f42 <_printf_i+0x12e>
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	6826      	ldr	r6, [r4, #0]
 8005fca:	1d18      	adds	r0, r3, #4
 8005fcc:	6961      	ldr	r1, [r4, #20]
 8005fce:	6028      	str	r0, [r5, #0]
 8005fd0:	0635      	lsls	r5, r6, #24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	d501      	bpl.n	8005fda <_printf_i+0x1c6>
 8005fd6:	6019      	str	r1, [r3, #0]
 8005fd8:	e002      	b.n	8005fe0 <_printf_i+0x1cc>
 8005fda:	0670      	lsls	r0, r6, #25
 8005fdc:	d5fb      	bpl.n	8005fd6 <_printf_i+0x1c2>
 8005fde:	8019      	strh	r1, [r3, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4615      	mov	r5, r2
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	e7bc      	b.n	8005f62 <_printf_i+0x14e>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	2100      	movs	r1, #0
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	602a      	str	r2, [r5, #0]
 8005ff0:	681d      	ldr	r5, [r3, #0]
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f9d4 	bl	80063a2 <memchr>
 8005ffa:	b108      	cbz	r0, 8006000 <_printf_i+0x1ec>
 8005ffc:	1b40      	subs	r0, r0, r5
 8005ffe:	6060      	str	r0, [r4, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2300      	movs	r3, #0
 8006006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600a:	e7aa      	b.n	8005f62 <_printf_i+0x14e>
 800600c:	462a      	mov	r2, r5
 800600e:	4649      	mov	r1, r9
 8006010:	4640      	mov	r0, r8
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	47d0      	blx	sl
 8006016:	3001      	adds	r0, #1
 8006018:	d0ad      	beq.n	8005f76 <_printf_i+0x162>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	079b      	lsls	r3, r3, #30
 800601e:	d413      	bmi.n	8006048 <_printf_i+0x234>
 8006020:	68e0      	ldr	r0, [r4, #12]
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	4298      	cmp	r0, r3
 8006026:	bfb8      	it	lt
 8006028:	4618      	movlt	r0, r3
 800602a:	e7a6      	b.n	8005f7a <_printf_i+0x166>
 800602c:	2301      	movs	r3, #1
 800602e:	4632      	mov	r2, r6
 8006030:	4649      	mov	r1, r9
 8006032:	4640      	mov	r0, r8
 8006034:	47d0      	blx	sl
 8006036:	3001      	adds	r0, #1
 8006038:	d09d      	beq.n	8005f76 <_printf_i+0x162>
 800603a:	3501      	adds	r5, #1
 800603c:	68e3      	ldr	r3, [r4, #12]
 800603e:	9903      	ldr	r1, [sp, #12]
 8006040:	1a5b      	subs	r3, r3, r1
 8006042:	42ab      	cmp	r3, r5
 8006044:	dcf2      	bgt.n	800602c <_printf_i+0x218>
 8006046:	e7eb      	b.n	8006020 <_printf_i+0x20c>
 8006048:	2500      	movs	r5, #0
 800604a:	f104 0619 	add.w	r6, r4, #25
 800604e:	e7f5      	b.n	800603c <_printf_i+0x228>
 8006050:	0800863a 	.word	0x0800863a
 8006054:	0800864b 	.word	0x0800864b

08006058 <std>:
 8006058:	2300      	movs	r3, #0
 800605a:	b510      	push	{r4, lr}
 800605c:	4604      	mov	r4, r0
 800605e:	e9c0 3300 	strd	r3, r3, [r0]
 8006062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006066:	6083      	str	r3, [r0, #8]
 8006068:	8181      	strh	r1, [r0, #12]
 800606a:	6643      	str	r3, [r0, #100]	; 0x64
 800606c:	81c2      	strh	r2, [r0, #14]
 800606e:	6183      	str	r3, [r0, #24]
 8006070:	4619      	mov	r1, r3
 8006072:	2208      	movs	r2, #8
 8006074:	305c      	adds	r0, #92	; 0x5c
 8006076:	f000 f914 	bl	80062a2 <memset>
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <std+0x58>)
 800607c:	6224      	str	r4, [r4, #32]
 800607e:	6263      	str	r3, [r4, #36]	; 0x24
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <std+0x5c>)
 8006082:	62a3      	str	r3, [r4, #40]	; 0x28
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <std+0x60>)
 8006086:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <std+0x64>)
 800608a:	6323      	str	r3, [r4, #48]	; 0x30
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <std+0x68>)
 800608e:	429c      	cmp	r4, r3
 8006090:	d006      	beq.n	80060a0 <std+0x48>
 8006092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006096:	4294      	cmp	r4, r2
 8006098:	d002      	beq.n	80060a0 <std+0x48>
 800609a:	33d0      	adds	r3, #208	; 0xd0
 800609c:	429c      	cmp	r4, r3
 800609e:	d105      	bne.n	80060ac <std+0x54>
 80060a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a8:	f000 b978 	b.w	800639c <__retarget_lock_init_recursive>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	0800621d 	.word	0x0800621d
 80060b4:	0800623f 	.word	0x0800623f
 80060b8:	08006277 	.word	0x08006277
 80060bc:	0800629b 	.word	0x0800629b
 80060c0:	20000388 	.word	0x20000388

080060c4 <stdio_exit_handler>:
 80060c4:	4a02      	ldr	r2, [pc, #8]	; (80060d0 <stdio_exit_handler+0xc>)
 80060c6:	4903      	ldr	r1, [pc, #12]	; (80060d4 <stdio_exit_handler+0x10>)
 80060c8:	4803      	ldr	r0, [pc, #12]	; (80060d8 <stdio_exit_handler+0x14>)
 80060ca:	f000 b869 	b.w	80061a0 <_fwalk_sglue>
 80060ce:	bf00      	nop
 80060d0:	20000010 	.word	0x20000010
 80060d4:	08007d35 	.word	0x08007d35
 80060d8:	2000001c 	.word	0x2000001c

080060dc <cleanup_stdio>:
 80060dc:	6841      	ldr	r1, [r0, #4]
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <cleanup_stdio+0x34>)
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4299      	cmp	r1, r3
 80060e4:	4604      	mov	r4, r0
 80060e6:	d001      	beq.n	80060ec <cleanup_stdio+0x10>
 80060e8:	f001 fe24 	bl	8007d34 <_fflush_r>
 80060ec:	68a1      	ldr	r1, [r4, #8]
 80060ee:	4b09      	ldr	r3, [pc, #36]	; (8006114 <cleanup_stdio+0x38>)
 80060f0:	4299      	cmp	r1, r3
 80060f2:	d002      	beq.n	80060fa <cleanup_stdio+0x1e>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f001 fe1d 	bl	8007d34 <_fflush_r>
 80060fa:	68e1      	ldr	r1, [r4, #12]
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <cleanup_stdio+0x3c>)
 80060fe:	4299      	cmp	r1, r3
 8006100:	d004      	beq.n	800610c <cleanup_stdio+0x30>
 8006102:	4620      	mov	r0, r4
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f001 be14 	b.w	8007d34 <_fflush_r>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	20000388 	.word	0x20000388
 8006114:	200003f0 	.word	0x200003f0
 8006118:	20000458 	.word	0x20000458

0800611c <global_stdio_init.part.0>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <global_stdio_init.part.0+0x30>)
 8006120:	4c0b      	ldr	r4, [pc, #44]	; (8006150 <global_stdio_init.part.0+0x34>)
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <global_stdio_init.part.0+0x38>)
 8006124:	4620      	mov	r0, r4
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	2104      	movs	r1, #4
 800612a:	2200      	movs	r2, #0
 800612c:	f7ff ff94 	bl	8006058 <std>
 8006130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006134:	2201      	movs	r2, #1
 8006136:	2109      	movs	r1, #9
 8006138:	f7ff ff8e 	bl	8006058 <std>
 800613c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006140:	2202      	movs	r2, #2
 8006142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006146:	2112      	movs	r1, #18
 8006148:	f7ff bf86 	b.w	8006058 <std>
 800614c:	200004c0 	.word	0x200004c0
 8006150:	20000388 	.word	0x20000388
 8006154:	080060c5 	.word	0x080060c5

08006158 <__sfp_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sfp_lock_acquire+0x8>)
 800615a:	f000 b920 	b.w	800639e <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200004c9 	.word	0x200004c9

08006164 <__sfp_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__sfp_lock_release+0x8>)
 8006166:	f000 b91b 	b.w	80063a0 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200004c9 	.word	0x200004c9

08006170 <__sinit>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	f7ff fff0 	bl	8006158 <__sfp_lock_acquire>
 8006178:	6a23      	ldr	r3, [r4, #32]
 800617a:	b11b      	cbz	r3, 8006184 <__sinit+0x14>
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006180:	f7ff bff0 	b.w	8006164 <__sfp_lock_release>
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <__sinit+0x28>)
 8006186:	6223      	str	r3, [r4, #32]
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <__sinit+0x2c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f5      	bne.n	800617c <__sinit+0xc>
 8006190:	f7ff ffc4 	bl	800611c <global_stdio_init.part.0>
 8006194:	e7f2      	b.n	800617c <__sinit+0xc>
 8006196:	bf00      	nop
 8006198:	080060dd 	.word	0x080060dd
 800619c:	200004c0 	.word	0x200004c0

080061a0 <_fwalk_sglue>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4607      	mov	r7, r0
 80061a6:	4688      	mov	r8, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	2600      	movs	r6, #0
 80061ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b0:	f1b9 0901 	subs.w	r9, r9, #1
 80061b4:	d505      	bpl.n	80061c2 <_fwalk_sglue+0x22>
 80061b6:	6824      	ldr	r4, [r4, #0]
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	d1f7      	bne.n	80061ac <_fwalk_sglue+0xc>
 80061bc:	4630      	mov	r0, r6
 80061be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d907      	bls.n	80061d8 <_fwalk_sglue+0x38>
 80061c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061cc:	3301      	adds	r3, #1
 80061ce:	d003      	beq.n	80061d8 <_fwalk_sglue+0x38>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	4306      	orrs	r6, r0
 80061d8:	3568      	adds	r5, #104	; 0x68
 80061da:	e7e9      	b.n	80061b0 <_fwalk_sglue+0x10>

080061dc <siprintf>:
 80061dc:	b40e      	push	{r1, r2, r3}
 80061de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061e2:	b500      	push	{lr}
 80061e4:	b09c      	sub	sp, #112	; 0x70
 80061e6:	ab1d      	add	r3, sp, #116	; 0x74
 80061e8:	9002      	str	r0, [sp, #8]
 80061ea:	9006      	str	r0, [sp, #24]
 80061ec:	9107      	str	r1, [sp, #28]
 80061ee:	9104      	str	r1, [sp, #16]
 80061f0:	4808      	ldr	r0, [pc, #32]	; (8006214 <siprintf+0x38>)
 80061f2:	4909      	ldr	r1, [pc, #36]	; (8006218 <siprintf+0x3c>)
 80061f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f8:	9105      	str	r1, [sp, #20]
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	a902      	add	r1, sp, #8
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	f001 fc18 	bl	8007a34 <_svfiprintf_r>
 8006204:	2200      	movs	r2, #0
 8006206:	9b02      	ldr	r3, [sp, #8]
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	b01c      	add	sp, #112	; 0x70
 800620c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006210:	b003      	add	sp, #12
 8006212:	4770      	bx	lr
 8006214:	20000068 	.word	0x20000068
 8006218:	ffff0208 	.word	0xffff0208

0800621c <__sread>:
 800621c:	b510      	push	{r4, lr}
 800621e:	460c      	mov	r4, r1
 8006220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006224:	f000 f86c 	bl	8006300 <_read_r>
 8006228:	2800      	cmp	r0, #0
 800622a:	bfab      	itete	ge
 800622c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800622e:	89a3      	ldrhlt	r3, [r4, #12]
 8006230:	181b      	addge	r3, r3, r0
 8006232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006236:	bfac      	ite	ge
 8006238:	6563      	strge	r3, [r4, #84]	; 0x54
 800623a:	81a3      	strhlt	r3, [r4, #12]
 800623c:	bd10      	pop	{r4, pc}

0800623e <__swrite>:
 800623e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006242:	461f      	mov	r7, r3
 8006244:	898b      	ldrh	r3, [r1, #12]
 8006246:	4605      	mov	r5, r0
 8006248:	05db      	lsls	r3, r3, #23
 800624a:	460c      	mov	r4, r1
 800624c:	4616      	mov	r6, r2
 800624e:	d505      	bpl.n	800625c <__swrite+0x1e>
 8006250:	2302      	movs	r3, #2
 8006252:	2200      	movs	r2, #0
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	f000 f840 	bl	80062dc <_lseek_r>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	4632      	mov	r2, r6
 8006260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	4628      	mov	r0, r5
 8006268:	463b      	mov	r3, r7
 800626a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006272:	f000 b857 	b.w	8006324 <_write_r>

08006276 <__sseek>:
 8006276:	b510      	push	{r4, lr}
 8006278:	460c      	mov	r4, r1
 800627a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627e:	f000 f82d 	bl	80062dc <_lseek_r>
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	bf15      	itete	ne
 8006288:	6560      	strne	r0, [r4, #84]	; 0x54
 800628a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800628e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006292:	81a3      	strheq	r3, [r4, #12]
 8006294:	bf18      	it	ne
 8006296:	81a3      	strhne	r3, [r4, #12]
 8006298:	bd10      	pop	{r4, pc}

0800629a <__sclose>:
 800629a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629e:	f000 b80d 	b.w	80062bc <_close_r>

080062a2 <memset>:
 80062a2:	4603      	mov	r3, r0
 80062a4:	4402      	add	r2, r0
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d100      	bne.n	80062ac <memset+0xa>
 80062aa:	4770      	bx	lr
 80062ac:	f803 1b01 	strb.w	r1, [r3], #1
 80062b0:	e7f9      	b.n	80062a6 <memset+0x4>
	...

080062b4 <_localeconv_r>:
 80062b4:	4800      	ldr	r0, [pc, #0]	; (80062b8 <_localeconv_r+0x4>)
 80062b6:	4770      	bx	lr
 80062b8:	2000015c 	.word	0x2000015c

080062bc <_close_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	2300      	movs	r3, #0
 80062c0:	4d05      	ldr	r5, [pc, #20]	; (80062d8 <_close_r+0x1c>)
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fc f8cc 	bl	8002464 <_close>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_close_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_close_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	200004c4 	.word	0x200004c4

080062dc <_lseek_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	4d05      	ldr	r5, [pc, #20]	; (80062fc <_lseek_r+0x20>)
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f7fc f8de 	bl	80024ac <_lseek>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_lseek_r+0x1e>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_lseek_r+0x1e>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	200004c4 	.word	0x200004c4

08006300 <_read_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	2200      	movs	r2, #0
 800630a:	4d05      	ldr	r5, [pc, #20]	; (8006320 <_read_r+0x20>)
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f7fc f86f 	bl	80023f2 <_read>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_read_r+0x1e>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_read_r+0x1e>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	200004c4 	.word	0x200004c4

08006324 <_write_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	2200      	movs	r2, #0
 800632e:	4d05      	ldr	r5, [pc, #20]	; (8006344 <_write_r+0x20>)
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f7fc f87a 	bl	800242c <_write>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_write_r+0x1e>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_write_r+0x1e>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	200004c4 	.word	0x200004c4

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000068 	.word	0x20000068

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	2600      	movs	r6, #0
 8006358:	4d0c      	ldr	r5, [pc, #48]	; (800638c <__libc_init_array+0x38>)
 800635a:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	42a6      	cmp	r6, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	f002 f886 	bl	8008474 <_init>
 8006368:	2600      	movs	r6, #0
 800636a:	4d0a      	ldr	r5, [pc, #40]	; (8006394 <__libc_init_array+0x40>)
 800636c:	4c0a      	ldr	r4, [pc, #40]	; (8006398 <__libc_init_array+0x44>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	42a6      	cmp	r6, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f855 3b04 	ldr.w	r3, [r5], #4
 800637c:	4798      	blx	r3
 800637e:	3601      	adds	r6, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f855 3b04 	ldr.w	r3, [r5], #4
 8006386:	4798      	blx	r3
 8006388:	3601      	adds	r6, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	0800899c 	.word	0x0800899c
 8006390:	0800899c 	.word	0x0800899c
 8006394:	0800899c 	.word	0x0800899c
 8006398:	080089a0 	.word	0x080089a0

0800639c <__retarget_lock_init_recursive>:
 800639c:	4770      	bx	lr

0800639e <__retarget_lock_acquire_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_release_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <memchr>:
 80063a2:	4603      	mov	r3, r0
 80063a4:	b510      	push	{r4, lr}
 80063a6:	b2c9      	uxtb	r1, r1
 80063a8:	4402      	add	r2, r0
 80063aa:	4293      	cmp	r3, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	d101      	bne.n	80063b4 <memchr+0x12>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e003      	b.n	80063bc <memchr+0x1a>
 80063b4:	7804      	ldrb	r4, [r0, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	428c      	cmp	r4, r1
 80063ba:	d1f6      	bne.n	80063aa <memchr+0x8>
 80063bc:	bd10      	pop	{r4, pc}

080063be <quorem>:
 80063be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c2:	6903      	ldr	r3, [r0, #16]
 80063c4:	690c      	ldr	r4, [r1, #16]
 80063c6:	4607      	mov	r7, r0
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	db7f      	blt.n	80064cc <quorem+0x10e>
 80063cc:	3c01      	subs	r4, #1
 80063ce:	f100 0514 	add.w	r5, r0, #20
 80063d2:	f101 0814 	add.w	r8, r1, #20
 80063d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e4:	3301      	adds	r3, #1
 80063e6:	429a      	cmp	r2, r3
 80063e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063f4:	d331      	bcc.n	800645a <quorem+0x9c>
 80063f6:	f04f 0e00 	mov.w	lr, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	46ac      	mov	ip, r5
 80063fe:	46f2      	mov	sl, lr
 8006400:	f850 2b04 	ldr.w	r2, [r0], #4
 8006404:	b293      	uxth	r3, r2
 8006406:	fb06 e303 	mla	r3, r6, r3, lr
 800640a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640e:	0c1a      	lsrs	r2, r3, #16
 8006410:	b29b      	uxth	r3, r3
 8006412:	fb06 220e 	mla	r2, r6, lr, r2
 8006416:	ebaa 0303 	sub.w	r3, sl, r3
 800641a:	f8dc a000 	ldr.w	sl, [ip]
 800641e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006422:	fa1f fa8a 	uxth.w	sl, sl
 8006426:	4453      	add	r3, sl
 8006428:	f8dc a000 	ldr.w	sl, [ip]
 800642c:	b292      	uxth	r2, r2
 800642e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006432:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006436:	b29b      	uxth	r3, r3
 8006438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643c:	4581      	cmp	r9, r0
 800643e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006442:	f84c 3b04 	str.w	r3, [ip], #4
 8006446:	d2db      	bcs.n	8006400 <quorem+0x42>
 8006448:	f855 300b 	ldr.w	r3, [r5, fp]
 800644c:	b92b      	cbnz	r3, 800645a <quorem+0x9c>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	3b04      	subs	r3, #4
 8006452:	429d      	cmp	r5, r3
 8006454:	461a      	mov	r2, r3
 8006456:	d32d      	bcc.n	80064b4 <quorem+0xf6>
 8006458:	613c      	str	r4, [r7, #16]
 800645a:	4638      	mov	r0, r7
 800645c:	f001 f992 	bl	8007784 <__mcmp>
 8006460:	2800      	cmp	r0, #0
 8006462:	db23      	blt.n	80064ac <quorem+0xee>
 8006464:	4629      	mov	r1, r5
 8006466:	2000      	movs	r0, #0
 8006468:	3601      	adds	r6, #1
 800646a:	f858 2b04 	ldr.w	r2, [r8], #4
 800646e:	f8d1 c000 	ldr.w	ip, [r1]
 8006472:	b293      	uxth	r3, r2
 8006474:	1ac3      	subs	r3, r0, r3
 8006476:	0c12      	lsrs	r2, r2, #16
 8006478:	fa1f f08c 	uxth.w	r0, ip
 800647c:	4403      	add	r3, r0
 800647e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006482:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800648c:	45c1      	cmp	r9, r8
 800648e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006492:	f841 3b04 	str.w	r3, [r1], #4
 8006496:	d2e8      	bcs.n	800646a <quorem+0xac>
 8006498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800649c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a0:	b922      	cbnz	r2, 80064ac <quorem+0xee>
 80064a2:	3b04      	subs	r3, #4
 80064a4:	429d      	cmp	r5, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	d30a      	bcc.n	80064c0 <quorem+0x102>
 80064aa:	613c      	str	r4, [r7, #16]
 80064ac:	4630      	mov	r0, r6
 80064ae:	b003      	add	sp, #12
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	3b04      	subs	r3, #4
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d1cd      	bne.n	8006458 <quorem+0x9a>
 80064bc:	3c01      	subs	r4, #1
 80064be:	e7c8      	b.n	8006452 <quorem+0x94>
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	3b04      	subs	r3, #4
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d1f0      	bne.n	80064aa <quorem+0xec>
 80064c8:	3c01      	subs	r4, #1
 80064ca:	e7eb      	b.n	80064a4 <quorem+0xe6>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e7ee      	b.n	80064ae <quorem+0xf0>

080064d0 <_dtoa_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4616      	mov	r6, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	69c4      	ldr	r4, [r0, #28]
 80064da:	b099      	sub	sp, #100	; 0x64
 80064dc:	4605      	mov	r5, r0
 80064de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80064e6:	b974      	cbnz	r4, 8006506 <_dtoa_r+0x36>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f000 fe1d 	bl	8007128 <malloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	61e8      	str	r0, [r5, #28]
 80064f2:	b920      	cbnz	r0, 80064fe <_dtoa_r+0x2e>
 80064f4:	21ef      	movs	r1, #239	; 0xef
 80064f6:	4bac      	ldr	r3, [pc, #688]	; (80067a8 <_dtoa_r+0x2d8>)
 80064f8:	48ac      	ldr	r0, [pc, #688]	; (80067ac <_dtoa_r+0x2dc>)
 80064fa:	f001 fc7b 	bl	8007df4 <__assert_func>
 80064fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006502:	6004      	str	r4, [r0, #0]
 8006504:	60c4      	str	r4, [r0, #12]
 8006506:	69eb      	ldr	r3, [r5, #28]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	b151      	cbz	r1, 8006522 <_dtoa_r+0x52>
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	2301      	movs	r3, #1
 8006510:	4093      	lsls	r3, r2
 8006512:	604a      	str	r2, [r1, #4]
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fefa 	bl	8007310 <_Bfree>
 800651c:	2200      	movs	r2, #0
 800651e:	69eb      	ldr	r3, [r5, #28]
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	1e3b      	subs	r3, r7, #0
 8006524:	bfaf      	iteee	ge
 8006526:	2300      	movge	r3, #0
 8006528:	2201      	movlt	r2, #1
 800652a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800652e:	9305      	strlt	r3, [sp, #20]
 8006530:	bfa8      	it	ge
 8006532:	f8c8 3000 	strge.w	r3, [r8]
 8006536:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800653a:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <_dtoa_r+0x2e0>)
 800653c:	bfb8      	it	lt
 800653e:	f8c8 2000 	strlt.w	r2, [r8]
 8006542:	ea33 0309 	bics.w	r3, r3, r9
 8006546:	d119      	bne.n	800657c <_dtoa_r+0xac>
 8006548:	f242 730f 	movw	r3, #9999	; 0x270f
 800654c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006554:	4333      	orrs	r3, r6
 8006556:	f000 8589 	beq.w	800706c <_dtoa_r+0xb9c>
 800655a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800655c:	b953      	cbnz	r3, 8006574 <_dtoa_r+0xa4>
 800655e:	4b95      	ldr	r3, [pc, #596]	; (80067b4 <_dtoa_r+0x2e4>)
 8006560:	e023      	b.n	80065aa <_dtoa_r+0xda>
 8006562:	4b95      	ldr	r3, [pc, #596]	; (80067b8 <_dtoa_r+0x2e8>)
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	3308      	adds	r3, #8
 8006568:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	9803      	ldr	r0, [sp, #12]
 800656e:	b019      	add	sp, #100	; 0x64
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4b8f      	ldr	r3, [pc, #572]	; (80067b4 <_dtoa_r+0x2e4>)
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	3303      	adds	r3, #3
 800657a:	e7f5      	b.n	8006568 <_dtoa_r+0x98>
 800657c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006580:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	f7fa fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006590:	4680      	mov	r8, r0
 8006592:	b160      	cbz	r0, 80065ae <_dtoa_r+0xde>
 8006594:	2301      	movs	r3, #1
 8006596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8562 	beq.w	8007066 <_dtoa_r+0xb96>
 80065a2:	4b86      	ldr	r3, [pc, #536]	; (80067bc <_dtoa_r+0x2ec>)
 80065a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	9303      	str	r3, [sp, #12]
 80065ac:	e7de      	b.n	800656c <_dtoa_r+0x9c>
 80065ae:	ab16      	add	r3, sp, #88	; 0x58
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	ab17      	add	r3, sp, #92	; 0x5c
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4628      	mov	r0, r5
 80065b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065bc:	f001 f98a 	bl	80078d4 <__d2b>
 80065c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80065c4:	4682      	mov	sl, r0
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	d07e      	beq.n	80066c8 <_dtoa_r+0x1f8>
 80065ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80065d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80065e4:	4619      	mov	r1, r3
 80065e6:	2200      	movs	r2, #0
 80065e8:	4b75      	ldr	r3, [pc, #468]	; (80067c0 <_dtoa_r+0x2f0>)
 80065ea:	f7f9 fdbd 	bl	8000168 <__aeabi_dsub>
 80065ee:	a368      	add	r3, pc, #416	; (adr r3, 8006790 <_dtoa_r+0x2c0>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	a367      	add	r3, pc, #412	; (adr r3, 8006798 <_dtoa_r+0x2c8>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fdb5 	bl	800016c <__adddf3>
 8006602:	4606      	mov	r6, r0
 8006604:	4620      	mov	r0, r4
 8006606:	460f      	mov	r7, r1
 8006608:	f7f9 fefc 	bl	8000404 <__aeabi_i2d>
 800660c:	a364      	add	r3, pc, #400	; (adr r3, 80067a0 <_dtoa_r+0x2d0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 ff61 	bl	80004d8 <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7f9 fda5 	bl	800016c <__adddf3>
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	f7fa fa07 	bl	8000a38 <__aeabi_d2iz>
 800662a:	2200      	movs	r2, #0
 800662c:	4683      	mov	fp, r0
 800662e:	2300      	movs	r3, #0
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7fa f9c2 	bl	80009bc <__aeabi_dcmplt>
 8006638:	b148      	cbz	r0, 800664e <_dtoa_r+0x17e>
 800663a:	4658      	mov	r0, fp
 800663c:	f7f9 fee2 	bl	8000404 <__aeabi_i2d>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	f7fa f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8006648:	b908      	cbnz	r0, 800664e <_dtoa_r+0x17e>
 800664a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800664e:	f1bb 0f16 	cmp.w	fp, #22
 8006652:	d857      	bhi.n	8006704 <_dtoa_r+0x234>
 8006654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006658:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <_dtoa_r+0x2f4>)
 800665a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7fa f9ab 	bl	80009bc <__aeabi_dcmplt>
 8006666:	2800      	cmp	r0, #0
 8006668:	d04e      	beq.n	8006708 <_dtoa_r+0x238>
 800666a:	2300      	movs	r3, #0
 800666c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006670:	930f      	str	r3, [sp, #60]	; 0x3c
 8006672:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006674:	1b1b      	subs	r3, r3, r4
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	bf46      	itte	mi
 800667a:	f1c3 0901 	rsbmi	r9, r3, #1
 800667e:	2300      	movmi	r3, #0
 8006680:	f04f 0900 	movpl.w	r9, #0
 8006684:	9209      	str	r2, [sp, #36]	; 0x24
 8006686:	bf48      	it	mi
 8006688:	9309      	strmi	r3, [sp, #36]	; 0x24
 800668a:	f1bb 0f00 	cmp.w	fp, #0
 800668e:	db3d      	blt.n	800670c <_dtoa_r+0x23c>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006696:	445b      	add	r3, fp
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	2300      	movs	r3, #0
 800669c:	930a      	str	r3, [sp, #40]	; 0x28
 800669e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066a0:	2b09      	cmp	r3, #9
 80066a2:	d867      	bhi.n	8006774 <_dtoa_r+0x2a4>
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	bfc4      	itt	gt
 80066a8:	3b04      	subgt	r3, #4
 80066aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80066ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ae:	bfc8      	it	gt
 80066b0:	2400      	movgt	r4, #0
 80066b2:	f1a3 0302 	sub.w	r3, r3, #2
 80066b6:	bfd8      	it	le
 80066b8:	2401      	movle	r4, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	f200 8086 	bhi.w	80067cc <_dtoa_r+0x2fc>
 80066c0:	e8df f003 	tbb	[pc, r3]
 80066c4:	5637392c 	.word	0x5637392c
 80066c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80066cc:	441c      	add	r4, r3
 80066ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	bfc1      	itttt	gt
 80066d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066da:	fa09 f903 	lslgt.w	r9, r9, r3
 80066de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80066e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066e6:	bfd6      	itet	le
 80066e8:	f1c3 0320 	rsble	r3, r3, #32
 80066ec:	ea49 0003 	orrgt.w	r0, r9, r3
 80066f0:	fa06 f003 	lslle.w	r0, r6, r3
 80066f4:	f7f9 fe76 	bl	80003e4 <__aeabi_ui2d>
 80066f8:	2201      	movs	r2, #1
 80066fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066fe:	3c01      	subs	r4, #1
 8006700:	9213      	str	r2, [sp, #76]	; 0x4c
 8006702:	e76f      	b.n	80065e4 <_dtoa_r+0x114>
 8006704:	2301      	movs	r3, #1
 8006706:	e7b3      	b.n	8006670 <_dtoa_r+0x1a0>
 8006708:	900f      	str	r0, [sp, #60]	; 0x3c
 800670a:	e7b2      	b.n	8006672 <_dtoa_r+0x1a2>
 800670c:	f1cb 0300 	rsb	r3, fp, #0
 8006710:	930a      	str	r3, [sp, #40]	; 0x28
 8006712:	2300      	movs	r3, #0
 8006714:	eba9 090b 	sub.w	r9, r9, fp
 8006718:	930e      	str	r3, [sp, #56]	; 0x38
 800671a:	e7c0      	b.n	800669e <_dtoa_r+0x1ce>
 800671c:	2300      	movs	r3, #0
 800671e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006720:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc55      	bgt.n	80067d2 <_dtoa_r+0x302>
 8006726:	2301      	movs	r3, #1
 8006728:	461a      	mov	r2, r3
 800672a:	9306      	str	r3, [sp, #24]
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006730:	e00b      	b.n	800674a <_dtoa_r+0x27a>
 8006732:	2301      	movs	r3, #1
 8006734:	e7f3      	b.n	800671e <_dtoa_r+0x24e>
 8006736:	2300      	movs	r3, #0
 8006738:	930b      	str	r3, [sp, #44]	; 0x2c
 800673a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800673c:	445b      	add	r3, fp
 800673e:	9306      	str	r3, [sp, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	bfb8      	it	lt
 8006748:	2301      	movlt	r3, #1
 800674a:	2100      	movs	r1, #0
 800674c:	2204      	movs	r2, #4
 800674e:	69e8      	ldr	r0, [r5, #28]
 8006750:	f102 0614 	add.w	r6, r2, #20
 8006754:	429e      	cmp	r6, r3
 8006756:	d940      	bls.n	80067da <_dtoa_r+0x30a>
 8006758:	6041      	str	r1, [r0, #4]
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fd98 	bl	8007290 <_Balloc>
 8006760:	9003      	str	r0, [sp, #12]
 8006762:	2800      	cmp	r0, #0
 8006764:	d13c      	bne.n	80067e0 <_dtoa_r+0x310>
 8006766:	4602      	mov	r2, r0
 8006768:	f240 11af 	movw	r1, #431	; 0x1af
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <_dtoa_r+0x2f8>)
 800676e:	e6c3      	b.n	80064f8 <_dtoa_r+0x28>
 8006770:	2301      	movs	r3, #1
 8006772:	e7e1      	b.n	8006738 <_dtoa_r+0x268>
 8006774:	2401      	movs	r4, #1
 8006776:	2300      	movs	r3, #0
 8006778:	940b      	str	r4, [sp, #44]	; 0x2c
 800677a:	9322      	str	r3, [sp, #136]	; 0x88
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	2200      	movs	r2, #0
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9308      	str	r3, [sp, #32]
 8006786:	2312      	movs	r3, #18
 8006788:	e7d1      	b.n	800672e <_dtoa_r+0x25e>
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w
 8006790:	636f4361 	.word	0x636f4361
 8006794:	3fd287a7 	.word	0x3fd287a7
 8006798:	8b60c8b3 	.word	0x8b60c8b3
 800679c:	3fc68a28 	.word	0x3fc68a28
 80067a0:	509f79fb 	.word	0x509f79fb
 80067a4:	3fd34413 	.word	0x3fd34413
 80067a8:	08008669 	.word	0x08008669
 80067ac:	08008680 	.word	0x08008680
 80067b0:	7ff00000 	.word	0x7ff00000
 80067b4:	08008665 	.word	0x08008665
 80067b8:	0800865c 	.word	0x0800865c
 80067bc:	08008639 	.word	0x08008639
 80067c0:	3ff80000 	.word	0x3ff80000
 80067c4:	08008770 	.word	0x08008770
 80067c8:	080086d8 	.word	0x080086d8
 80067cc:	2301      	movs	r3, #1
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d0:	e7d4      	b.n	800677c <_dtoa_r+0x2ac>
 80067d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	9308      	str	r3, [sp, #32]
 80067d8:	e7b7      	b.n	800674a <_dtoa_r+0x27a>
 80067da:	3101      	adds	r1, #1
 80067dc:	0052      	lsls	r2, r2, #1
 80067de:	e7b7      	b.n	8006750 <_dtoa_r+0x280>
 80067e0:	69eb      	ldr	r3, [r5, #28]
 80067e2:	9a03      	ldr	r2, [sp, #12]
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	9b08      	ldr	r3, [sp, #32]
 80067e8:	2b0e      	cmp	r3, #14
 80067ea:	f200 80a8 	bhi.w	800693e <_dtoa_r+0x46e>
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	f000 80a5 	beq.w	800693e <_dtoa_r+0x46e>
 80067f4:	f1bb 0f00 	cmp.w	fp, #0
 80067f8:	dd34      	ble.n	8006864 <_dtoa_r+0x394>
 80067fa:	4b9a      	ldr	r3, [pc, #616]	; (8006a64 <_dtoa_r+0x594>)
 80067fc:	f00b 020f 	and.w	r2, fp, #15
 8006800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006804:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006808:	e9d3 3400 	ldrd	r3, r4, [r3]
 800680c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006810:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006814:	d016      	beq.n	8006844 <_dtoa_r+0x374>
 8006816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800681a:	4b93      	ldr	r3, [pc, #588]	; (8006a68 <_dtoa_r+0x598>)
 800681c:	2703      	movs	r7, #3
 800681e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006822:	f7f9 ff83 	bl	800072c <__aeabi_ddiv>
 8006826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682a:	f004 040f 	and.w	r4, r4, #15
 800682e:	4e8e      	ldr	r6, [pc, #568]	; (8006a68 <_dtoa_r+0x598>)
 8006830:	b954      	cbnz	r4, 8006848 <_dtoa_r+0x378>
 8006832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800683a:	f7f9 ff77 	bl	800072c <__aeabi_ddiv>
 800683e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006842:	e029      	b.n	8006898 <_dtoa_r+0x3c8>
 8006844:	2702      	movs	r7, #2
 8006846:	e7f2      	b.n	800682e <_dtoa_r+0x35e>
 8006848:	07e1      	lsls	r1, r4, #31
 800684a:	d508      	bpl.n	800685e <_dtoa_r+0x38e>
 800684c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006850:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006854:	f7f9 fe40 	bl	80004d8 <__aeabi_dmul>
 8006858:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800685c:	3701      	adds	r7, #1
 800685e:	1064      	asrs	r4, r4, #1
 8006860:	3608      	adds	r6, #8
 8006862:	e7e5      	b.n	8006830 <_dtoa_r+0x360>
 8006864:	f000 80a5 	beq.w	80069b2 <_dtoa_r+0x4e2>
 8006868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800686c:	f1cb 0400 	rsb	r4, fp, #0
 8006870:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <_dtoa_r+0x594>)
 8006872:	f004 020f 	and.w	r2, r4, #15
 8006876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7f9 fe2b 	bl	80004d8 <__aeabi_dmul>
 8006882:	2702      	movs	r7, #2
 8006884:	2300      	movs	r3, #0
 8006886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688a:	4e77      	ldr	r6, [pc, #476]	; (8006a68 <_dtoa_r+0x598>)
 800688c:	1124      	asrs	r4, r4, #4
 800688e:	2c00      	cmp	r4, #0
 8006890:	f040 8084 	bne.w	800699c <_dtoa_r+0x4cc>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1d2      	bne.n	800683e <_dtoa_r+0x36e>
 8006898:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800689c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8087 	beq.w	80069b6 <_dtoa_r+0x4e6>
 80068a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b6f      	ldr	r3, [pc, #444]	; (8006a6c <_dtoa_r+0x59c>)
 80068b0:	f7fa f884 	bl	80009bc <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d07e      	beq.n	80069b6 <_dtoa_r+0x4e6>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d07b      	beq.n	80069b6 <_dtoa_r+0x4e6>
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dd38      	ble.n	8006936 <_dtoa_r+0x466>
 80068c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b69      	ldr	r3, [pc, #420]	; (8006a70 <_dtoa_r+0x5a0>)
 80068cc:	f7f9 fe04 	bl	80004d8 <__aeabi_dmul>
 80068d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068d4:	9c06      	ldr	r4, [sp, #24]
 80068d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80068da:	3701      	adds	r7, #1
 80068dc:	4638      	mov	r0, r7
 80068de:	f7f9 fd91 	bl	8000404 <__aeabi_i2d>
 80068e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068e6:	f7f9 fdf7 	bl	80004d8 <__aeabi_dmul>
 80068ea:	2200      	movs	r2, #0
 80068ec:	4b61      	ldr	r3, [pc, #388]	; (8006a74 <_dtoa_r+0x5a4>)
 80068ee:	f7f9 fc3d 	bl	800016c <__adddf3>
 80068f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068fa:	9611      	str	r6, [sp, #68]	; 0x44
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d15d      	bne.n	80069bc <_dtoa_r+0x4ec>
 8006900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006904:	2200      	movs	r2, #0
 8006906:	4b5c      	ldr	r3, [pc, #368]	; (8006a78 <_dtoa_r+0x5a8>)
 8006908:	f7f9 fc2e 	bl	8000168 <__aeabi_dsub>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006914:	4633      	mov	r3, r6
 8006916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006918:	f7fa f86e 	bl	80009f8 <__aeabi_dcmpgt>
 800691c:	2800      	cmp	r0, #0
 800691e:	f040 8295 	bne.w	8006e4c <_dtoa_r+0x97c>
 8006922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006928:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800692c:	f7fa f846 	bl	80009bc <__aeabi_dcmplt>
 8006930:	2800      	cmp	r0, #0
 8006932:	f040 8289 	bne.w	8006e48 <_dtoa_r+0x978>
 8006936:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800693a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800693e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006940:	2b00      	cmp	r3, #0
 8006942:	f2c0 8151 	blt.w	8006be8 <_dtoa_r+0x718>
 8006946:	f1bb 0f0e 	cmp.w	fp, #14
 800694a:	f300 814d 	bgt.w	8006be8 <_dtoa_r+0x718>
 800694e:	4b45      	ldr	r3, [pc, #276]	; (8006a64 <_dtoa_r+0x594>)
 8006950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006954:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006958:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800695c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800695e:	2b00      	cmp	r3, #0
 8006960:	f280 80da 	bge.w	8006b18 <_dtoa_r+0x648>
 8006964:	9b08      	ldr	r3, [sp, #32]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f300 80d6 	bgt.w	8006b18 <_dtoa_r+0x648>
 800696c:	f040 826b 	bne.w	8006e46 <_dtoa_r+0x976>
 8006970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006974:	2200      	movs	r2, #0
 8006976:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <_dtoa_r+0x5a8>)
 8006978:	f7f9 fdae 	bl	80004d8 <__aeabi_dmul>
 800697c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006980:	f7fa f830 	bl	80009e4 <__aeabi_dcmpge>
 8006984:	9c08      	ldr	r4, [sp, #32]
 8006986:	4626      	mov	r6, r4
 8006988:	2800      	cmp	r0, #0
 800698a:	f040 8241 	bne.w	8006e10 <_dtoa_r+0x940>
 800698e:	2331      	movs	r3, #49	; 0x31
 8006990:	9f03      	ldr	r7, [sp, #12]
 8006992:	f10b 0b01 	add.w	fp, fp, #1
 8006996:	f807 3b01 	strb.w	r3, [r7], #1
 800699a:	e23d      	b.n	8006e18 <_dtoa_r+0x948>
 800699c:	07e2      	lsls	r2, r4, #31
 800699e:	d505      	bpl.n	80069ac <_dtoa_r+0x4dc>
 80069a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069a4:	f7f9 fd98 	bl	80004d8 <__aeabi_dmul>
 80069a8:	2301      	movs	r3, #1
 80069aa:	3701      	adds	r7, #1
 80069ac:	1064      	asrs	r4, r4, #1
 80069ae:	3608      	adds	r6, #8
 80069b0:	e76d      	b.n	800688e <_dtoa_r+0x3be>
 80069b2:	2702      	movs	r7, #2
 80069b4:	e770      	b.n	8006898 <_dtoa_r+0x3c8>
 80069b6:	46d8      	mov	r8, fp
 80069b8:	9c08      	ldr	r4, [sp, #32]
 80069ba:	e78f      	b.n	80068dc <_dtoa_r+0x40c>
 80069bc:	9903      	ldr	r1, [sp, #12]
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <_dtoa_r+0x594>)
 80069c0:	4421      	add	r1, r4
 80069c2:	9112      	str	r1, [sp, #72]	; 0x48
 80069c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d054      	beq.n	8006a80 <_dtoa_r+0x5b0>
 80069d6:	2000      	movs	r0, #0
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <_dtoa_r+0x5ac>)
 80069da:	f7f9 fea7 	bl	800072c <__aeabi_ddiv>
 80069de:	463b      	mov	r3, r7
 80069e0:	4632      	mov	r2, r6
 80069e2:	f7f9 fbc1 	bl	8000168 <__aeabi_dsub>
 80069e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069ea:	9f03      	ldr	r7, [sp, #12]
 80069ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f0:	f7fa f822 	bl	8000a38 <__aeabi_d2iz>
 80069f4:	4604      	mov	r4, r0
 80069f6:	f7f9 fd05 	bl	8000404 <__aeabi_i2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a02:	f7f9 fbb1 	bl	8000168 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	3430      	adds	r4, #48	; 0x30
 8006a0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a14:	f807 4b01 	strb.w	r4, [r7], #1
 8006a18:	f7f9 ffd0 	bl	80009bc <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d173      	bne.n	8006b08 <_dtoa_r+0x638>
 8006a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a24:	2000      	movs	r0, #0
 8006a26:	4911      	ldr	r1, [pc, #68]	; (8006a6c <_dtoa_r+0x59c>)
 8006a28:	f7f9 fb9e 	bl	8000168 <__aeabi_dsub>
 8006a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a30:	f7f9 ffc4 	bl	80009bc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 80b6 	bne.w	8006ba6 <_dtoa_r+0x6d6>
 8006a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a3c:	429f      	cmp	r7, r3
 8006a3e:	f43f af7a 	beq.w	8006936 <_dtoa_r+0x466>
 8006a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <_dtoa_r+0x5a0>)
 8006a4a:	f7f9 fd45 	bl	80004d8 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <_dtoa_r+0x5a0>)
 8006a5a:	f7f9 fd3d 	bl	80004d8 <__aeabi_dmul>
 8006a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a62:	e7c3      	b.n	80069ec <_dtoa_r+0x51c>
 8006a64:	08008770 	.word	0x08008770
 8006a68:	08008748 	.word	0x08008748
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	40240000 	.word	0x40240000
 8006a74:	401c0000 	.word	0x401c0000
 8006a78:	40140000 	.word	0x40140000
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7f9 fd28 	bl	80004d8 <__aeabi_dmul>
 8006a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a8e:	9c03      	ldr	r4, [sp, #12]
 8006a90:	9314      	str	r3, [sp, #80]	; 0x50
 8006a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a96:	f7f9 ffcf 	bl	8000a38 <__aeabi_d2iz>
 8006a9a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a9c:	f7f9 fcb2 	bl	8000404 <__aeabi_i2d>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa8:	f7f9 fb5e 	bl	8000168 <__aeabi_dsub>
 8006aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aae:	4606      	mov	r6, r0
 8006ab0:	3330      	adds	r3, #48	; 0x30
 8006ab2:	f804 3b01 	strb.w	r3, [r4], #1
 8006ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab8:	460f      	mov	r7, r1
 8006aba:	429c      	cmp	r4, r3
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	d124      	bne.n	8006b0c <_dtoa_r+0x63c>
 8006ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ac6:	4baf      	ldr	r3, [pc, #700]	; (8006d84 <_dtoa_r+0x8b4>)
 8006ac8:	f7f9 fb50 	bl	800016c <__adddf3>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 ff90 	bl	80009f8 <__aeabi_dcmpgt>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d163      	bne.n	8006ba4 <_dtoa_r+0x6d4>
 8006adc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	49a8      	ldr	r1, [pc, #672]	; (8006d84 <_dtoa_r+0x8b4>)
 8006ae4:	f7f9 fb40 	bl	8000168 <__aeabi_dsub>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 ff64 	bl	80009bc <__aeabi_dcmplt>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f43f af1e 	beq.w	8006936 <_dtoa_r+0x466>
 8006afa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006afc:	1e7b      	subs	r3, r7, #1
 8006afe:	9314      	str	r3, [sp, #80]	; 0x50
 8006b00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d0f8      	beq.n	8006afa <_dtoa_r+0x62a>
 8006b08:	46c3      	mov	fp, r8
 8006b0a:	e03b      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006b0c:	4b9e      	ldr	r3, [pc, #632]	; (8006d88 <_dtoa_r+0x8b8>)
 8006b0e:	f7f9 fce3 	bl	80004d8 <__aeabi_dmul>
 8006b12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b16:	e7bc      	b.n	8006a92 <_dtoa_r+0x5c2>
 8006b18:	9f03      	ldr	r7, [sp, #12]
 8006b1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 fe01 	bl	800072c <__aeabi_ddiv>
 8006b2a:	f7f9 ff85 	bl	8000a38 <__aeabi_d2iz>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7f9 fc68 	bl	8000404 <__aeabi_i2d>
 8006b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b38:	f7f9 fcce 	bl	80004d8 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fb10 	bl	8000168 <__aeabi_dsub>
 8006b48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b4c:	f807 6b01 	strb.w	r6, [r7], #1
 8006b50:	9e03      	ldr	r6, [sp, #12]
 8006b52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006b56:	1bbe      	subs	r6, r7, r6
 8006b58:	45b4      	cmp	ip, r6
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	d136      	bne.n	8006bce <_dtoa_r+0x6fe>
 8006b60:	f7f9 fb04 	bl	800016c <__adddf3>
 8006b64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4689      	mov	r9, r1
 8006b6c:	f7f9 ff44 	bl	80009f8 <__aeabi_dcmpgt>
 8006b70:	bb58      	cbnz	r0, 8006bca <_dtoa_r+0x6fa>
 8006b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7f9 ff15 	bl	80009a8 <__aeabi_dcmpeq>
 8006b7e:	b108      	cbz	r0, 8006b84 <_dtoa_r+0x6b4>
 8006b80:	07e3      	lsls	r3, r4, #31
 8006b82:	d422      	bmi.n	8006bca <_dtoa_r+0x6fa>
 8006b84:	4651      	mov	r1, sl
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 fbc2 	bl	8007310 <_Bfree>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b90:	703b      	strb	r3, [r7, #0]
 8006b92:	f10b 0301 	add.w	r3, fp, #1
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f43f ace6 	beq.w	800656c <_dtoa_r+0x9c>
 8006ba0:	601f      	str	r7, [r3, #0]
 8006ba2:	e4e3      	b.n	800656c <_dtoa_r+0x9c>
 8006ba4:	4627      	mov	r7, r4
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	461f      	mov	r7, r3
 8006baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bae:	2a39      	cmp	r2, #57	; 0x39
 8006bb0:	d107      	bne.n	8006bc2 <_dtoa_r+0x6f2>
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d1f7      	bne.n	8006ba8 <_dtoa_r+0x6d8>
 8006bb8:	2230      	movs	r2, #48	; 0x30
 8006bba:	9903      	ldr	r1, [sp, #12]
 8006bbc:	f108 0801 	add.w	r8, r8, #1
 8006bc0:	700a      	strb	r2, [r1, #0]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e79e      	b.n	8006b08 <_dtoa_r+0x638>
 8006bca:	46d8      	mov	r8, fp
 8006bcc:	e7eb      	b.n	8006ba6 <_dtoa_r+0x6d6>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4b6d      	ldr	r3, [pc, #436]	; (8006d88 <_dtoa_r+0x8b8>)
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4689      	mov	r9, r1
 8006bde:	f7f9 fee3 	bl	80009a8 <__aeabi_dcmpeq>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d09b      	beq.n	8006b1e <_dtoa_r+0x64e>
 8006be6:	e7cd      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	f000 80c4 	beq.w	8006d78 <_dtoa_r+0x8a8>
 8006bf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bf2:	2a01      	cmp	r2, #1
 8006bf4:	f300 80a8 	bgt.w	8006d48 <_dtoa_r+0x878>
 8006bf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	f000 80a0 	beq.w	8006d40 <_dtoa_r+0x870>
 8006c00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c04:	464f      	mov	r7, r9
 8006c06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4499      	add	r9, r3
 8006c12:	9209      	str	r2, [sp, #36]	; 0x24
 8006c14:	f000 fc32 	bl	800747c <__i2b>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	b15f      	cbz	r7, 8006c34 <_dtoa_r+0x764>
 8006c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dd08      	ble.n	8006c34 <_dtoa_r+0x764>
 8006c22:	42bb      	cmp	r3, r7
 8006c24:	bfa8      	it	ge
 8006c26:	463b      	movge	r3, r7
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	eba9 0903 	sub.w	r9, r9, r3
 8006c2e:	1aff      	subs	r7, r7, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
 8006c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c36:	b1f3      	cbz	r3, 8006c76 <_dtoa_r+0x7a6>
 8006c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80a0 	beq.w	8006d80 <_dtoa_r+0x8b0>
 8006c40:	2c00      	cmp	r4, #0
 8006c42:	dd10      	ble.n	8006c66 <_dtoa_r+0x796>
 8006c44:	4631      	mov	r1, r6
 8006c46:	4622      	mov	r2, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fcd5 	bl	80075f8 <__pow5mult>
 8006c4e:	4652      	mov	r2, sl
 8006c50:	4601      	mov	r1, r0
 8006c52:	4606      	mov	r6, r0
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 fc27 	bl	80074a8 <__multiply>
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fb56 	bl	8007310 <_Bfree>
 8006c64:	46c2      	mov	sl, r8
 8006c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c68:	1b1a      	subs	r2, r3, r4
 8006c6a:	d004      	beq.n	8006c76 <_dtoa_r+0x7a6>
 8006c6c:	4651      	mov	r1, sl
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fcc2 	bl	80075f8 <__pow5mult>
 8006c74:	4682      	mov	sl, r0
 8006c76:	2101      	movs	r1, #1
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fbff 	bl	800747c <__i2b>
 8006c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c80:	4604      	mov	r4, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f340 8082 	ble.w	8006d8c <_dtoa_r+0x8bc>
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fcb3 	bl	80075f8 <__pow5mult>
 8006c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c94:	4604      	mov	r4, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	dd7b      	ble.n	8006d92 <_dtoa_r+0x8c2>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ca4:	6918      	ldr	r0, [r3, #16]
 8006ca6:	f000 fb9b 	bl	80073e0 <__hi0bits>
 8006caa:	f1c0 0020 	rsb	r0, r0, #32
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	4418      	add	r0, r3
 8006cb2:	f010 001f 	ands.w	r0, r0, #31
 8006cb6:	f000 8092 	beq.w	8006dde <_dtoa_r+0x90e>
 8006cba:	f1c0 0320 	rsb	r3, r0, #32
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	f340 8085 	ble.w	8006dce <_dtoa_r+0x8fe>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	f1c0 001c 	rsb	r0, r0, #28
 8006cca:	4403      	add	r3, r0
 8006ccc:	4481      	add	r9, r0
 8006cce:	4407      	add	r7, r0
 8006cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd2:	f1b9 0f00 	cmp.w	r9, #0
 8006cd6:	dd05      	ble.n	8006ce4 <_dtoa_r+0x814>
 8006cd8:	4651      	mov	r1, sl
 8006cda:	464a      	mov	r2, r9
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 fce5 	bl	80076ac <__lshift>
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd05      	ble.n	8006cf6 <_dtoa_r+0x826>
 8006cea:	4621      	mov	r1, r4
 8006cec:	461a      	mov	r2, r3
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fcdc 	bl	80076ac <__lshift>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d072      	beq.n	8006de2 <_dtoa_r+0x912>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f000 fd40 	bl	8007784 <__mcmp>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	da6c      	bge.n	8006de2 <_dtoa_r+0x912>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 fb20 	bl	8007354 <__multadd>
 8006d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d16:	4682      	mov	sl, r0
 8006d18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 81ac 	beq.w	800707a <_dtoa_r+0xbaa>
 8006d22:	2300      	movs	r3, #0
 8006d24:	4631      	mov	r1, r6
 8006d26:	220a      	movs	r2, #10
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 fb13 	bl	8007354 <__multadd>
 8006d2e:	9b06      	ldr	r3, [sp, #24]
 8006d30:	4606      	mov	r6, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f300 8093 	bgt.w	8006e5e <_dtoa_r+0x98e>
 8006d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	dc59      	bgt.n	8006df2 <_dtoa_r+0x922>
 8006d3e:	e08e      	b.n	8006e5e <_dtoa_r+0x98e>
 8006d40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d46:	e75d      	b.n	8006c04 <_dtoa_r+0x734>
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	1e5c      	subs	r4, r3, #1
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	bfbf      	itttt	lt
 8006d52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006d56:	1ae3      	sublt	r3, r4, r3
 8006d58:	18d2      	addlt	r2, r2, r3
 8006d5a:	bfa8      	it	ge
 8006d5c:	1b1c      	subge	r4, r3, r4
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	bfbe      	ittt	lt
 8006d62:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d64:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006d66:	2400      	movlt	r4, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bfb5      	itete	lt
 8006d6c:	eba9 0703 	sublt.w	r7, r9, r3
 8006d70:	464f      	movge	r7, r9
 8006d72:	2300      	movlt	r3, #0
 8006d74:	9b08      	ldrge	r3, [sp, #32]
 8006d76:	e747      	b.n	8006c08 <_dtoa_r+0x738>
 8006d78:	464f      	mov	r7, r9
 8006d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d7e:	e74c      	b.n	8006c1a <_dtoa_r+0x74a>
 8006d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d82:	e773      	b.n	8006c6c <_dtoa_r+0x79c>
 8006d84:	3fe00000 	.word	0x3fe00000
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	dc18      	bgt.n	8006dc4 <_dtoa_r+0x8f4>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	b9b3      	cbnz	r3, 8006dc4 <_dtoa_r+0x8f4>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d9c:	b993      	cbnz	r3, 8006dc4 <_dtoa_r+0x8f4>
 8006d9e:	9b05      	ldr	r3, [sp, #20]
 8006da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	0d1b      	lsrs	r3, r3, #20
 8006da6:	051b      	lsls	r3, r3, #20
 8006da8:	b17b      	cbz	r3, 8006dca <_dtoa_r+0x8fa>
 8006daa:	f04f 0801 	mov.w	r8, #1
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	3301      	adds	r3, #1
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f47f af6f 	bne.w	8006c9e <_dtoa_r+0x7ce>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e774      	b.n	8006cae <_dtoa_r+0x7de>
 8006dc4:	f04f 0800 	mov.w	r8, #0
 8006dc8:	e7f6      	b.n	8006db8 <_dtoa_r+0x8e8>
 8006dca:	4698      	mov	r8, r3
 8006dcc:	e7f4      	b.n	8006db8 <_dtoa_r+0x8e8>
 8006dce:	d080      	beq.n	8006cd2 <_dtoa_r+0x802>
 8006dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd2:	331c      	adds	r3, #28
 8006dd4:	441a      	add	r2, r3
 8006dd6:	4499      	add	r9, r3
 8006dd8:	441f      	add	r7, r3
 8006dda:	9209      	str	r2, [sp, #36]	; 0x24
 8006ddc:	e779      	b.n	8006cd2 <_dtoa_r+0x802>
 8006dde:	4603      	mov	r3, r0
 8006de0:	e7f6      	b.n	8006dd0 <_dtoa_r+0x900>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc34      	bgt.n	8006e52 <_dtoa_r+0x982>
 8006de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	dd31      	ble.n	8006e52 <_dtoa_r+0x982>
 8006dee:	9b08      	ldr	r3, [sp, #32]
 8006df0:	9306      	str	r3, [sp, #24]
 8006df2:	9b06      	ldr	r3, [sp, #24]
 8006df4:	b963      	cbnz	r3, 8006e10 <_dtoa_r+0x940>
 8006df6:	4621      	mov	r1, r4
 8006df8:	2205      	movs	r2, #5
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 faaa 	bl	8007354 <__multadd>
 8006e00:	4601      	mov	r1, r0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4650      	mov	r0, sl
 8006e06:	f000 fcbd 	bl	8007784 <__mcmp>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f73f adbf 	bgt.w	800698e <_dtoa_r+0x4be>
 8006e10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e12:	9f03      	ldr	r7, [sp, #12]
 8006e14:	ea6f 0b03 	mvn.w	fp, r3
 8006e18:	f04f 0800 	mov.w	r8, #0
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fa76 	bl	8007310 <_Bfree>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	f43f aead 	beq.w	8006b84 <_dtoa_r+0x6b4>
 8006e2a:	f1b8 0f00 	cmp.w	r8, #0
 8006e2e:	d005      	beq.n	8006e3c <_dtoa_r+0x96c>
 8006e30:	45b0      	cmp	r8, r6
 8006e32:	d003      	beq.n	8006e3c <_dtoa_r+0x96c>
 8006e34:	4641      	mov	r1, r8
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fa6a 	bl	8007310 <_Bfree>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fa66 	bl	8007310 <_Bfree>
 8006e44:	e69e      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006e46:	2400      	movs	r4, #0
 8006e48:	4626      	mov	r6, r4
 8006e4a:	e7e1      	b.n	8006e10 <_dtoa_r+0x940>
 8006e4c:	46c3      	mov	fp, r8
 8006e4e:	4626      	mov	r6, r4
 8006e50:	e59d      	b.n	800698e <_dtoa_r+0x4be>
 8006e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80c8 	beq.w	8006fea <_dtoa_r+0xb1a>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	9306      	str	r3, [sp, #24]
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	dd05      	ble.n	8006e6e <_dtoa_r+0x99e>
 8006e62:	4631      	mov	r1, r6
 8006e64:	463a      	mov	r2, r7
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 fc20 	bl	80076ac <__lshift>
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	f1b8 0f00 	cmp.w	r8, #0
 8006e72:	d05b      	beq.n	8006f2c <_dtoa_r+0xa5c>
 8006e74:	4628      	mov	r0, r5
 8006e76:	6871      	ldr	r1, [r6, #4]
 8006e78:	f000 fa0a 	bl	8007290 <_Balloc>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	b928      	cbnz	r0, 8006e8c <_dtoa_r+0x9bc>
 8006e80:	4602      	mov	r2, r0
 8006e82:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e86:	4b81      	ldr	r3, [pc, #516]	; (800708c <_dtoa_r+0xbbc>)
 8006e88:	f7ff bb36 	b.w	80064f8 <_dtoa_r+0x28>
 8006e8c:	6932      	ldr	r2, [r6, #16]
 8006e8e:	f106 010c 	add.w	r1, r6, #12
 8006e92:	3202      	adds	r2, #2
 8006e94:	0092      	lsls	r2, r2, #2
 8006e96:	300c      	adds	r0, #12
 8006e98:	f000 ff9e 	bl	8007dd8 <memcpy>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fc03 	bl	80076ac <__lshift>
 8006ea6:	46b0      	mov	r8, r6
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	9a03      	ldr	r2, [sp, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f7ff fa78 	bl	80063be <quorem>
 8006ece:	4641      	mov	r1, r8
 8006ed0:	9006      	str	r0, [sp, #24]
 8006ed2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f000 fc54 	bl	8007784 <__mcmp>
 8006edc:	4632      	mov	r2, r6
 8006ede:	9009      	str	r0, [sp, #36]	; 0x24
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 fc6a 	bl	80077bc <__mdiff>
 8006ee8:	68c2      	ldr	r2, [r0, #12]
 8006eea:	4607      	mov	r7, r0
 8006eec:	bb02      	cbnz	r2, 8006f30 <_dtoa_r+0xa60>
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4650      	mov	r0, sl
 8006ef2:	f000 fc47 	bl	8007784 <__mcmp>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4639      	mov	r1, r7
 8006efa:	4628      	mov	r0, r5
 8006efc:	920c      	str	r2, [sp, #48]	; 0x30
 8006efe:	f000 fa07 	bl	8007310 <_Bfree>
 8006f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f06:	9f08      	ldr	r7, [sp, #32]
 8006f08:	ea43 0102 	orr.w	r1, r3, r2
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0e:	4319      	orrs	r1, r3
 8006f10:	d110      	bne.n	8006f34 <_dtoa_r+0xa64>
 8006f12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f16:	d029      	beq.n	8006f6c <_dtoa_r+0xa9c>
 8006f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd02      	ble.n	8006f24 <_dtoa_r+0xa54>
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	f883 9000 	strb.w	r9, [r3]
 8006f2a:	e777      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	e7ba      	b.n	8006ea6 <_dtoa_r+0x9d6>
 8006f30:	2201      	movs	r2, #1
 8006f32:	e7e1      	b.n	8006ef8 <_dtoa_r+0xa28>
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db04      	blt.n	8006f44 <_dtoa_r+0xa74>
 8006f3a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f40:	430b      	orrs	r3, r1
 8006f42:	d120      	bne.n	8006f86 <_dtoa_r+0xab6>
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	dded      	ble.n	8006f24 <_dtoa_r+0xa54>
 8006f48:	4651      	mov	r1, sl
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fbad 	bl	80076ac <__lshift>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4682      	mov	sl, r0
 8006f56:	f000 fc15 	bl	8007784 <__mcmp>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	dc03      	bgt.n	8006f66 <_dtoa_r+0xa96>
 8006f5e:	d1e1      	bne.n	8006f24 <_dtoa_r+0xa54>
 8006f60:	f019 0f01 	tst.w	r9, #1
 8006f64:	d0de      	beq.n	8006f24 <_dtoa_r+0xa54>
 8006f66:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f6a:	d1d8      	bne.n	8006f1e <_dtoa_r+0xa4e>
 8006f6c:	2339      	movs	r3, #57	; 0x39
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	7013      	strb	r3, [r2, #0]
 8006f72:	463b      	mov	r3, r7
 8006f74:	461f      	mov	r7, r3
 8006f76:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2a39      	cmp	r2, #57	; 0x39
 8006f7e:	d06b      	beq.n	8007058 <_dtoa_r+0xb88>
 8006f80:	3201      	adds	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e74a      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	dd07      	ble.n	8006f9a <_dtoa_r+0xaca>
 8006f8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f8e:	d0ed      	beq.n	8006f6c <_dtoa_r+0xa9c>
 8006f90:	9a04      	ldr	r2, [sp, #16]
 8006f92:	f109 0301 	add.w	r3, r9, #1
 8006f96:	7013      	strb	r3, [r2, #0]
 8006f98:	e740      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f9e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d042      	beq.n	800702c <_dtoa_r+0xb5c>
 8006fa6:	4651      	mov	r1, sl
 8006fa8:	2300      	movs	r3, #0
 8006faa:	220a      	movs	r2, #10
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 f9d1 	bl	8007354 <__multadd>
 8006fb2:	45b0      	cmp	r8, r6
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	f04f 020a 	mov.w	r2, #10
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	d107      	bne.n	8006fd4 <_dtoa_r+0xb04>
 8006fc4:	f000 f9c6 	bl	8007354 <__multadd>
 8006fc8:	4680      	mov	r8, r0
 8006fca:	4606      	mov	r6, r0
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	9308      	str	r3, [sp, #32]
 8006fd2:	e775      	b.n	8006ec0 <_dtoa_r+0x9f0>
 8006fd4:	f000 f9be 	bl	8007354 <__multadd>
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4680      	mov	r8, r0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	220a      	movs	r2, #10
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f9b7 	bl	8007354 <__multadd>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	e7f0      	b.n	8006fcc <_dtoa_r+0xafc>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	9306      	str	r3, [sp, #24]
 8006fee:	9f03      	ldr	r7, [sp, #12]
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7ff f9e3 	bl	80063be <quorem>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ffe:	f807 9b01 	strb.w	r9, [r7], #1
 8007002:	1afa      	subs	r2, r7, r3
 8007004:	9b06      	ldr	r3, [sp, #24]
 8007006:	4293      	cmp	r3, r2
 8007008:	dd07      	ble.n	800701a <_dtoa_r+0xb4a>
 800700a:	4651      	mov	r1, sl
 800700c:	2300      	movs	r3, #0
 800700e:	220a      	movs	r2, #10
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f99f 	bl	8007354 <__multadd>
 8007016:	4682      	mov	sl, r0
 8007018:	e7ea      	b.n	8006ff0 <_dtoa_r+0xb20>
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	f04f 0800 	mov.w	r8, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	bfcc      	ite	gt
 8007024:	461f      	movgt	r7, r3
 8007026:	2701      	movle	r7, #1
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	441f      	add	r7, r3
 800702c:	4651      	mov	r1, sl
 800702e:	2201      	movs	r2, #1
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fb3b 	bl	80076ac <__lshift>
 8007036:	4621      	mov	r1, r4
 8007038:	4682      	mov	sl, r0
 800703a:	f000 fba3 	bl	8007784 <__mcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	dc97      	bgt.n	8006f72 <_dtoa_r+0xaa2>
 8007042:	d102      	bne.n	800704a <_dtoa_r+0xb7a>
 8007044:	f019 0f01 	tst.w	r9, #1
 8007048:	d193      	bne.n	8006f72 <_dtoa_r+0xaa2>
 800704a:	463b      	mov	r3, r7
 800704c:	461f      	mov	r7, r3
 800704e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007052:	2a30      	cmp	r2, #48	; 0x30
 8007054:	d0fa      	beq.n	800704c <_dtoa_r+0xb7c>
 8007056:	e6e1      	b.n	8006e1c <_dtoa_r+0x94c>
 8007058:	9a03      	ldr	r2, [sp, #12]
 800705a:	429a      	cmp	r2, r3
 800705c:	d18a      	bne.n	8006f74 <_dtoa_r+0xaa4>
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	f10b 0b01 	add.w	fp, fp, #1
 8007064:	e797      	b.n	8006f96 <_dtoa_r+0xac6>
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <_dtoa_r+0xbc0>)
 8007068:	f7ff ba9f 	b.w	80065aa <_dtoa_r+0xda>
 800706c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800706e:	2b00      	cmp	r3, #0
 8007070:	f47f aa77 	bne.w	8006562 <_dtoa_r+0x92>
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <_dtoa_r+0xbc4>)
 8007076:	f7ff ba98 	b.w	80065aa <_dtoa_r+0xda>
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dcb6      	bgt.n	8006fee <_dtoa_r+0xb1e>
 8007080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007082:	2b02      	cmp	r3, #2
 8007084:	f73f aeb5 	bgt.w	8006df2 <_dtoa_r+0x922>
 8007088:	e7b1      	b.n	8006fee <_dtoa_r+0xb1e>
 800708a:	bf00      	nop
 800708c:	080086d8 	.word	0x080086d8
 8007090:	08008638 	.word	0x08008638
 8007094:	0800865c 	.word	0x0800865c

08007098 <_free_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4605      	mov	r5, r0
 800709c:	2900      	cmp	r1, #0
 800709e:	d040      	beq.n	8007122 <_free_r+0x8a>
 80070a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a4:	1f0c      	subs	r4, r1, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfb8      	it	lt
 80070aa:	18e4      	addlt	r4, r4, r3
 80070ac:	f000 f8e4 	bl	8007278 <__malloc_lock>
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <_free_r+0x8c>)
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	b933      	cbnz	r3, 80070c4 <_free_r+0x2c>
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	6014      	str	r4, [r2, #0]
 80070ba:	4628      	mov	r0, r5
 80070bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c0:	f000 b8e0 	b.w	8007284 <__malloc_unlock>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d908      	bls.n	80070da <_free_r+0x42>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	1821      	adds	r1, r4, r0
 80070cc:	428b      	cmp	r3, r1
 80070ce:	bf01      	itttt	eq
 80070d0:	6819      	ldreq	r1, [r3, #0]
 80070d2:	685b      	ldreq	r3, [r3, #4]
 80070d4:	1809      	addeq	r1, r1, r0
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	e7ed      	b.n	80070b6 <_free_r+0x1e>
 80070da:	461a      	mov	r2, r3
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b10b      	cbz	r3, 80070e4 <_free_r+0x4c>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d9fa      	bls.n	80070da <_free_r+0x42>
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	1850      	adds	r0, r2, r1
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d10b      	bne.n	8007104 <_free_r+0x6c>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	4401      	add	r1, r0
 80070f0:	1850      	adds	r0, r2, r1
 80070f2:	4283      	cmp	r3, r0
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	d1e0      	bne.n	80070ba <_free_r+0x22>
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4408      	add	r0, r1
 80070fe:	6010      	str	r0, [r2, #0]
 8007100:	6053      	str	r3, [r2, #4]
 8007102:	e7da      	b.n	80070ba <_free_r+0x22>
 8007104:	d902      	bls.n	800710c <_free_r+0x74>
 8007106:	230c      	movs	r3, #12
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	e7d6      	b.n	80070ba <_free_r+0x22>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	1821      	adds	r1, r4, r0
 8007110:	428b      	cmp	r3, r1
 8007112:	bf01      	itttt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	1809      	addeq	r1, r1, r0
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6054      	str	r4, [r2, #4]
 8007120:	e7cb      	b.n	80070ba <_free_r+0x22>
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200004cc 	.word	0x200004cc

08007128 <malloc>:
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <malloc+0xc>)
 800712a:	4601      	mov	r1, r0
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f000 b823 	b.w	8007178 <_malloc_r>
 8007132:	bf00      	nop
 8007134:	20000068 	.word	0x20000068

08007138 <sbrk_aligned>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4e0e      	ldr	r6, [pc, #56]	; (8007174 <sbrk_aligned+0x3c>)
 800713c:	460c      	mov	r4, r1
 800713e:	6831      	ldr	r1, [r6, #0]
 8007140:	4605      	mov	r5, r0
 8007142:	b911      	cbnz	r1, 800714a <sbrk_aligned+0x12>
 8007144:	f000 fe38 	bl	8007db8 <_sbrk_r>
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f000 fe33 	bl	8007db8 <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d00a      	beq.n	800716c <sbrk_aligned+0x34>
 8007156:	1cc4      	adds	r4, r0, #3
 8007158:	f024 0403 	bic.w	r4, r4, #3
 800715c:	42a0      	cmp	r0, r4
 800715e:	d007      	beq.n	8007170 <sbrk_aligned+0x38>
 8007160:	1a21      	subs	r1, r4, r0
 8007162:	4628      	mov	r0, r5
 8007164:	f000 fe28 	bl	8007db8 <_sbrk_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d101      	bne.n	8007170 <sbrk_aligned+0x38>
 800716c:	f04f 34ff 	mov.w	r4, #4294967295
 8007170:	4620      	mov	r0, r4
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	200004d0 	.word	0x200004d0

08007178 <_malloc_r>:
 8007178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717c:	1ccd      	adds	r5, r1, #3
 800717e:	f025 0503 	bic.w	r5, r5, #3
 8007182:	3508      	adds	r5, #8
 8007184:	2d0c      	cmp	r5, #12
 8007186:	bf38      	it	cc
 8007188:	250c      	movcc	r5, #12
 800718a:	2d00      	cmp	r5, #0
 800718c:	4607      	mov	r7, r0
 800718e:	db01      	blt.n	8007194 <_malloc_r+0x1c>
 8007190:	42a9      	cmp	r1, r5
 8007192:	d905      	bls.n	80071a0 <_malloc_r+0x28>
 8007194:	230c      	movs	r3, #12
 8007196:	2600      	movs	r6, #0
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	4630      	mov	r0, r6
 800719c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007274 <_malloc_r+0xfc>
 80071a4:	f000 f868 	bl	8007278 <__malloc_lock>
 80071a8:	f8d8 3000 	ldr.w	r3, [r8]
 80071ac:	461c      	mov	r4, r3
 80071ae:	bb5c      	cbnz	r4, 8007208 <_malloc_r+0x90>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ffc0 	bl	8007138 <sbrk_aligned>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	4604      	mov	r4, r0
 80071bc:	d155      	bne.n	800726a <_malloc_r+0xf2>
 80071be:	f8d8 4000 	ldr.w	r4, [r8]
 80071c2:	4626      	mov	r6, r4
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	d145      	bne.n	8007254 <_malloc_r+0xdc>
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d048      	beq.n	800725e <_malloc_r+0xe6>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	4631      	mov	r1, r6
 80071d0:	4638      	mov	r0, r7
 80071d2:	eb04 0903 	add.w	r9, r4, r3
 80071d6:	f000 fdef 	bl	8007db8 <_sbrk_r>
 80071da:	4581      	cmp	r9, r0
 80071dc:	d13f      	bne.n	800725e <_malloc_r+0xe6>
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	4638      	mov	r0, r7
 80071e2:	1a6d      	subs	r5, r5, r1
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7ff ffa7 	bl	8007138 <sbrk_aligned>
 80071ea:	3001      	adds	r0, #1
 80071ec:	d037      	beq.n	800725e <_malloc_r+0xe6>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	442b      	add	r3, r5
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d038      	beq.n	800726e <_malloc_r+0xf6>
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	42a2      	cmp	r2, r4
 8007200:	d12b      	bne.n	800725a <_malloc_r+0xe2>
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	e00f      	b.n	8007228 <_malloc_r+0xb0>
 8007208:	6822      	ldr	r2, [r4, #0]
 800720a:	1b52      	subs	r2, r2, r5
 800720c:	d41f      	bmi.n	800724e <_malloc_r+0xd6>
 800720e:	2a0b      	cmp	r2, #11
 8007210:	d917      	bls.n	8007242 <_malloc_r+0xca>
 8007212:	1961      	adds	r1, r4, r5
 8007214:	42a3      	cmp	r3, r4
 8007216:	6025      	str	r5, [r4, #0]
 8007218:	bf18      	it	ne
 800721a:	6059      	strne	r1, [r3, #4]
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	bf08      	it	eq
 8007220:	f8c8 1000 	streq.w	r1, [r8]
 8007224:	5162      	str	r2, [r4, r5]
 8007226:	604b      	str	r3, [r1, #4]
 8007228:	4638      	mov	r0, r7
 800722a:	f104 060b 	add.w	r6, r4, #11
 800722e:	f000 f829 	bl	8007284 <__malloc_unlock>
 8007232:	f026 0607 	bic.w	r6, r6, #7
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	1af2      	subs	r2, r6, r3
 800723a:	d0ae      	beq.n	800719a <_malloc_r+0x22>
 800723c:	1b9b      	subs	r3, r3, r6
 800723e:	50a3      	str	r3, [r4, r2]
 8007240:	e7ab      	b.n	800719a <_malloc_r+0x22>
 8007242:	42a3      	cmp	r3, r4
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	d1dd      	bne.n	8007204 <_malloc_r+0x8c>
 8007248:	f8c8 2000 	str.w	r2, [r8]
 800724c:	e7ec      	b.n	8007228 <_malloc_r+0xb0>
 800724e:	4623      	mov	r3, r4
 8007250:	6864      	ldr	r4, [r4, #4]
 8007252:	e7ac      	b.n	80071ae <_malloc_r+0x36>
 8007254:	4634      	mov	r4, r6
 8007256:	6876      	ldr	r6, [r6, #4]
 8007258:	e7b4      	b.n	80071c4 <_malloc_r+0x4c>
 800725a:	4613      	mov	r3, r2
 800725c:	e7cc      	b.n	80071f8 <_malloc_r+0x80>
 800725e:	230c      	movs	r3, #12
 8007260:	4638      	mov	r0, r7
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	f000 f80e 	bl	8007284 <__malloc_unlock>
 8007268:	e797      	b.n	800719a <_malloc_r+0x22>
 800726a:	6025      	str	r5, [r4, #0]
 800726c:	e7dc      	b.n	8007228 <_malloc_r+0xb0>
 800726e:	605b      	str	r3, [r3, #4]
 8007270:	deff      	udf	#255	; 0xff
 8007272:	bf00      	nop
 8007274:	200004cc 	.word	0x200004cc

08007278 <__malloc_lock>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__malloc_lock+0x8>)
 800727a:	f7ff b890 	b.w	800639e <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	200004c8 	.word	0x200004c8

08007284 <__malloc_unlock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_unlock+0x8>)
 8007286:	f7ff b88b 	b.w	80063a0 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	200004c8 	.word	0x200004c8

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	69c6      	ldr	r6, [r0, #28]
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ff44 	bl	8007128 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	61e0      	str	r0, [r4, #28]
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	216b      	movs	r1, #107	; 0x6b
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <_Balloc+0x78>)
 80072aa:	4818      	ldr	r0, [pc, #96]	; (800730c <_Balloc+0x7c>)
 80072ac:	f000 fda2 	bl	8007df4 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	69e6      	ldr	r6, [r4, #28]
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	69e3      	ldr	r3, [r4, #28]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	4620      	mov	r0, r4
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	f000 fdac 	bl	8007e30 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fda3 	bl	8007e30 <_calloc_r>
 80072ea:	69e3      	ldr	r3, [r4, #28]
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	08008669 	.word	0x08008669
 800730c:	080086e9 	.word	0x080086e9

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	69c6      	ldr	r6, [r0, #28]
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ff04 	bl	8007128 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	61e8      	str	r0, [r5, #28]
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	218f      	movs	r1, #143	; 0x8f
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <_Bfree+0x3c>)
 800732a:	4809      	ldr	r0, [pc, #36]	; (8007350 <_Bfree+0x40>)
 800732c:	f000 fd62 	bl	8007df4 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	69eb      	ldr	r3, [r5, #28]
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	08008669 	.word	0x08008669
 8007350:	080086e9 	.word	0x080086e9

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	461e      	mov	r6, r3
 800735e:	2000      	movs	r0, #0
 8007360:	690d      	ldr	r5, [r1, #16]
 8007362:	f101 0c14 	add.w	ip, r1, #20
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	3001      	adds	r0, #1
 800736c:	b299      	uxth	r1, r3
 800736e:	fb02 6101 	mla	r1, r2, r1, r6
 8007372:	0c1e      	lsrs	r6, r3, #16
 8007374:	0c0b      	lsrs	r3, r1, #16
 8007376:	fb02 3306 	mla	r3, r2, r6, r3
 800737a:	b289      	uxth	r1, r1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	21ba      	movs	r1, #186	; 0xba
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <__multadd+0x84>)
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <__multadd+0x88>)
 80073aa:	f000 fd23 	bl	8007df4 <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	f104 010c 	add.w	r1, r4, #12
 80073b4:	3202      	adds	r2, #2
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f000 fd0d 	bl	8007dd8 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	080086d8 	.word	0x080086d8
 80073dc:	080086e9 	.word	0x080086e9

080073e0 <__hi0bits>:
 80073e0:	0c02      	lsrs	r2, r0, #16
 80073e2:	0412      	lsls	r2, r2, #16
 80073e4:	4603      	mov	r3, r0
 80073e6:	b9ca      	cbnz	r2, 800741c <__hi0bits+0x3c>
 80073e8:	0403      	lsls	r3, r0, #16
 80073ea:	2010      	movs	r0, #16
 80073ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073f0:	bf04      	itt	eq
 80073f2:	021b      	lsleq	r3, r3, #8
 80073f4:	3008      	addeq	r0, #8
 80073f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073fa:	bf04      	itt	eq
 80073fc:	011b      	lsleq	r3, r3, #4
 80073fe:	3004      	addeq	r0, #4
 8007400:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007404:	bf04      	itt	eq
 8007406:	009b      	lsleq	r3, r3, #2
 8007408:	3002      	addeq	r0, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	db05      	blt.n	800741a <__hi0bits+0x3a>
 800740e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007412:	f100 0001 	add.w	r0, r0, #1
 8007416:	bf08      	it	eq
 8007418:	2020      	moveq	r0, #32
 800741a:	4770      	bx	lr
 800741c:	2000      	movs	r0, #0
 800741e:	e7e5      	b.n	80073ec <__hi0bits+0xc>

08007420 <__lo0bits>:
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	4602      	mov	r2, r0
 8007424:	f013 0007 	ands.w	r0, r3, #7
 8007428:	d00b      	beq.n	8007442 <__lo0bits+0x22>
 800742a:	07d9      	lsls	r1, r3, #31
 800742c:	d421      	bmi.n	8007472 <__lo0bits+0x52>
 800742e:	0798      	lsls	r0, r3, #30
 8007430:	bf49      	itett	mi
 8007432:	085b      	lsrmi	r3, r3, #1
 8007434:	089b      	lsrpl	r3, r3, #2
 8007436:	2001      	movmi	r0, #1
 8007438:	6013      	strmi	r3, [r2, #0]
 800743a:	bf5c      	itt	pl
 800743c:	2002      	movpl	r0, #2
 800743e:	6013      	strpl	r3, [r2, #0]
 8007440:	4770      	bx	lr
 8007442:	b299      	uxth	r1, r3
 8007444:	b909      	cbnz	r1, 800744a <__lo0bits+0x2a>
 8007446:	2010      	movs	r0, #16
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	b909      	cbnz	r1, 8007452 <__lo0bits+0x32>
 800744e:	3008      	adds	r0, #8
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	0719      	lsls	r1, r3, #28
 8007454:	bf04      	itt	eq
 8007456:	091b      	lsreq	r3, r3, #4
 8007458:	3004      	addeq	r0, #4
 800745a:	0799      	lsls	r1, r3, #30
 800745c:	bf04      	itt	eq
 800745e:	089b      	lsreq	r3, r3, #2
 8007460:	3002      	addeq	r0, #2
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d403      	bmi.n	800746e <__lo0bits+0x4e>
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f100 0001 	add.w	r0, r0, #1
 800746c:	d003      	beq.n	8007476 <__lo0bits+0x56>
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4770      	bx	lr
 8007472:	2000      	movs	r0, #0
 8007474:	4770      	bx	lr
 8007476:	2020      	movs	r0, #32
 8007478:	4770      	bx	lr
	...

0800747c <__i2b>:
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
 8007480:	2101      	movs	r1, #1
 8007482:	f7ff ff05 	bl	8007290 <_Balloc>
 8007486:	4602      	mov	r2, r0
 8007488:	b928      	cbnz	r0, 8007496 <__i2b+0x1a>
 800748a:	f240 1145 	movw	r1, #325	; 0x145
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <__i2b+0x24>)
 8007490:	4804      	ldr	r0, [pc, #16]	; (80074a4 <__i2b+0x28>)
 8007492:	f000 fcaf 	bl	8007df4 <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	6144      	str	r4, [r0, #20]
 800749a:	6103      	str	r3, [r0, #16]
 800749c:	bd10      	pop	{r4, pc}
 800749e:	bf00      	nop
 80074a0:	080086d8 	.word	0x080086d8
 80074a4:	080086e9 	.word	0x080086e9

080074a8 <__multiply>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4691      	mov	r9, r2
 80074ae:	690a      	ldr	r2, [r1, #16]
 80074b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074b4:	460c      	mov	r4, r1
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bfbe      	ittt	lt
 80074ba:	460b      	movlt	r3, r1
 80074bc:	464c      	movlt	r4, r9
 80074be:	4699      	movlt	r9, r3
 80074c0:	6927      	ldr	r7, [r4, #16]
 80074c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	eb07 060a 	add.w	r6, r7, sl
 80074ce:	42b3      	cmp	r3, r6
 80074d0:	b085      	sub	sp, #20
 80074d2:	bfb8      	it	lt
 80074d4:	3101      	addlt	r1, #1
 80074d6:	f7ff fedb 	bl	8007290 <_Balloc>
 80074da:	b930      	cbnz	r0, 80074ea <__multiply+0x42>
 80074dc:	4602      	mov	r2, r0
 80074de:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80074e2:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <__multiply+0x148>)
 80074e4:	4843      	ldr	r0, [pc, #268]	; (80075f4 <__multiply+0x14c>)
 80074e6:	f000 fc85 	bl	8007df4 <__assert_func>
 80074ea:	f100 0514 	add.w	r5, r0, #20
 80074ee:	462b      	mov	r3, r5
 80074f0:	2200      	movs	r2, #0
 80074f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f6:	4543      	cmp	r3, r8
 80074f8:	d321      	bcc.n	800753e <__multiply+0x96>
 80074fa:	f104 0314 	add.w	r3, r4, #20
 80074fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007502:	f109 0314 	add.w	r3, r9, #20
 8007506:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800750a:	9202      	str	r2, [sp, #8]
 800750c:	1b3a      	subs	r2, r7, r4
 800750e:	3a15      	subs	r2, #21
 8007510:	f022 0203 	bic.w	r2, r2, #3
 8007514:	3204      	adds	r2, #4
 8007516:	f104 0115 	add.w	r1, r4, #21
 800751a:	428f      	cmp	r7, r1
 800751c:	bf38      	it	cc
 800751e:	2204      	movcc	r2, #4
 8007520:	9201      	str	r2, [sp, #4]
 8007522:	9a02      	ldr	r2, [sp, #8]
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	429a      	cmp	r2, r3
 8007528:	d80c      	bhi.n	8007544 <__multiply+0x9c>
 800752a:	2e00      	cmp	r6, #0
 800752c:	dd03      	ble.n	8007536 <__multiply+0x8e>
 800752e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007532:	2b00      	cmp	r3, #0
 8007534:	d05a      	beq.n	80075ec <__multiply+0x144>
 8007536:	6106      	str	r6, [r0, #16]
 8007538:	b005      	add	sp, #20
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	f843 2b04 	str.w	r2, [r3], #4
 8007542:	e7d8      	b.n	80074f6 <__multiply+0x4e>
 8007544:	f8b3 a000 	ldrh.w	sl, [r3]
 8007548:	f1ba 0f00 	cmp.w	sl, #0
 800754c:	d023      	beq.n	8007596 <__multiply+0xee>
 800754e:	46a9      	mov	r9, r5
 8007550:	f04f 0c00 	mov.w	ip, #0
 8007554:	f104 0e14 	add.w	lr, r4, #20
 8007558:	f85e 2b04 	ldr.w	r2, [lr], #4
 800755c:	f8d9 1000 	ldr.w	r1, [r9]
 8007560:	fa1f fb82 	uxth.w	fp, r2
 8007564:	b289      	uxth	r1, r1
 8007566:	fb0a 110b 	mla	r1, sl, fp, r1
 800756a:	4461      	add	r1, ip
 800756c:	f8d9 c000 	ldr.w	ip, [r9]
 8007570:	0c12      	lsrs	r2, r2, #16
 8007572:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007576:	fb0a c202 	mla	r2, sl, r2, ip
 800757a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800757e:	b289      	uxth	r1, r1
 8007580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007584:	4577      	cmp	r7, lr
 8007586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800758a:	f849 1b04 	str.w	r1, [r9], #4
 800758e:	d8e3      	bhi.n	8007558 <__multiply+0xb0>
 8007590:	9a01      	ldr	r2, [sp, #4]
 8007592:	f845 c002 	str.w	ip, [r5, r2]
 8007596:	9a03      	ldr	r2, [sp, #12]
 8007598:	3304      	adds	r3, #4
 800759a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800759e:	f1b9 0f00 	cmp.w	r9, #0
 80075a2:	d021      	beq.n	80075e8 <__multiply+0x140>
 80075a4:	46ae      	mov	lr, r5
 80075a6:	f04f 0a00 	mov.w	sl, #0
 80075aa:	6829      	ldr	r1, [r5, #0]
 80075ac:	f104 0c14 	add.w	ip, r4, #20
 80075b0:	f8bc b000 	ldrh.w	fp, [ip]
 80075b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075b8:	b289      	uxth	r1, r1
 80075ba:	fb09 220b 	mla	r2, r9, fp, r2
 80075be:	4452      	add	r2, sl
 80075c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075c4:	f84e 1b04 	str.w	r1, [lr], #4
 80075c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80075cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075d0:	f8be 1000 	ldrh.w	r1, [lr]
 80075d4:	4567      	cmp	r7, ip
 80075d6:	fb09 110a 	mla	r1, r9, sl, r1
 80075da:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80075de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075e2:	d8e5      	bhi.n	80075b0 <__multiply+0x108>
 80075e4:	9a01      	ldr	r2, [sp, #4]
 80075e6:	50a9      	str	r1, [r5, r2]
 80075e8:	3504      	adds	r5, #4
 80075ea:	e79a      	b.n	8007522 <__multiply+0x7a>
 80075ec:	3e01      	subs	r6, #1
 80075ee:	e79c      	b.n	800752a <__multiply+0x82>
 80075f0:	080086d8 	.word	0x080086d8
 80075f4:	080086e9 	.word	0x080086e9

080075f8 <__pow5mult>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	4615      	mov	r5, r2
 80075fe:	f012 0203 	ands.w	r2, r2, #3
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	d007      	beq.n	8007618 <__pow5mult+0x20>
 8007608:	4c25      	ldr	r4, [pc, #148]	; (80076a0 <__pow5mult+0xa8>)
 800760a:	3a01      	subs	r2, #1
 800760c:	2300      	movs	r3, #0
 800760e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007612:	f7ff fe9f 	bl	8007354 <__multadd>
 8007616:	4607      	mov	r7, r0
 8007618:	10ad      	asrs	r5, r5, #2
 800761a:	d03d      	beq.n	8007698 <__pow5mult+0xa0>
 800761c:	69f4      	ldr	r4, [r6, #28]
 800761e:	b97c      	cbnz	r4, 8007640 <__pow5mult+0x48>
 8007620:	2010      	movs	r0, #16
 8007622:	f7ff fd81 	bl	8007128 <malloc>
 8007626:	4602      	mov	r2, r0
 8007628:	61f0      	str	r0, [r6, #28]
 800762a:	b928      	cbnz	r0, 8007638 <__pow5mult+0x40>
 800762c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007630:	4b1c      	ldr	r3, [pc, #112]	; (80076a4 <__pow5mult+0xac>)
 8007632:	481d      	ldr	r0, [pc, #116]	; (80076a8 <__pow5mult+0xb0>)
 8007634:	f000 fbde 	bl	8007df4 <__assert_func>
 8007638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800763c:	6004      	str	r4, [r0, #0]
 800763e:	60c4      	str	r4, [r0, #12]
 8007640:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007648:	b94c      	cbnz	r4, 800765e <__pow5mult+0x66>
 800764a:	f240 2171 	movw	r1, #625	; 0x271
 800764e:	4630      	mov	r0, r6
 8007650:	f7ff ff14 	bl	800747c <__i2b>
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	f8c8 0008 	str.w	r0, [r8, #8]
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	07eb      	lsls	r3, r5, #31
 8007664:	d50a      	bpl.n	800767c <__pow5mult+0x84>
 8007666:	4639      	mov	r1, r7
 8007668:	4622      	mov	r2, r4
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ff1c 	bl	80074a8 <__multiply>
 8007670:	4680      	mov	r8, r0
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fe4b 	bl	8007310 <_Bfree>
 800767a:	4647      	mov	r7, r8
 800767c:	106d      	asrs	r5, r5, #1
 800767e:	d00b      	beq.n	8007698 <__pow5mult+0xa0>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	b938      	cbnz	r0, 8007694 <__pow5mult+0x9c>
 8007684:	4622      	mov	r2, r4
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ff0d 	bl	80074a8 <__multiply>
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	f8c0 9000 	str.w	r9, [r0]
 8007694:	4604      	mov	r4, r0
 8007696:	e7e4      	b.n	8007662 <__pow5mult+0x6a>
 8007698:	4638      	mov	r0, r7
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	bf00      	nop
 80076a0:	08008838 	.word	0x08008838
 80076a4:	08008669 	.word	0x08008669
 80076a8:	080086e9 	.word	0x080086e9

080076ac <__lshift>:
 80076ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	4607      	mov	r7, r0
 80076b4:	4691      	mov	r9, r2
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	6849      	ldr	r1, [r1, #4]
 80076ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c4:	f108 0601 	add.w	r6, r8, #1
 80076c8:	42b3      	cmp	r3, r6
 80076ca:	db0b      	blt.n	80076e4 <__lshift+0x38>
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff fddf 	bl	8007290 <_Balloc>
 80076d2:	4605      	mov	r5, r0
 80076d4:	b948      	cbnz	r0, 80076ea <__lshift+0x3e>
 80076d6:	4602      	mov	r2, r0
 80076d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <__lshift+0xd0>)
 80076de:	4828      	ldr	r0, [pc, #160]	; (8007780 <__lshift+0xd4>)
 80076e0:	f000 fb88 	bl	8007df4 <__assert_func>
 80076e4:	3101      	adds	r1, #1
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	e7ee      	b.n	80076c8 <__lshift+0x1c>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f100 0114 	add.w	r1, r0, #20
 80076f0:	f100 0210 	add.w	r2, r0, #16
 80076f4:	4618      	mov	r0, r3
 80076f6:	4553      	cmp	r3, sl
 80076f8:	db33      	blt.n	8007762 <__lshift+0xb6>
 80076fa:	6920      	ldr	r0, [r4, #16]
 80076fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007700:	f104 0314 	add.w	r3, r4, #20
 8007704:	f019 091f 	ands.w	r9, r9, #31
 8007708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800770c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007710:	d02b      	beq.n	800776a <__lshift+0xbe>
 8007712:	468a      	mov	sl, r1
 8007714:	2200      	movs	r2, #0
 8007716:	f1c9 0e20 	rsb	lr, r9, #32
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	fa00 f009 	lsl.w	r0, r0, r9
 8007720:	4310      	orrs	r0, r2
 8007722:	f84a 0b04 	str.w	r0, [sl], #4
 8007726:	f853 2b04 	ldr.w	r2, [r3], #4
 800772a:	459c      	cmp	ip, r3
 800772c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007730:	d8f3      	bhi.n	800771a <__lshift+0x6e>
 8007732:	ebac 0304 	sub.w	r3, ip, r4
 8007736:	3b15      	subs	r3, #21
 8007738:	f023 0303 	bic.w	r3, r3, #3
 800773c:	3304      	adds	r3, #4
 800773e:	f104 0015 	add.w	r0, r4, #21
 8007742:	4584      	cmp	ip, r0
 8007744:	bf38      	it	cc
 8007746:	2304      	movcc	r3, #4
 8007748:	50ca      	str	r2, [r1, r3]
 800774a:	b10a      	cbz	r2, 8007750 <__lshift+0xa4>
 800774c:	f108 0602 	add.w	r6, r8, #2
 8007750:	3e01      	subs	r6, #1
 8007752:	4638      	mov	r0, r7
 8007754:	4621      	mov	r1, r4
 8007756:	612e      	str	r6, [r5, #16]
 8007758:	f7ff fdda 	bl	8007310 <_Bfree>
 800775c:	4628      	mov	r0, r5
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	f842 0f04 	str.w	r0, [r2, #4]!
 8007766:	3301      	adds	r3, #1
 8007768:	e7c5      	b.n	80076f6 <__lshift+0x4a>
 800776a:	3904      	subs	r1, #4
 800776c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007770:	459c      	cmp	ip, r3
 8007772:	f841 2f04 	str.w	r2, [r1, #4]!
 8007776:	d8f9      	bhi.n	800776c <__lshift+0xc0>
 8007778:	e7ea      	b.n	8007750 <__lshift+0xa4>
 800777a:	bf00      	nop
 800777c:	080086d8 	.word	0x080086d8
 8007780:	080086e9 	.word	0x080086e9

08007784 <__mcmp>:
 8007784:	4603      	mov	r3, r0
 8007786:	690a      	ldr	r2, [r1, #16]
 8007788:	6900      	ldr	r0, [r0, #16]
 800778a:	b530      	push	{r4, r5, lr}
 800778c:	1a80      	subs	r0, r0, r2
 800778e:	d10d      	bne.n	80077ac <__mcmp+0x28>
 8007790:	3314      	adds	r3, #20
 8007792:	3114      	adds	r1, #20
 8007794:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007798:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800779c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077a4:	4295      	cmp	r5, r2
 80077a6:	d002      	beq.n	80077ae <__mcmp+0x2a>
 80077a8:	d304      	bcc.n	80077b4 <__mcmp+0x30>
 80077aa:	2001      	movs	r0, #1
 80077ac:	bd30      	pop	{r4, r5, pc}
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	d3f4      	bcc.n	800779c <__mcmp+0x18>
 80077b2:	e7fb      	b.n	80077ac <__mcmp+0x28>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e7f8      	b.n	80077ac <__mcmp+0x28>
	...

080077bc <__mdiff>:
 80077bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	460d      	mov	r5, r1
 80077c2:	4607      	mov	r7, r0
 80077c4:	4611      	mov	r1, r2
 80077c6:	4628      	mov	r0, r5
 80077c8:	4614      	mov	r4, r2
 80077ca:	f7ff ffdb 	bl	8007784 <__mcmp>
 80077ce:	1e06      	subs	r6, r0, #0
 80077d0:	d111      	bne.n	80077f6 <__mdiff+0x3a>
 80077d2:	4631      	mov	r1, r6
 80077d4:	4638      	mov	r0, r7
 80077d6:	f7ff fd5b 	bl	8007290 <_Balloc>
 80077da:	4602      	mov	r2, r0
 80077dc:	b928      	cbnz	r0, 80077ea <__mdiff+0x2e>
 80077de:	f240 2137 	movw	r1, #567	; 0x237
 80077e2:	4b3a      	ldr	r3, [pc, #232]	; (80078cc <__mdiff+0x110>)
 80077e4:	483a      	ldr	r0, [pc, #232]	; (80078d0 <__mdiff+0x114>)
 80077e6:	f000 fb05 	bl	8007df4 <__assert_func>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077f0:	4610      	mov	r0, r2
 80077f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f6:	bfa4      	itt	ge
 80077f8:	4623      	movge	r3, r4
 80077fa:	462c      	movge	r4, r5
 80077fc:	4638      	mov	r0, r7
 80077fe:	6861      	ldr	r1, [r4, #4]
 8007800:	bfa6      	itte	ge
 8007802:	461d      	movge	r5, r3
 8007804:	2600      	movge	r6, #0
 8007806:	2601      	movlt	r6, #1
 8007808:	f7ff fd42 	bl	8007290 <_Balloc>
 800780c:	4602      	mov	r2, r0
 800780e:	b918      	cbnz	r0, 8007818 <__mdiff+0x5c>
 8007810:	f240 2145 	movw	r1, #581	; 0x245
 8007814:	4b2d      	ldr	r3, [pc, #180]	; (80078cc <__mdiff+0x110>)
 8007816:	e7e5      	b.n	80077e4 <__mdiff+0x28>
 8007818:	f102 0814 	add.w	r8, r2, #20
 800781c:	46c2      	mov	sl, r8
 800781e:	f04f 0c00 	mov.w	ip, #0
 8007822:	6927      	ldr	r7, [r4, #16]
 8007824:	60c6      	str	r6, [r0, #12]
 8007826:	692e      	ldr	r6, [r5, #16]
 8007828:	f104 0014 	add.w	r0, r4, #20
 800782c:	f105 0914 	add.w	r9, r5, #20
 8007830:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007838:	3410      	adds	r4, #16
 800783a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800783e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007842:	fa1f f18b 	uxth.w	r1, fp
 8007846:	4461      	add	r1, ip
 8007848:	fa1f fc83 	uxth.w	ip, r3
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	eba1 010c 	sub.w	r1, r1, ip
 8007852:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007856:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800785a:	b289      	uxth	r1, r1
 800785c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007860:	454e      	cmp	r6, r9
 8007862:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007866:	f84a 1b04 	str.w	r1, [sl], #4
 800786a:	d8e6      	bhi.n	800783a <__mdiff+0x7e>
 800786c:	1b73      	subs	r3, r6, r5
 800786e:	3b15      	subs	r3, #21
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	3515      	adds	r5, #21
 8007876:	3304      	adds	r3, #4
 8007878:	42ae      	cmp	r6, r5
 800787a:	bf38      	it	cc
 800787c:	2304      	movcc	r3, #4
 800787e:	4418      	add	r0, r3
 8007880:	4443      	add	r3, r8
 8007882:	461e      	mov	r6, r3
 8007884:	4605      	mov	r5, r0
 8007886:	4575      	cmp	r5, lr
 8007888:	d30e      	bcc.n	80078a8 <__mdiff+0xec>
 800788a:	f10e 0103 	add.w	r1, lr, #3
 800788e:	1a09      	subs	r1, r1, r0
 8007890:	f021 0103 	bic.w	r1, r1, #3
 8007894:	3803      	subs	r0, #3
 8007896:	4586      	cmp	lr, r0
 8007898:	bf38      	it	cc
 800789a:	2100      	movcc	r1, #0
 800789c:	440b      	add	r3, r1
 800789e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078a2:	b189      	cbz	r1, 80078c8 <__mdiff+0x10c>
 80078a4:	6117      	str	r7, [r2, #16]
 80078a6:	e7a3      	b.n	80077f0 <__mdiff+0x34>
 80078a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80078ac:	fa1f f188 	uxth.w	r1, r8
 80078b0:	4461      	add	r1, ip
 80078b2:	140c      	asrs	r4, r1, #16
 80078b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078b8:	b289      	uxth	r1, r1
 80078ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078be:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80078c2:	f846 1b04 	str.w	r1, [r6], #4
 80078c6:	e7de      	b.n	8007886 <__mdiff+0xca>
 80078c8:	3f01      	subs	r7, #1
 80078ca:	e7e8      	b.n	800789e <__mdiff+0xe2>
 80078cc:	080086d8 	.word	0x080086d8
 80078d0:	080086e9 	.word	0x080086e9

080078d4 <__d2b>:
 80078d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d6:	2101      	movs	r1, #1
 80078d8:	4617      	mov	r7, r2
 80078da:	461c      	mov	r4, r3
 80078dc:	9e08      	ldr	r6, [sp, #32]
 80078de:	f7ff fcd7 	bl	8007290 <_Balloc>
 80078e2:	4605      	mov	r5, r0
 80078e4:	b930      	cbnz	r0, 80078f4 <__d2b+0x20>
 80078e6:	4602      	mov	r2, r0
 80078e8:	f240 310f 	movw	r1, #783	; 0x30f
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <__d2b+0xa4>)
 80078ee:	4823      	ldr	r0, [pc, #140]	; (800797c <__d2b+0xa8>)
 80078f0:	f000 fa80 	bl	8007df4 <__assert_func>
 80078f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80078fc:	bb24      	cbnz	r4, 8007948 <__d2b+0x74>
 80078fe:	2f00      	cmp	r7, #0
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	d026      	beq.n	8007952 <__d2b+0x7e>
 8007904:	4668      	mov	r0, sp
 8007906:	9700      	str	r7, [sp, #0]
 8007908:	f7ff fd8a 	bl	8007420 <__lo0bits>
 800790c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007910:	b1e8      	cbz	r0, 800794e <__d2b+0x7a>
 8007912:	f1c0 0320 	rsb	r3, r0, #32
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	430b      	orrs	r3, r1
 800791c:	40c2      	lsrs	r2, r0
 800791e:	616b      	str	r3, [r5, #20]
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf14      	ite	ne
 8007928:	2102      	movne	r1, #2
 800792a:	2101      	moveq	r1, #1
 800792c:	61ab      	str	r3, [r5, #24]
 800792e:	6129      	str	r1, [r5, #16]
 8007930:	b1bc      	cbz	r4, 8007962 <__d2b+0x8e>
 8007932:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007936:	4404      	add	r4, r0
 8007938:	6034      	str	r4, [r6, #0]
 800793a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	6018      	str	r0, [r3, #0]
 8007942:	4628      	mov	r0, r5
 8007944:	b003      	add	sp, #12
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800794c:	e7d7      	b.n	80078fe <__d2b+0x2a>
 800794e:	6169      	str	r1, [r5, #20]
 8007950:	e7e7      	b.n	8007922 <__d2b+0x4e>
 8007952:	a801      	add	r0, sp, #4
 8007954:	f7ff fd64 	bl	8007420 <__lo0bits>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	2101      	movs	r1, #1
 800795c:	616b      	str	r3, [r5, #20]
 800795e:	3020      	adds	r0, #32
 8007960:	e7e5      	b.n	800792e <__d2b+0x5a>
 8007962:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007966:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800796a:	6030      	str	r0, [r6, #0]
 800796c:	6918      	ldr	r0, [r3, #16]
 800796e:	f7ff fd37 	bl	80073e0 <__hi0bits>
 8007972:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007976:	e7e2      	b.n	800793e <__d2b+0x6a>
 8007978:	080086d8 	.word	0x080086d8
 800797c:	080086e9 	.word	0x080086e9

08007980 <__ssputs_r>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	461f      	mov	r7, r3
 8007986:	688e      	ldr	r6, [r1, #8]
 8007988:	4682      	mov	sl, r0
 800798a:	42be      	cmp	r6, r7
 800798c:	460c      	mov	r4, r1
 800798e:	4690      	mov	r8, r2
 8007990:	680b      	ldr	r3, [r1, #0]
 8007992:	d82c      	bhi.n	80079ee <__ssputs_r+0x6e>
 8007994:	898a      	ldrh	r2, [r1, #12]
 8007996:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800799a:	d026      	beq.n	80079ea <__ssputs_r+0x6a>
 800799c:	6965      	ldr	r5, [r4, #20]
 800799e:	6909      	ldr	r1, [r1, #16]
 80079a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079a4:	eba3 0901 	sub.w	r9, r3, r1
 80079a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079ac:	1c7b      	adds	r3, r7, #1
 80079ae:	444b      	add	r3, r9
 80079b0:	106d      	asrs	r5, r5, #1
 80079b2:	429d      	cmp	r5, r3
 80079b4:	bf38      	it	cc
 80079b6:	461d      	movcc	r5, r3
 80079b8:	0553      	lsls	r3, r2, #21
 80079ba:	d527      	bpl.n	8007a0c <__ssputs_r+0x8c>
 80079bc:	4629      	mov	r1, r5
 80079be:	f7ff fbdb 	bl	8007178 <_malloc_r>
 80079c2:	4606      	mov	r6, r0
 80079c4:	b360      	cbz	r0, 8007a20 <__ssputs_r+0xa0>
 80079c6:	464a      	mov	r2, r9
 80079c8:	6921      	ldr	r1, [r4, #16]
 80079ca:	f000 fa05 	bl	8007dd8 <memcpy>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	6126      	str	r6, [r4, #16]
 80079dc:	444e      	add	r6, r9
 80079de:	6026      	str	r6, [r4, #0]
 80079e0:	463e      	mov	r6, r7
 80079e2:	6165      	str	r5, [r4, #20]
 80079e4:	eba5 0509 	sub.w	r5, r5, r9
 80079e8:	60a5      	str	r5, [r4, #8]
 80079ea:	42be      	cmp	r6, r7
 80079ec:	d900      	bls.n	80079f0 <__ssputs_r+0x70>
 80079ee:	463e      	mov	r6, r7
 80079f0:	4632      	mov	r2, r6
 80079f2:	4641      	mov	r1, r8
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	f000 f9c5 	bl	8007d84 <memmove>
 80079fa:	2000      	movs	r0, #0
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	1b9b      	subs	r3, r3, r6
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4433      	add	r3, r6
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	f000 fa35 	bl	8007e7c <_realloc_r>
 8007a12:	4606      	mov	r6, r0
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1e0      	bne.n	80079da <__ssputs_r+0x5a>
 8007a18:	4650      	mov	r0, sl
 8007a1a:	6921      	ldr	r1, [r4, #16]
 8007a1c:	f7ff fb3c 	bl	8007098 <_free_r>
 8007a20:	230c      	movs	r3, #12
 8007a22:	f8ca 3000 	str.w	r3, [sl]
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e7e9      	b.n	8007a08 <__ssputs_r+0x88>

08007a34 <_svfiprintf_r>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	4698      	mov	r8, r3
 8007a3a:	898b      	ldrh	r3, [r1, #12]
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	460d      	mov	r5, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	b09d      	sub	sp, #116	; 0x74
 8007a46:	d50e      	bpl.n	8007a66 <_svfiprintf_r+0x32>
 8007a48:	690b      	ldr	r3, [r1, #16]
 8007a4a:	b963      	cbnz	r3, 8007a66 <_svfiprintf_r+0x32>
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	f7ff fb93 	bl	8007178 <_malloc_r>
 8007a52:	6028      	str	r0, [r5, #0]
 8007a54:	6128      	str	r0, [r5, #16]
 8007a56:	b920      	cbnz	r0, 8007a62 <_svfiprintf_r+0x2e>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e0d0      	b.n	8007c04 <_svfiprintf_r+0x1d0>
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	616b      	str	r3, [r5, #20]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6a:	2320      	movs	r3, #32
 8007a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a70:	2330      	movs	r3, #48	; 0x30
 8007a72:	f04f 0901 	mov.w	r9, #1
 8007a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007c1c <_svfiprintf_r+0x1e8>
 8007a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a82:	4623      	mov	r3, r4
 8007a84:	469a      	mov	sl, r3
 8007a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8a:	b10a      	cbz	r2, 8007a90 <_svfiprintf_r+0x5c>
 8007a8c:	2a25      	cmp	r2, #37	; 0x25
 8007a8e:	d1f9      	bne.n	8007a84 <_svfiprintf_r+0x50>
 8007a90:	ebba 0b04 	subs.w	fp, sl, r4
 8007a94:	d00b      	beq.n	8007aae <_svfiprintf_r+0x7a>
 8007a96:	465b      	mov	r3, fp
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f7ff ff6f 	bl	8007980 <__ssputs_r>
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f000 80a9 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aaa:	445a      	add	r2, fp
 8007aac:	9209      	str	r2, [sp, #36]	; 0x24
 8007aae:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80a1 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f04f 32ff 	mov.w	r2, #4294967295
 8007abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac2:	f10a 0a01 	add.w	sl, sl, #1
 8007ac6:	9304      	str	r3, [sp, #16]
 8007ac8:	9307      	str	r3, [sp, #28]
 8007aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ace:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad0:	4654      	mov	r4, sl
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad8:	4850      	ldr	r0, [pc, #320]	; (8007c1c <_svfiprintf_r+0x1e8>)
 8007ada:	f7fe fc62 	bl	80063a2 <memchr>
 8007ade:	9a04      	ldr	r2, [sp, #16]
 8007ae0:	b9d8      	cbnz	r0, 8007b1a <_svfiprintf_r+0xe6>
 8007ae2:	06d0      	lsls	r0, r2, #27
 8007ae4:	bf44      	itt	mi
 8007ae6:	2320      	movmi	r3, #32
 8007ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aec:	0711      	lsls	r1, r2, #28
 8007aee:	bf44      	itt	mi
 8007af0:	232b      	movmi	r3, #43	; 0x2b
 8007af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af6:	f89a 3000 	ldrb.w	r3, [sl]
 8007afa:	2b2a      	cmp	r3, #42	; 0x2a
 8007afc:	d015      	beq.n	8007b2a <_svfiprintf_r+0xf6>
 8007afe:	4654      	mov	r4, sl
 8007b00:	2000      	movs	r0, #0
 8007b02:	f04f 0c0a 	mov.w	ip, #10
 8007b06:	9a07      	ldr	r2, [sp, #28]
 8007b08:	4621      	mov	r1, r4
 8007b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b0e:	3b30      	subs	r3, #48	; 0x30
 8007b10:	2b09      	cmp	r3, #9
 8007b12:	d94d      	bls.n	8007bb0 <_svfiprintf_r+0x17c>
 8007b14:	b1b0      	cbz	r0, 8007b44 <_svfiprintf_r+0x110>
 8007b16:	9207      	str	r2, [sp, #28]
 8007b18:	e014      	b.n	8007b44 <_svfiprintf_r+0x110>
 8007b1a:	eba0 0308 	sub.w	r3, r0, r8
 8007b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	46a2      	mov	sl, r4
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	e7d2      	b.n	8007ad0 <_svfiprintf_r+0x9c>
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	1d19      	adds	r1, r3, #4
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	9103      	str	r1, [sp, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bfbb      	ittet	lt
 8007b36:	425b      	neglt	r3, r3
 8007b38:	f042 0202 	orrlt.w	r2, r2, #2
 8007b3c:	9307      	strge	r3, [sp, #28]
 8007b3e:	9307      	strlt	r3, [sp, #28]
 8007b40:	bfb8      	it	lt
 8007b42:	9204      	strlt	r2, [sp, #16]
 8007b44:	7823      	ldrb	r3, [r4, #0]
 8007b46:	2b2e      	cmp	r3, #46	; 0x2e
 8007b48:	d10c      	bne.n	8007b64 <_svfiprintf_r+0x130>
 8007b4a:	7863      	ldrb	r3, [r4, #1]
 8007b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4e:	d134      	bne.n	8007bba <_svfiprintf_r+0x186>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	3402      	adds	r4, #2
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	9203      	str	r2, [sp, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfb8      	it	lt
 8007b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007c20 <_svfiprintf_r+0x1ec>
 8007b68:	2203      	movs	r2, #3
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	7821      	ldrb	r1, [r4, #0]
 8007b6e:	f7fe fc18 	bl	80063a2 <memchr>
 8007b72:	b138      	cbz	r0, 8007b84 <_svfiprintf_r+0x150>
 8007b74:	2240      	movs	r2, #64	; 0x40
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	eba0 000a 	sub.w	r0, r0, sl
 8007b7c:	4082      	lsls	r2, r0
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	3401      	adds	r4, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	2206      	movs	r2, #6
 8007b8a:	4826      	ldr	r0, [pc, #152]	; (8007c24 <_svfiprintf_r+0x1f0>)
 8007b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b90:	f7fe fc07 	bl	80063a2 <memchr>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d038      	beq.n	8007c0a <_svfiprintf_r+0x1d6>
 8007b98:	4b23      	ldr	r3, [pc, #140]	; (8007c28 <_svfiprintf_r+0x1f4>)
 8007b9a:	bb1b      	cbnz	r3, 8007be4 <_svfiprintf_r+0x1b0>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	4433      	add	r3, r6
 8007bac:	9309      	str	r3, [sp, #36]	; 0x24
 8007bae:	e768      	b.n	8007a82 <_svfiprintf_r+0x4e>
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb8:	e7a6      	b.n	8007b08 <_svfiprintf_r+0xd4>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f04f 0c0a 	mov.w	ip, #10
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	3401      	adds	r4, #1
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bcc:	3a30      	subs	r2, #48	; 0x30
 8007bce:	2a09      	cmp	r2, #9
 8007bd0:	d903      	bls.n	8007bda <_svfiprintf_r+0x1a6>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0c6      	beq.n	8007b64 <_svfiprintf_r+0x130>
 8007bd6:	9105      	str	r1, [sp, #20]
 8007bd8:	e7c4      	b.n	8007b64 <_svfiprintf_r+0x130>
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2301      	movs	r3, #1
 8007bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be2:	e7f0      	b.n	8007bc6 <_svfiprintf_r+0x192>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4638      	mov	r0, r7
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <_svfiprintf_r+0x1f8>)
 8007bee:	a904      	add	r1, sp, #16
 8007bf0:	f7fd fe70 	bl	80058d4 <_printf_float>
 8007bf4:	1c42      	adds	r2, r0, #1
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	d1d6      	bne.n	8007ba8 <_svfiprintf_r+0x174>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	065b      	lsls	r3, r3, #25
 8007bfe:	f53f af2d 	bmi.w	8007a5c <_svfiprintf_r+0x28>
 8007c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c04:	b01d      	add	sp, #116	; 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	462a      	mov	r2, r5
 8007c10:	4638      	mov	r0, r7
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <_svfiprintf_r+0x1f8>)
 8007c14:	a904      	add	r1, sp, #16
 8007c16:	f7fe f8fd 	bl	8005e14 <_printf_i>
 8007c1a:	e7eb      	b.n	8007bf4 <_svfiprintf_r+0x1c0>
 8007c1c:	08008844 	.word	0x08008844
 8007c20:	0800884a 	.word	0x0800884a
 8007c24:	0800884e 	.word	0x0800884e
 8007c28:	080058d5 	.word	0x080058d5
 8007c2c:	08007981 	.word	0x08007981

08007c30 <__sflush_r>:
 8007c30:	898a      	ldrh	r2, [r1, #12]
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	4605      	mov	r5, r0
 8007c36:	0710      	lsls	r0, r2, #28
 8007c38:	460c      	mov	r4, r1
 8007c3a:	d457      	bmi.n	8007cec <__sflush_r+0xbc>
 8007c3c:	684b      	ldr	r3, [r1, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dc04      	bgt.n	8007c4c <__sflush_r+0x1c>
 8007c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc01      	bgt.n	8007c4c <__sflush_r+0x1c>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0fa      	beq.n	8007c48 <__sflush_r+0x18>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c58:	682f      	ldr	r7, [r5, #0]
 8007c5a:	6a21      	ldr	r1, [r4, #32]
 8007c5c:	602b      	str	r3, [r5, #0]
 8007c5e:	d032      	beq.n	8007cc6 <__sflush_r+0x96>
 8007c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	075a      	lsls	r2, r3, #29
 8007c66:	d505      	bpl.n	8007c74 <__sflush_r+0x44>
 8007c68:	6863      	ldr	r3, [r4, #4]
 8007c6a:	1ac0      	subs	r0, r0, r3
 8007c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c6e:	b10b      	cbz	r3, 8007c74 <__sflush_r+0x44>
 8007c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c72:	1ac0      	subs	r0, r0, r3
 8007c74:	2300      	movs	r3, #0
 8007c76:	4602      	mov	r2, r0
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	47b0      	blx	r6
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	d106      	bne.n	8007c94 <__sflush_r+0x64>
 8007c86:	6829      	ldr	r1, [r5, #0]
 8007c88:	291d      	cmp	r1, #29
 8007c8a:	d82b      	bhi.n	8007ce4 <__sflush_r+0xb4>
 8007c8c:	4a28      	ldr	r2, [pc, #160]	; (8007d30 <__sflush_r+0x100>)
 8007c8e:	410a      	asrs	r2, r1
 8007c90:	07d6      	lsls	r6, r2, #31
 8007c92:	d427      	bmi.n	8007ce4 <__sflush_r+0xb4>
 8007c94:	2200      	movs	r2, #0
 8007c96:	6062      	str	r2, [r4, #4]
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	04d9      	lsls	r1, r3, #19
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	d504      	bpl.n	8007caa <__sflush_r+0x7a>
 8007ca0:	1c42      	adds	r2, r0, #1
 8007ca2:	d101      	bne.n	8007ca8 <__sflush_r+0x78>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b903      	cbnz	r3, 8007caa <__sflush_r+0x7a>
 8007ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8007caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cac:	602f      	str	r7, [r5, #0]
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d0ca      	beq.n	8007c48 <__sflush_r+0x18>
 8007cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb6:	4299      	cmp	r1, r3
 8007cb8:	d002      	beq.n	8007cc0 <__sflush_r+0x90>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7ff f9ec 	bl	8007098 <_free_r>
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8007cc4:	e7c1      	b.n	8007c4a <__sflush_r+0x1a>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	d1c8      	bne.n	8007c62 <__sflush_r+0x32>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c5      	beq.n	8007c62 <__sflush_r+0x32>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xae>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d101      	bne.n	8007ce2 <__sflush_r+0xb2>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	e7b2      	b.n	8007c48 <__sflush_r+0x18>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7ae      	b.n	8007c4a <__sflush_r+0x1a>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0aa      	beq.n	8007c48 <__sflush_r+0x18>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	bf18      	it	ne
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	680e      	ldr	r6, [r1, #0]
 8007cfa:	bf08      	it	eq
 8007cfc:	694b      	ldreq	r3, [r1, #20]
 8007cfe:	1bf6      	subs	r6, r6, r7
 8007d00:	600f      	str	r7, [r1, #0]
 8007d02:	608b      	str	r3, [r1, #8]
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	dd9f      	ble.n	8007c48 <__sflush_r+0x18>
 8007d08:	4633      	mov	r3, r6
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	6a21      	ldr	r1, [r4, #32]
 8007d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007d14:	47e0      	blx	ip
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dc06      	bgt.n	8007d28 <__sflush_r+0xf8>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	e790      	b.n	8007c4a <__sflush_r+0x1a>
 8007d28:	4407      	add	r7, r0
 8007d2a:	1a36      	subs	r6, r6, r0
 8007d2c:	e7ea      	b.n	8007d04 <__sflush_r+0xd4>
 8007d2e:	bf00      	nop
 8007d30:	dfbffffe 	.word	0xdfbffffe

08007d34 <_fflush_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	b913      	cbnz	r3, 8007d44 <_fflush_r+0x10>
 8007d3e:	2500      	movs	r5, #0
 8007d40:	4628      	mov	r0, r5
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	b118      	cbz	r0, 8007d4e <_fflush_r+0x1a>
 8007d46:	6a03      	ldr	r3, [r0, #32]
 8007d48:	b90b      	cbnz	r3, 8007d4e <_fflush_r+0x1a>
 8007d4a:	f7fe fa11 	bl	8006170 <__sinit>
 8007d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f3      	beq.n	8007d3e <_fflush_r+0xa>
 8007d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d58:	07d0      	lsls	r0, r2, #31
 8007d5a:	d404      	bmi.n	8007d66 <_fflush_r+0x32>
 8007d5c:	0599      	lsls	r1, r3, #22
 8007d5e:	d402      	bmi.n	8007d66 <_fflush_r+0x32>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f7fe fb1c 	bl	800639e <__retarget_lock_acquire_recursive>
 8007d66:	4628      	mov	r0, r5
 8007d68:	4621      	mov	r1, r4
 8007d6a:	f7ff ff61 	bl	8007c30 <__sflush_r>
 8007d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d70:	4605      	mov	r5, r0
 8007d72:	07da      	lsls	r2, r3, #31
 8007d74:	d4e4      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	059b      	lsls	r3, r3, #22
 8007d7a:	d4e1      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f7fe fb0f 	bl	80063a0 <__retarget_lock_release_recursive>
 8007d82:	e7dd      	b.n	8007d40 <_fflush_r+0xc>

08007d84 <memmove>:
 8007d84:	4288      	cmp	r0, r1
 8007d86:	b510      	push	{r4, lr}
 8007d88:	eb01 0402 	add.w	r4, r1, r2
 8007d8c:	d902      	bls.n	8007d94 <memmove+0x10>
 8007d8e:	4284      	cmp	r4, r0
 8007d90:	4623      	mov	r3, r4
 8007d92:	d807      	bhi.n	8007da4 <memmove+0x20>
 8007d94:	1e43      	subs	r3, r0, #1
 8007d96:	42a1      	cmp	r1, r4
 8007d98:	d008      	beq.n	8007dac <memmove+0x28>
 8007d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da2:	e7f8      	b.n	8007d96 <memmove+0x12>
 8007da4:	4601      	mov	r1, r0
 8007da6:	4402      	add	r2, r0
 8007da8:	428a      	cmp	r2, r1
 8007daa:	d100      	bne.n	8007dae <memmove+0x2a>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007db6:	e7f7      	b.n	8007da8 <memmove+0x24>

08007db8 <_sbrk_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4d05      	ldr	r5, [pc, #20]	; (8007dd4 <_sbrk_r+0x1c>)
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7fa fb7e 	bl	80024c4 <_sbrk>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_sbrk_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_sbrk_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	200004c4 	.word	0x200004c4

08007dd8 <memcpy>:
 8007dd8:	440a      	add	r2, r1
 8007dda:	4291      	cmp	r1, r2
 8007ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xc>
 8007de2:	4770      	bx	lr
 8007de4:	b510      	push	{r4, lr}
 8007de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dea:	4291      	cmp	r1, r2
 8007dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df0:	d1f9      	bne.n	8007de6 <memcpy+0xe>
 8007df2:	bd10      	pop	{r4, pc}

08007df4 <__assert_func>:
 8007df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007df6:	4614      	mov	r4, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <__assert_func+0x2c>)
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68d8      	ldr	r0, [r3, #12]
 8007e02:	b14c      	cbz	r4, 8007e18 <__assert_func+0x24>
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <__assert_func+0x30>)
 8007e06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e0a:	9100      	str	r1, [sp, #0]
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	4906      	ldr	r1, [pc, #24]	; (8007e28 <__assert_func+0x34>)
 8007e10:	f000 f870 	bl	8007ef4 <fiprintf>
 8007e14:	f000 f880 	bl	8007f18 <abort>
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <__assert_func+0x38>)
 8007e1a:	461c      	mov	r4, r3
 8007e1c:	e7f3      	b.n	8007e06 <__assert_func+0x12>
 8007e1e:	bf00      	nop
 8007e20:	20000068 	.word	0x20000068
 8007e24:	0800885f 	.word	0x0800885f
 8007e28:	0800886c 	.word	0x0800886c
 8007e2c:	0800889a 	.word	0x0800889a

08007e30 <_calloc_r>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	fba1 5402 	umull	r5, r4, r1, r2
 8007e36:	b934      	cbnz	r4, 8007e46 <_calloc_r+0x16>
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7ff f99d 	bl	8007178 <_malloc_r>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	b928      	cbnz	r0, 8007e4e <_calloc_r+0x1e>
 8007e42:	4630      	mov	r0, r6
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
 8007e46:	220c      	movs	r2, #12
 8007e48:	2600      	movs	r6, #0
 8007e4a:	6002      	str	r2, [r0, #0]
 8007e4c:	e7f9      	b.n	8007e42 <_calloc_r+0x12>
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4621      	mov	r1, r4
 8007e52:	f7fe fa26 	bl	80062a2 <memset>
 8007e56:	e7f4      	b.n	8007e42 <_calloc_r+0x12>

08007e58 <__ascii_mbtowc>:
 8007e58:	b082      	sub	sp, #8
 8007e5a:	b901      	cbnz	r1, 8007e5e <__ascii_mbtowc+0x6>
 8007e5c:	a901      	add	r1, sp, #4
 8007e5e:	b142      	cbz	r2, 8007e72 <__ascii_mbtowc+0x1a>
 8007e60:	b14b      	cbz	r3, 8007e76 <__ascii_mbtowc+0x1e>
 8007e62:	7813      	ldrb	r3, [r2, #0]
 8007e64:	600b      	str	r3, [r1, #0]
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	1e10      	subs	r0, r2, #0
 8007e6a:	bf18      	it	ne
 8007e6c:	2001      	movne	r0, #1
 8007e6e:	b002      	add	sp, #8
 8007e70:	4770      	bx	lr
 8007e72:	4610      	mov	r0, r2
 8007e74:	e7fb      	b.n	8007e6e <__ascii_mbtowc+0x16>
 8007e76:	f06f 0001 	mvn.w	r0, #1
 8007e7a:	e7f8      	b.n	8007e6e <__ascii_mbtowc+0x16>

08007e7c <_realloc_r>:
 8007e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e80:	4680      	mov	r8, r0
 8007e82:	4614      	mov	r4, r2
 8007e84:	460e      	mov	r6, r1
 8007e86:	b921      	cbnz	r1, 8007e92 <_realloc_r+0x16>
 8007e88:	4611      	mov	r1, r2
 8007e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	f7ff b973 	b.w	8007178 <_malloc_r>
 8007e92:	b92a      	cbnz	r2, 8007ea0 <_realloc_r+0x24>
 8007e94:	f7ff f900 	bl	8007098 <_free_r>
 8007e98:	4625      	mov	r5, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	f000 f841 	bl	8007f26 <_malloc_usable_size_r>
 8007ea4:	4284      	cmp	r4, r0
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	d802      	bhi.n	8007eb0 <_realloc_r+0x34>
 8007eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eae:	d812      	bhi.n	8007ed6 <_realloc_r+0x5a>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f7ff f960 	bl	8007178 <_malloc_r>
 8007eb8:	4605      	mov	r5, r0
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d0ed      	beq.n	8007e9a <_realloc_r+0x1e>
 8007ebe:	42bc      	cmp	r4, r7
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	bf28      	it	cs
 8007ec6:	463a      	movcs	r2, r7
 8007ec8:	f7ff ff86 	bl	8007dd8 <memcpy>
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7ff f8e2 	bl	8007098 <_free_r>
 8007ed4:	e7e1      	b.n	8007e9a <_realloc_r+0x1e>
 8007ed6:	4635      	mov	r5, r6
 8007ed8:	e7df      	b.n	8007e9a <_realloc_r+0x1e>

08007eda <__ascii_wctomb>:
 8007eda:	4603      	mov	r3, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	b141      	cbz	r1, 8007ef2 <__ascii_wctomb+0x18>
 8007ee0:	2aff      	cmp	r2, #255	; 0xff
 8007ee2:	d904      	bls.n	8007eee <__ascii_wctomb+0x14>
 8007ee4:	228a      	movs	r2, #138	; 0x8a
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	4770      	bx	lr
 8007eee:	2001      	movs	r0, #1
 8007ef0:	700a      	strb	r2, [r1, #0]
 8007ef2:	4770      	bx	lr

08007ef4 <fiprintf>:
 8007ef4:	b40e      	push	{r1, r2, r3}
 8007ef6:	b503      	push	{r0, r1, lr}
 8007ef8:	4601      	mov	r1, r0
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	4805      	ldr	r0, [pc, #20]	; (8007f14 <fiprintf+0x20>)
 8007efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	f000 f83d 	bl	8007f84 <_vfiprintf_r>
 8007f0a:	b002      	add	sp, #8
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000068 	.word	0x20000068

08007f18 <abort>:
 8007f18:	2006      	movs	r0, #6
 8007f1a:	b508      	push	{r3, lr}
 8007f1c:	f000 fa0a 	bl	8008334 <raise>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f7fa fa5c 	bl	80023de <_exit>

08007f26 <_malloc_usable_size_r>:
 8007f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f2a:	1f18      	subs	r0, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfbc      	itt	lt
 8007f30:	580b      	ldrlt	r3, [r1, r0]
 8007f32:	18c0      	addlt	r0, r0, r3
 8007f34:	4770      	bx	lr

08007f36 <__sfputc_r>:
 8007f36:	6893      	ldr	r3, [r2, #8]
 8007f38:	b410      	push	{r4}
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	6093      	str	r3, [r2, #8]
 8007f40:	da07      	bge.n	8007f52 <__sfputc_r+0x1c>
 8007f42:	6994      	ldr	r4, [r2, #24]
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	db01      	blt.n	8007f4c <__sfputc_r+0x16>
 8007f48:	290a      	cmp	r1, #10
 8007f4a:	d102      	bne.n	8007f52 <__sfputc_r+0x1c>
 8007f4c:	bc10      	pop	{r4}
 8007f4e:	f000 b933 	b.w	80081b8 <__swbuf_r>
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	1c58      	adds	r0, r3, #1
 8007f56:	6010      	str	r0, [r2, #0]
 8007f58:	7019      	strb	r1, [r3, #0]
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	bc10      	pop	{r4}
 8007f5e:	4770      	bx	lr

08007f60 <__sfputs_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	4614      	mov	r4, r2
 8007f68:	18d5      	adds	r5, r2, r3
 8007f6a:	42ac      	cmp	r4, r5
 8007f6c:	d101      	bne.n	8007f72 <__sfputs_r+0x12>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e007      	b.n	8007f82 <__sfputs_r+0x22>
 8007f72:	463a      	mov	r2, r7
 8007f74:	4630      	mov	r0, r6
 8007f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7a:	f7ff ffdc 	bl	8007f36 <__sfputc_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d1f3      	bne.n	8007f6a <__sfputs_r+0xa>
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f84 <_vfiprintf_r>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	460d      	mov	r5, r1
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b09d      	sub	sp, #116	; 0x74
 8007f92:	b118      	cbz	r0, 8007f9c <_vfiprintf_r+0x18>
 8007f94:	6a03      	ldr	r3, [r0, #32]
 8007f96:	b90b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x18>
 8007f98:	f7fe f8ea 	bl	8006170 <__sinit>
 8007f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f9e:	07d9      	lsls	r1, r3, #31
 8007fa0:	d405      	bmi.n	8007fae <_vfiprintf_r+0x2a>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	059a      	lsls	r2, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_vfiprintf_r+0x2a>
 8007fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007faa:	f7fe f9f8 	bl	800639e <__retarget_lock_acquire_recursive>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	071b      	lsls	r3, r3, #28
 8007fb2:	d501      	bpl.n	8007fb8 <_vfiprintf_r+0x34>
 8007fb4:	692b      	ldr	r3, [r5, #16]
 8007fb6:	b99b      	cbnz	r3, 8007fe0 <_vfiprintf_r+0x5c>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f000 f93a 	bl	8008234 <__swsetup_r>
 8007fc0:	b170      	cbz	r0, 8007fe0 <_vfiprintf_r+0x5c>
 8007fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc4:	07dc      	lsls	r4, r3, #31
 8007fc6:	d504      	bpl.n	8007fd2 <_vfiprintf_r+0x4e>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b01d      	add	sp, #116	; 0x74
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	0598      	lsls	r0, r3, #22
 8007fd6:	d4f7      	bmi.n	8007fc8 <_vfiprintf_r+0x44>
 8007fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fda:	f7fe f9e1 	bl	80063a0 <__retarget_lock_release_recursive>
 8007fde:	e7f3      	b.n	8007fc8 <_vfiprintf_r+0x44>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fea:	2330      	movs	r3, #48	; 0x30
 8007fec:	f04f 0901 	mov.w	r9, #1
 8007ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80081a4 <_vfiprintf_r+0x220>
 8007ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	469a      	mov	sl, r3
 8008000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008004:	b10a      	cbz	r2, 800800a <_vfiprintf_r+0x86>
 8008006:	2a25      	cmp	r2, #37	; 0x25
 8008008:	d1f9      	bne.n	8007ffe <_vfiprintf_r+0x7a>
 800800a:	ebba 0b04 	subs.w	fp, sl, r4
 800800e:	d00b      	beq.n	8008028 <_vfiprintf_r+0xa4>
 8008010:	465b      	mov	r3, fp
 8008012:	4622      	mov	r2, r4
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ffa2 	bl	8007f60 <__sfputs_r>
 800801c:	3001      	adds	r0, #1
 800801e:	f000 80a9 	beq.w	8008174 <_vfiprintf_r+0x1f0>
 8008022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008024:	445a      	add	r2, fp
 8008026:	9209      	str	r2, [sp, #36]	; 0x24
 8008028:	f89a 3000 	ldrb.w	r3, [sl]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a1 	beq.w	8008174 <_vfiprintf_r+0x1f0>
 8008032:	2300      	movs	r3, #0
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800803c:	f10a 0a01 	add.w	sl, sl, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	9307      	str	r3, [sp, #28]
 8008044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008048:	931a      	str	r3, [sp, #104]	; 0x68
 800804a:	4654      	mov	r4, sl
 800804c:	2205      	movs	r2, #5
 800804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008052:	4854      	ldr	r0, [pc, #336]	; (80081a4 <_vfiprintf_r+0x220>)
 8008054:	f7fe f9a5 	bl	80063a2 <memchr>
 8008058:	9a04      	ldr	r2, [sp, #16]
 800805a:	b9d8      	cbnz	r0, 8008094 <_vfiprintf_r+0x110>
 800805c:	06d1      	lsls	r1, r2, #27
 800805e:	bf44      	itt	mi
 8008060:	2320      	movmi	r3, #32
 8008062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008066:	0713      	lsls	r3, r2, #28
 8008068:	bf44      	itt	mi
 800806a:	232b      	movmi	r3, #43	; 0x2b
 800806c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008070:	f89a 3000 	ldrb.w	r3, [sl]
 8008074:	2b2a      	cmp	r3, #42	; 0x2a
 8008076:	d015      	beq.n	80080a4 <_vfiprintf_r+0x120>
 8008078:	4654      	mov	r4, sl
 800807a:	2000      	movs	r0, #0
 800807c:	f04f 0c0a 	mov.w	ip, #10
 8008080:	9a07      	ldr	r2, [sp, #28]
 8008082:	4621      	mov	r1, r4
 8008084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008088:	3b30      	subs	r3, #48	; 0x30
 800808a:	2b09      	cmp	r3, #9
 800808c:	d94d      	bls.n	800812a <_vfiprintf_r+0x1a6>
 800808e:	b1b0      	cbz	r0, 80080be <_vfiprintf_r+0x13a>
 8008090:	9207      	str	r2, [sp, #28]
 8008092:	e014      	b.n	80080be <_vfiprintf_r+0x13a>
 8008094:	eba0 0308 	sub.w	r3, r0, r8
 8008098:	fa09 f303 	lsl.w	r3, r9, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	46a2      	mov	sl, r4
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	e7d2      	b.n	800804a <_vfiprintf_r+0xc6>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	1d19      	adds	r1, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	9103      	str	r1, [sp, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bfbb      	ittet	lt
 80080b0:	425b      	neglt	r3, r3
 80080b2:	f042 0202 	orrlt.w	r2, r2, #2
 80080b6:	9307      	strge	r3, [sp, #28]
 80080b8:	9307      	strlt	r3, [sp, #28]
 80080ba:	bfb8      	it	lt
 80080bc:	9204      	strlt	r2, [sp, #16]
 80080be:	7823      	ldrb	r3, [r4, #0]
 80080c0:	2b2e      	cmp	r3, #46	; 0x2e
 80080c2:	d10c      	bne.n	80080de <_vfiprintf_r+0x15a>
 80080c4:	7863      	ldrb	r3, [r4, #1]
 80080c6:	2b2a      	cmp	r3, #42	; 0x2a
 80080c8:	d134      	bne.n	8008134 <_vfiprintf_r+0x1b0>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	3402      	adds	r4, #2
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	9203      	str	r2, [sp, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfb8      	it	lt
 80080d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081a8 <_vfiprintf_r+0x224>
 80080e2:	2203      	movs	r2, #3
 80080e4:	4650      	mov	r0, sl
 80080e6:	7821      	ldrb	r1, [r4, #0]
 80080e8:	f7fe f95b 	bl	80063a2 <memchr>
 80080ec:	b138      	cbz	r0, 80080fe <_vfiprintf_r+0x17a>
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	eba0 000a 	sub.w	r0, r0, sl
 80080f6:	4082      	lsls	r2, r0
 80080f8:	4313      	orrs	r3, r2
 80080fa:	3401      	adds	r4, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008102:	2206      	movs	r2, #6
 8008104:	4829      	ldr	r0, [pc, #164]	; (80081ac <_vfiprintf_r+0x228>)
 8008106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800810a:	f7fe f94a 	bl	80063a2 <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d03f      	beq.n	8008192 <_vfiprintf_r+0x20e>
 8008112:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <_vfiprintf_r+0x22c>)
 8008114:	bb1b      	cbnz	r3, 800815e <_vfiprintf_r+0x1da>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	3307      	adds	r3, #7
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	3308      	adds	r3, #8
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	443b      	add	r3, r7
 8008126:	9309      	str	r3, [sp, #36]	; 0x24
 8008128:	e768      	b.n	8007ffc <_vfiprintf_r+0x78>
 800812a:	460c      	mov	r4, r1
 800812c:	2001      	movs	r0, #1
 800812e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008132:	e7a6      	b.n	8008082 <_vfiprintf_r+0xfe>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 0c0a 	mov.w	ip, #10
 800813a:	4619      	mov	r1, r3
 800813c:	3401      	adds	r4, #1
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	4620      	mov	r0, r4
 8008142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008146:	3a30      	subs	r2, #48	; 0x30
 8008148:	2a09      	cmp	r2, #9
 800814a:	d903      	bls.n	8008154 <_vfiprintf_r+0x1d0>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c6      	beq.n	80080de <_vfiprintf_r+0x15a>
 8008150:	9105      	str	r1, [sp, #20]
 8008152:	e7c4      	b.n	80080de <_vfiprintf_r+0x15a>
 8008154:	4604      	mov	r4, r0
 8008156:	2301      	movs	r3, #1
 8008158:	fb0c 2101 	mla	r1, ip, r1, r2
 800815c:	e7f0      	b.n	8008140 <_vfiprintf_r+0x1bc>
 800815e:	ab03      	add	r3, sp, #12
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	462a      	mov	r2, r5
 8008164:	4630      	mov	r0, r6
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <_vfiprintf_r+0x230>)
 8008168:	a904      	add	r1, sp, #16
 800816a:	f7fd fbb3 	bl	80058d4 <_printf_float>
 800816e:	4607      	mov	r7, r0
 8008170:	1c78      	adds	r0, r7, #1
 8008172:	d1d6      	bne.n	8008122 <_vfiprintf_r+0x19e>
 8008174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008176:	07d9      	lsls	r1, r3, #31
 8008178:	d405      	bmi.n	8008186 <_vfiprintf_r+0x202>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	059a      	lsls	r2, r3, #22
 800817e:	d402      	bmi.n	8008186 <_vfiprintf_r+0x202>
 8008180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008182:	f7fe f90d 	bl	80063a0 <__retarget_lock_release_recursive>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	065b      	lsls	r3, r3, #25
 800818a:	f53f af1d 	bmi.w	8007fc8 <_vfiprintf_r+0x44>
 800818e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008190:	e71c      	b.n	8007fcc <_vfiprintf_r+0x48>
 8008192:	ab03      	add	r3, sp, #12
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	462a      	mov	r2, r5
 8008198:	4630      	mov	r0, r6
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <_vfiprintf_r+0x230>)
 800819c:	a904      	add	r1, sp, #16
 800819e:	f7fd fe39 	bl	8005e14 <_printf_i>
 80081a2:	e7e4      	b.n	800816e <_vfiprintf_r+0x1ea>
 80081a4:	08008844 	.word	0x08008844
 80081a8:	0800884a 	.word	0x0800884a
 80081ac:	0800884e 	.word	0x0800884e
 80081b0:	080058d5 	.word	0x080058d5
 80081b4:	08007f61 	.word	0x08007f61

080081b8 <__swbuf_r>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	460e      	mov	r6, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	4605      	mov	r5, r0
 80081c0:	b118      	cbz	r0, 80081ca <__swbuf_r+0x12>
 80081c2:	6a03      	ldr	r3, [r0, #32]
 80081c4:	b90b      	cbnz	r3, 80081ca <__swbuf_r+0x12>
 80081c6:	f7fd ffd3 	bl	8006170 <__sinit>
 80081ca:	69a3      	ldr	r3, [r4, #24]
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	071a      	lsls	r2, r3, #28
 80081d2:	d525      	bpl.n	8008220 <__swbuf_r+0x68>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b31b      	cbz	r3, 8008220 <__swbuf_r+0x68>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	b2f6      	uxtb	r6, r6
 80081de:	1a98      	subs	r0, r3, r2
 80081e0:	6963      	ldr	r3, [r4, #20]
 80081e2:	4637      	mov	r7, r6
 80081e4:	4283      	cmp	r3, r0
 80081e6:	dc04      	bgt.n	80081f2 <__swbuf_r+0x3a>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f7ff fda2 	bl	8007d34 <_fflush_r>
 80081f0:	b9e0      	cbnz	r0, 800822c <__swbuf_r+0x74>
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	701e      	strb	r6, [r3, #0]
 8008200:	6962      	ldr	r2, [r4, #20]
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	429a      	cmp	r2, r3
 8008206:	d004      	beq.n	8008212 <__swbuf_r+0x5a>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d506      	bpl.n	800821c <__swbuf_r+0x64>
 800820e:	2e0a      	cmp	r6, #10
 8008210:	d104      	bne.n	800821c <__swbuf_r+0x64>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f7ff fd8d 	bl	8007d34 <_fflush_r>
 800821a:	b938      	cbnz	r0, 800822c <__swbuf_r+0x74>
 800821c:	4638      	mov	r0, r7
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	4621      	mov	r1, r4
 8008222:	4628      	mov	r0, r5
 8008224:	f000 f806 	bl	8008234 <__swsetup_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	d0d5      	beq.n	80081d8 <__swbuf_r+0x20>
 800822c:	f04f 37ff 	mov.w	r7, #4294967295
 8008230:	e7f4      	b.n	800821c <__swbuf_r+0x64>
	...

08008234 <__swsetup_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <__swsetup_r+0xac>)
 8008238:	4605      	mov	r5, r0
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	460c      	mov	r4, r1
 800823e:	b118      	cbz	r0, 8008248 <__swsetup_r+0x14>
 8008240:	6a03      	ldr	r3, [r0, #32]
 8008242:	b90b      	cbnz	r3, 8008248 <__swsetup_r+0x14>
 8008244:	f7fd ff94 	bl	8006170 <__sinit>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824e:	0718      	lsls	r0, r3, #28
 8008250:	d422      	bmi.n	8008298 <__swsetup_r+0x64>
 8008252:	06d9      	lsls	r1, r3, #27
 8008254:	d407      	bmi.n	8008266 <__swsetup_r+0x32>
 8008256:	2309      	movs	r3, #9
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800825e:	f04f 30ff 	mov.w	r0, #4294967295
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	e034      	b.n	80082d0 <__swsetup_r+0x9c>
 8008266:	0758      	lsls	r0, r3, #29
 8008268:	d512      	bpl.n	8008290 <__swsetup_r+0x5c>
 800826a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826c:	b141      	cbz	r1, 8008280 <__swsetup_r+0x4c>
 800826e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008272:	4299      	cmp	r1, r3
 8008274:	d002      	beq.n	800827c <__swsetup_r+0x48>
 8008276:	4628      	mov	r0, r5
 8008278:	f7fe ff0e 	bl	8007098 <_free_r>
 800827c:	2300      	movs	r3, #0
 800827e:	6363      	str	r3, [r4, #52]	; 0x34
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	2300      	movs	r3, #0
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f043 0308 	orr.w	r3, r3, #8
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	b94b      	cbnz	r3, 80082b0 <__swsetup_r+0x7c>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a6:	d003      	beq.n	80082b0 <__swsetup_r+0x7c>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f883 	bl	80083b6 <__smakebuf_r>
 80082b0:	89a0      	ldrh	r0, [r4, #12]
 80082b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b6:	f010 0301 	ands.w	r3, r0, #1
 80082ba:	d00a      	beq.n	80082d2 <__swsetup_r+0x9e>
 80082bc:	2300      	movs	r3, #0
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6963      	ldr	r3, [r4, #20]
 80082c2:	425b      	negs	r3, r3
 80082c4:	61a3      	str	r3, [r4, #24]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	b943      	cbnz	r3, 80082dc <__swsetup_r+0xa8>
 80082ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082ce:	d1c4      	bne.n	800825a <__swsetup_r+0x26>
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	0781      	lsls	r1, r0, #30
 80082d4:	bf58      	it	pl
 80082d6:	6963      	ldrpl	r3, [r4, #20]
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	e7f4      	b.n	80082c6 <__swsetup_r+0x92>
 80082dc:	2000      	movs	r0, #0
 80082de:	e7f7      	b.n	80082d0 <__swsetup_r+0x9c>
 80082e0:	20000068 	.word	0x20000068

080082e4 <_raise_r>:
 80082e4:	291f      	cmp	r1, #31
 80082e6:	b538      	push	{r3, r4, r5, lr}
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	d904      	bls.n	80082f8 <_raise_r+0x14>
 80082ee:	2316      	movs	r3, #22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082fa:	b112      	cbz	r2, 8008302 <_raise_r+0x1e>
 80082fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008300:	b94b      	cbnz	r3, 8008316 <_raise_r+0x32>
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f830 	bl	8008368 <_getpid_r>
 8008308:	462a      	mov	r2, r5
 800830a:	4601      	mov	r1, r0
 800830c:	4620      	mov	r0, r4
 800830e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008312:	f000 b817 	b.w	8008344 <_kill_r>
 8008316:	2b01      	cmp	r3, #1
 8008318:	d00a      	beq.n	8008330 <_raise_r+0x4c>
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	d103      	bne.n	8008326 <_raise_r+0x42>
 800831e:	2316      	movs	r3, #22
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	2001      	movs	r0, #1
 8008324:	e7e7      	b.n	80082f6 <_raise_r+0x12>
 8008326:	2400      	movs	r4, #0
 8008328:	4628      	mov	r0, r5
 800832a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800832e:	4798      	blx	r3
 8008330:	2000      	movs	r0, #0
 8008332:	e7e0      	b.n	80082f6 <_raise_r+0x12>

08008334 <raise>:
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <raise+0xc>)
 8008336:	4601      	mov	r1, r0
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f7ff bfd3 	b.w	80082e4 <_raise_r>
 800833e:	bf00      	nop
 8008340:	20000068 	.word	0x20000068

08008344 <_kill_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	2300      	movs	r3, #0
 8008348:	4d06      	ldr	r5, [pc, #24]	; (8008364 <_kill_r+0x20>)
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	f7fa f834 	bl	80023be <_kill>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d102      	bne.n	8008360 <_kill_r+0x1c>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b103      	cbz	r3, 8008360 <_kill_r+0x1c>
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	200004c4 	.word	0x200004c4

08008368 <_getpid_r>:
 8008368:	f7fa b822 	b.w	80023b0 <_getpid>

0800836c <__swhatbuf_r>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	460c      	mov	r4, r1
 8008370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008374:	4615      	mov	r5, r2
 8008376:	2900      	cmp	r1, #0
 8008378:	461e      	mov	r6, r3
 800837a:	b096      	sub	sp, #88	; 0x58
 800837c:	da0c      	bge.n	8008398 <__swhatbuf_r+0x2c>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	2100      	movs	r1, #0
 8008382:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008386:	bf0c      	ite	eq
 8008388:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800838c:	2340      	movne	r3, #64	; 0x40
 800838e:	2000      	movs	r0, #0
 8008390:	6031      	str	r1, [r6, #0]
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	b016      	add	sp, #88	; 0x58
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	466a      	mov	r2, sp
 800839a:	f000 f849 	bl	8008430 <_fstat_r>
 800839e:	2800      	cmp	r0, #0
 80083a0:	dbed      	blt.n	800837e <__swhatbuf_r+0x12>
 80083a2:	9901      	ldr	r1, [sp, #4]
 80083a4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083a8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083ac:	4259      	negs	r1, r3
 80083ae:	4159      	adcs	r1, r3
 80083b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b4:	e7eb      	b.n	800838e <__swhatbuf_r+0x22>

080083b6 <__smakebuf_r>:
 80083b6:	898b      	ldrh	r3, [r1, #12]
 80083b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ba:	079d      	lsls	r5, r3, #30
 80083bc:	4606      	mov	r6, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	d507      	bpl.n	80083d2 <__smakebuf_r+0x1c>
 80083c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2301      	movs	r3, #1
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	b002      	add	sp, #8
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	466a      	mov	r2, sp
 80083d4:	ab01      	add	r3, sp, #4
 80083d6:	f7ff ffc9 	bl	800836c <__swhatbuf_r>
 80083da:	9900      	ldr	r1, [sp, #0]
 80083dc:	4605      	mov	r5, r0
 80083de:	4630      	mov	r0, r6
 80083e0:	f7fe feca 	bl	8007178 <_malloc_r>
 80083e4:	b948      	cbnz	r0, 80083fa <__smakebuf_r+0x44>
 80083e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ea:	059a      	lsls	r2, r3, #22
 80083ec:	d4ef      	bmi.n	80083ce <__smakebuf_r+0x18>
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	f043 0302 	orr.w	r3, r3, #2
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	e7e3      	b.n	80083c2 <__smakebuf_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	6020      	str	r0, [r4, #0]
 80083fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	6120      	str	r0, [r4, #16]
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	b15b      	cbz	r3, 8008426 <__smakebuf_r+0x70>
 800840e:	4630      	mov	r0, r6
 8008410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008414:	f000 f81e 	bl	8008454 <_isatty_r>
 8008418:	b128      	cbz	r0, 8008426 <__smakebuf_r+0x70>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	431d      	orrs	r5, r3
 800842a:	81a5      	strh	r5, [r4, #12]
 800842c:	e7cf      	b.n	80083ce <__smakebuf_r+0x18>
	...

08008430 <_fstat_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_fstat_r+0x20>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	4611      	mov	r1, r2
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	f7fa f81c 	bl	800247a <_fstat>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d102      	bne.n	800844c <_fstat_r+0x1c>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b103      	cbz	r3, 800844c <_fstat_r+0x1c>
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	200004c4 	.word	0x200004c4

08008454 <_isatty_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_isatty_r+0x1c>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7fa f81a 	bl	8002498 <_isatty>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_isatty_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_isatty_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	200004c4 	.word	0x200004c4

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
