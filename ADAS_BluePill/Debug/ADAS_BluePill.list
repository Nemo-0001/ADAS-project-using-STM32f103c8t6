
ADAS_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08008f60  08008f60  00018f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800952c  0800952c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800952c  0800952c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800952c  0800952c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001d8  0800970c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800970c  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d493  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002985  00000000  00000000  0002d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00030060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b17  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a816  00000000  00000000  00031a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130c4  00000000  00000000  0004c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d3ac  00000000  00000000  0005f2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb0  00000000  00000000  000ec690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f1340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f44 	.word	0x08008f44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008f44 	.word	0x08008f44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_GPIO_Init+0xb8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <MX_GPIO_Init+0xb8>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_GPIO_Init+0xb8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_GPIO_Init+0xb8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <MX_GPIO_Init+0xb8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_GPIO_Init+0xb8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_GPIO_Init+0xb8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <MX_GPIO_Init+0xb8>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_GPIO_Init+0xb8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|Trigger4_Pin
 800116c:	2200      	movs	r2, #0
 800116e:	f24f 6133 	movw	r1, #63027	; 0xf633
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <MX_GPIO_Init+0xbc>)
 8001174:	f001 fc3c 	bl	80029f0 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|Trigger5_Pin|LED_RED_Pin|L298_IN3_Pin
                          |L298_IN4_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger1_Pin|Trigger2_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_GPIO_Init+0xc0>)
 8001180:	f001 fc36 	bl	80029f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|Trigger3_Pin|Trigger4_Pin
 8001184:	f24f 6333 	movw	r3, #63027	; 0xf633
 8001188:	613b      	str	r3, [r7, #16]
                          |Buzzer_Pin|Trigger5_Pin|LED_RED_Pin|L298_IN3_Pin
                          |L298_IN4_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <MX_GPIO_Init+0xbc>)
 800119e:	f001 faa3 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin|LED_YELLOW_Pin;
 80011a2:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_GPIO_Init+0xc0>)
 80011bc:	f001 fa94 	bl	80026e8 <HAL_GPIO_Init>

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40010800 	.word	0x40010800

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011da:	f001 f841 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011de:	f000 f971 	bl	80014c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Sys_Init();
 80011e2:	f000 f9b5 	bl	8001550 <Sys_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f7ff ff93 	bl	8001110 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011ea:	f000 ff95 	bl	8002118 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  UART_Receiving_Init();
 80011ee:	f000 fcb9 	bl	8001b64 <UART_Receiving_Init>

  /*Local variables begin*/
  float Front_Distance = 0.0, Right_Distance = 0.0, Left_Distance = 0.0, BlindSpot_Right = 0.0, BlindSpot_Left = 0.0;
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	607b      	str	r3, [r7, #4]

  /*Local variables end*/

  UART_SendString("UART is ready for sending & receiving...\r\n");
 8001210:	489f      	ldr	r0, [pc, #636]	; (8001490 <main+0x2bc>)
 8001212:	f000 fcb9 	bl	8001b88 <UART_SendString>
  HAL_Delay(50);
 8001216:	2032      	movs	r0, #50	; 0x32
 8001218:	f001 f884 	bl	8002324 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	switch (current_state) {
 800121c:	4b9d      	ldr	r3, [pc, #628]	; (8001494 <main+0x2c0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b06      	cmp	r3, #6
 8001222:	f200 8133 	bhi.w	800148c <main+0x2b8>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <main+0x58>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	08001249 	.word	0x08001249
 8001230:	080012df 	.word	0x080012df
 8001234:	0800132d 	.word	0x0800132d
 8001238:	08001393 	.word	0x08001393
 800123c:	080013f9 	.word	0x080013f9
 8001240:	0800140b 	.word	0x0800140b
 8001244:	08001447 	.word	0x08001447
		case Forward:
			Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001248:	2001      	movs	r0, #1
 800124a:	f004 ff21 	bl	8006090 <HCSR04_Read>
 800124e:	6178      	str	r0, [r7, #20]
			if(Front_Distance > SAFE_DISTANCE){
 8001250:	4991      	ldr	r1, [pc, #580]	; (8001498 <main+0x2c4>)
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff32 	bl	80010bc <__aeabi_fcmpgt>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <main+0x92>
				Alarm_Subsystem(ALARM_LOW_LEVEL);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 fc3c 	bl	8001adc <Alarm_Subsystem>
 8001264:	e014      	b.n	8001290 <main+0xbc>
			} else if((Front_Distance < SAFE_DISTANCE) && (Front_Distance > THRESHOLD_DISTANCE)){
 8001266:	498c      	ldr	r1, [pc, #560]	; (8001498 <main+0x2c4>)
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ff09 	bl	8001080 <__aeabi_fcmplt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00a      	beq.n	800128a <main+0xb6>
 8001274:	4989      	ldr	r1, [pc, #548]	; (800149c <main+0x2c8>)
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff20 	bl	80010bc <__aeabi_fcmpgt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <main+0xb6>
				Alarm_Subsystem(ALARM_MEDIUM_LEVEL);
 8001282:	2002      	movs	r0, #2
 8001284:	f000 fc2a 	bl	8001adc <Alarm_Subsystem>
 8001288:	e002      	b.n	8001290 <main+0xbc>
			} else{
				Alarm_Subsystem(ALARM_HIGH_LEVEL);
 800128a:	2003      	movs	r0, #3
 800128c:	f000 fc26 	bl	8001adc <Alarm_Subsystem>
			}

			if (current_speed != 0) {
 8001290:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <main+0x2cc>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d018      	beq.n	80012ca <main+0xf6>
				UART_SendString("Moving forward with speed: ");
 8001298:	4882      	ldr	r0, [pc, #520]	; (80014a4 <main+0x2d0>)
 800129a:	f000 fc75 	bl	8001b88 <UART_SendString>
				UART_SendFloat(current_speed);
 800129e:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <main+0x2cc>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fcf6 	bl	8000c94 <__aeabi_ui2f>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fc8a 	bl	8001bc4 <UART_SendFloat>
				UART_SendString("\r\n");
 80012b0:	487d      	ldr	r0, [pc, #500]	; (80014a8 <main+0x2d4>)
 80012b2:	f000 fc69 	bl	8001b88 <UART_SendString>
				move_forward(current_speed);
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <main+0x2cc>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9b0 	bl	8001620 <move_forward>
				HAL_Delay(300);
 80012c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012c4:	f001 f82e 	bl	8002324 <HAL_Delay>
 80012c8:	e005      	b.n	80012d6 <main+0x102>
			} else {
				UART_SendString("Your speed is minimum\r\n");
 80012ca:	4878      	ldr	r0, [pc, #480]	; (80014ac <main+0x2d8>)
 80012cc:	f000 fc5c 	bl	8001b88 <UART_SendString>
				HAL_Delay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f001 f827 	bl	8002324 <HAL_Delay>
			}
			current_state = Stop;
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <main+0x2c0>)
 80012d8:	2204      	movs	r2, #4
 80012da:	701a      	strb	r2, [r3, #0]
			break;
 80012dc:	e0d7      	b.n	800148e <main+0x2ba>

		case Backward:
			if (current_speed != 0) {
 80012de:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <main+0x2cc>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <main+0x144>
				UART_SendString("Moving backward with speed: ");
 80012e6:	4872      	ldr	r0, [pc, #456]	; (80014b0 <main+0x2dc>)
 80012e8:	f000 fc4e 	bl	8001b88 <UART_SendString>
				UART_SendFloat(current_speed);
 80012ec:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <main+0x2cc>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fccf 	bl	8000c94 <__aeabi_ui2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fc63 	bl	8001bc4 <UART_SendFloat>
				UART_SendString("\r\n");
 80012fe:	486a      	ldr	r0, [pc, #424]	; (80014a8 <main+0x2d4>)
 8001300:	f000 fc42 	bl	8001b88 <UART_SendString>
				move_backward(current_speed);
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <main+0x2cc>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f99e 	bl	800164a <move_backward>
				HAL_Delay(300);
 800130e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001312:	f001 f807 	bl	8002324 <HAL_Delay>
 8001316:	e005      	b.n	8001324 <main+0x150>
			} else {
				UART_SendString("Your speed is minimum\r\n");
 8001318:	4864      	ldr	r0, [pc, #400]	; (80014ac <main+0x2d8>)
 800131a:	f000 fc35 	bl	8001b88 <UART_SendString>
				HAL_Delay(100);
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	f001 f800 	bl	8002324 <HAL_Delay>
			}
			current_state = Stop;
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <main+0x2c0>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
			break;
 800132a:	e0b0      	b.n	800148e <main+0x2ba>

		case Right:
			Right_Distance = HCSR04_Read(HCSR04_SENSOR1);
 800132c:	2000      	movs	r0, #0
 800132e:	f004 feaf 	bl	8006090 <HCSR04_Read>
 8001332:	6138      	str	r0, [r7, #16]
			if (Right_Distance > SAFE_DISTANCE) {
 8001334:	4958      	ldr	r1, [pc, #352]	; (8001498 <main+0x2c4>)
 8001336:	6938      	ldr	r0, [r7, #16]
 8001338:	f7ff fec0 	bl	80010bc <__aeabi_fcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <main+0x176>
				Alarm_Subsystem(ALARM_LOW_LEVEL);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fbca 	bl	8001adc <Alarm_Subsystem>
 8001348:	e014      	b.n	8001374 <main+0x1a0>
			} else if ((Right_Distance < SAFE_DISTANCE) && (Right_Distance > THRESHOLD_DISTANCE)) {
 800134a:	4953      	ldr	r1, [pc, #332]	; (8001498 <main+0x2c4>)
 800134c:	6938      	ldr	r0, [r7, #16]
 800134e:	f7ff fe97 	bl	8001080 <__aeabi_fcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <main+0x19a>
 8001358:	4950      	ldr	r1, [pc, #320]	; (800149c <main+0x2c8>)
 800135a:	6938      	ldr	r0, [r7, #16]
 800135c:	f7ff feae 	bl	80010bc <__aeabi_fcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <main+0x19a>
				Alarm_Subsystem(ALARM_MEDIUM_LEVEL);
 8001366:	2002      	movs	r0, #2
 8001368:	f000 fbb8 	bl	8001adc <Alarm_Subsystem>
 800136c:	e002      	b.n	8001374 <main+0x1a0>
			} else {
				Alarm_Subsystem(ALARM_HIGH_LEVEL);
 800136e:	2003      	movs	r0, #3
 8001370:	f000 fbb4 	bl	8001adc <Alarm_Subsystem>
			}

			UART_SendString("Moving right\r\n");
 8001374:	484f      	ldr	r0, [pc, #316]	; (80014b4 <main+0x2e0>)
 8001376:	f000 fc07 	bl	8001b88 <UART_SendString>
			move_right(MAX_SPEED);
 800137a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800137e:	f000 f979 	bl	8001674 <move_right>
			HAL_Delay(300);
 8001382:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001386:	f000 ffcd 	bl	8002324 <HAL_Delay>
			current_state = Stop;
 800138a:	4b42      	ldr	r3, [pc, #264]	; (8001494 <main+0x2c0>)
 800138c:	2204      	movs	r2, #4
 800138e:	701a      	strb	r2, [r3, #0]
			break;
 8001390:	e07d      	b.n	800148e <main+0x2ba>

		case Left:
			Left_Distance = HCSR04_Read(HCSR04_SENSOR3);
 8001392:	2002      	movs	r0, #2
 8001394:	f004 fe7c 	bl	8006090 <HCSR04_Read>
 8001398:	60f8      	str	r0, [r7, #12]
			if (Left_Distance > SAFE_DISTANCE) {
 800139a:	493f      	ldr	r1, [pc, #252]	; (8001498 <main+0x2c4>)
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fe8d 	bl	80010bc <__aeabi_fcmpgt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <main+0x1dc>
				Alarm_Subsystem(ALARM_LOW_LEVEL);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 fb97 	bl	8001adc <Alarm_Subsystem>
 80013ae:	e014      	b.n	80013da <main+0x206>
			} else if ((Left_Distance < SAFE_DISTANCE) && (Left_Distance > THRESHOLD_DISTANCE)) {
 80013b0:	4939      	ldr	r1, [pc, #228]	; (8001498 <main+0x2c4>)
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff fe64 	bl	8001080 <__aeabi_fcmplt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <main+0x200>
 80013be:	4937      	ldr	r1, [pc, #220]	; (800149c <main+0x2c8>)
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff fe7b 	bl	80010bc <__aeabi_fcmpgt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <main+0x200>
				Alarm_Subsystem(ALARM_MEDIUM_LEVEL);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 fb85 	bl	8001adc <Alarm_Subsystem>
 80013d2:	e002      	b.n	80013da <main+0x206>
			} else {
				Alarm_Subsystem(ALARM_HIGH_LEVEL);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 fb81 	bl	8001adc <Alarm_Subsystem>
			}

			UART_SendString("Moving left\r\n");
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <main+0x2e4>)
 80013dc:	f000 fbd4 	bl	8001b88 <UART_SendString>
			move_left(MAX_SPEED);
 80013e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013e4:	f000 f95a 	bl	800169c <move_left>
			HAL_Delay(300);
 80013e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013ec:	f000 ff9a 	bl	8002324 <HAL_Delay>
			current_state = Stop;
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <main+0x2c0>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	701a      	strb	r2, [r3, #0]
			break;
 80013f6:	e04a      	b.n	800148e <main+0x2ba>

		case Stop:
			Alarm_Subsystem(ALARM_OFF);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fb6f 	bl	8001adc <Alarm_Subsystem>
			stop();
 80013fe:	f000 f961 	bl	80016c4 <stop>
			UART_SendString("Stopped\r\n");
 8001402:	482e      	ldr	r0, [pc, #184]	; (80014bc <main+0x2e8>)
 8001404:	f000 fbc0 	bl	8001b88 <UART_SendString>
			break;
 8001408:	e041      	b.n	800148e <main+0x2ba>

		case Obstacle_Avoidance:
			Right_Distance = HCSR04_Read(HCSR04_SENSOR1);
 800140a:	2000      	movs	r0, #0
 800140c:	f004 fe40 	bl	8006090 <HCSR04_Read>
 8001410:	6138      	str	r0, [r7, #16]

			Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001412:	2001      	movs	r0, #1
 8001414:	f004 fe3c 	bl	8006090 <HCSR04_Read>
 8001418:	6178      	str	r0, [r7, #20]
			UART_SendString("Front distance: ");
 800141a:	4829      	ldr	r0, [pc, #164]	; (80014c0 <main+0x2ec>)
 800141c:	f000 fbb4 	bl	8001b88 <UART_SendString>
			UART_SendFloat(Front_Distance);
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f000 fbcf 	bl	8001bc4 <UART_SendFloat>
			UART_SendString("\r\n");
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <main+0x2d4>)
 8001428:	f000 fbae 	bl	8001b88 <UART_SendString>

			Left_Distance = HCSR04_Read(HCSR04_SENSOR3);
 800142c:	2002      	movs	r0, #2
 800142e:	f004 fe2f 	bl	8006090 <HCSR04_Read>
 8001432:	60f8      	str	r0, [r7, #12]

			Obdtacle_Avoidance(Front_Distance, Right_Distance, Left_Distance);
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f000 f9a9 	bl	8001790 <Obdtacle_Avoidance>
			HAL_Delay(50);
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 ff70 	bl	8002324 <HAL_Delay>

			break;
 8001444:	e023      	b.n	800148e <main+0x2ba>

		case BlindSpot_AdaptiveCruise:
			Front_Distance = HCSR04_Read(HCSR04_SENSOR2);
 8001446:	2001      	movs	r0, #1
 8001448:	f004 fe22 	bl	8006090 <HCSR04_Read>
 800144c:	6178      	str	r0, [r7, #20]
			UART_SendString("Front distance: ");
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <main+0x2ec>)
 8001450:	f000 fb9a 	bl	8001b88 <UART_SendString>
			UART_SendFloat(Front_Distance);
 8001454:	6978      	ldr	r0, [r7, #20]
 8001456:	f000 fbb5 	bl	8001bc4 <UART_SendFloat>
			UART_SendString("\r\n");
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <main+0x2d4>)
 800145c:	f000 fb94 	bl	8001b88 <UART_SendString>

			BlindSpot_Right = HCSR04_Read(HCSR04_SENSOR4);
 8001460:	2003      	movs	r0, #3
 8001462:	f004 fe15 	bl	8006090 <HCSR04_Read>
 8001466:	60b8      	str	r0, [r7, #8]
			BlindSpot_Left = HCSR04_Read(HCSR04_SENSOR5);
 8001468:	2004      	movs	r0, #4
 800146a:	f004 fe11 	bl	8006090 <HCSR04_Read>
 800146e:	6078      	str	r0, [r7, #4]

			Adaptive_Cruise_Control(Front_Distance);
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f000 fa45 	bl	8001900 <Adaptive_Cruise_Control>
			HAL_Delay(50);
 8001476:	2032      	movs	r0, #50	; 0x32
 8001478:	f000 ff54 	bl	8002324 <HAL_Delay>

			BlindSpot_Detection(BlindSpot_Right, BlindSpot_Left);
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f000 fac4 	bl	8001a0c <BlindSpot_Detection>
			HAL_Delay(50);
 8001484:	2032      	movs	r0, #50	; 0x32
 8001486:	f000 ff4d 	bl	8002324 <HAL_Delay>

			break;
 800148a:	e000      	b.n	800148e <main+0x2ba>

			current_state = Stop;
			break;

		default:
			break;
 800148c:	bf00      	nop
	switch (current_state) {
 800148e:	e6c5      	b.n	800121c <main+0x48>
 8001490:	08008f60 	.word	0x08008f60
 8001494:	20000000 	.word	0x20000000
 8001498:	41f00000 	.word	0x41f00000
 800149c:	41a00000 	.word	0x41a00000
 80014a0:	20000290 	.word	0x20000290
 80014a4:	08008f8c 	.word	0x08008f8c
 80014a8:	08008fa8 	.word	0x08008fa8
 80014ac:	08008fac 	.word	0x08008fac
 80014b0:	08008fc4 	.word	0x08008fc4
 80014b4:	08008fe4 	.word	0x08008fe4
 80014b8:	08008ff4 	.word	0x08008ff4
 80014bc:	08009004 	.word	0x08009004
 80014c0:	08009010 	.word	0x08009010

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b090      	sub	sp, #64	; 0x40
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	2228      	movs	r2, #40	; 0x28
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fc4d 	bl	8006d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001502:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fa87 	bl	8002a20 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001518:	f000 fbf8 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fcf4 	bl	8002f24 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001542:	f000 fbe3 	bl	8001d0c <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	; 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <Sys_Init>:

/* USER CODE BEGIN 4 */

/*------------------------- (Initialization) ---------------------------------*/
static void Sys_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HCSR04_Init(HCSR04_SENSOR1, &htim4);
 8001554:	4914      	ldr	r1, [pc, #80]	; (80015a8 <Sys_Init+0x58>)
 8001556:	2000      	movs	r0, #0
 8001558:	f004 f952 	bl	8005800 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR2, &htim4);
 800155c:	4912      	ldr	r1, [pc, #72]	; (80015a8 <Sys_Init+0x58>)
 800155e:	2001      	movs	r0, #1
 8001560:	f004 f94e 	bl	8005800 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR3, &htim3);
 8001564:	4911      	ldr	r1, [pc, #68]	; (80015ac <Sys_Init+0x5c>)
 8001566:	2002      	movs	r0, #2
 8001568:	f004 f94a 	bl	8005800 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR4, &htim3);
 800156c:	490f      	ldr	r1, [pc, #60]	; (80015ac <Sys_Init+0x5c>)
 800156e:	2003      	movs	r0, #3
 8001570:	f004 f946 	bl	8005800 <HCSR04_Init>
	HCSR04_Init(HCSR04_SENSOR5, &htim4);
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <Sys_Init+0x58>)
 8001576:	2004      	movs	r0, #4
 8001578:	f004 f942 	bl	8005800 <HCSR04_Init>
    DC_MOTOR_Init(DC_MOTOR1);
 800157c:	2000      	movs	r0, #0
 800157e:	f003 fe5f 	bl	8005240 <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR2);
 8001582:	2001      	movs	r0, #1
 8001584:	f003 fe5c 	bl	8005240 <DC_MOTOR_Init>
    DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MIN_SPEED);
 8001588:	2200      	movs	r2, #0
 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f003 fff7 	bl	8005580 <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR2, DIR_CW, MIN_SPEED);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f003 fff2 	bl	8005580 <DC_MOTOR_Start>
    Buzzer_Init();
 800159c:	f003 fe2c 	bl	80051f8 <Buzzer_Init>
    LED_Init();
 80015a0:	f004 fde2 	bl	8006168 <LED_Init>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000023c 	.word	0x2000023c
 80015ac:	200001f4 	.word	0x200001f4

080015b0 <HAL_TIM_IC_CaptureCallback>:
/*------------------------- (Initialization end) ---------------------------------*/


/*------------------------- (Interrupt handling start) ---------------------------------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f004 fb21 	bl	8005c00 <HCSR04_TMR_IC_ISR>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_OVF_ISR(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f004 fadc 	bl	8005b8c <HCSR04_TMR_OVF_ISR>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <SysTick_CallBack>:

void SysTick_CallBack(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	TRIG_Ticks++;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <SysTick_CallBack+0x40>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <SysTick_CallBack+0x40>)
 80015ea:	801a      	strh	r2, [r3, #0]
    if(TRIG_Ticks >= 10) // Each 10msec
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <SysTick_CallBack+0x40>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d911      	bls.n	8001618 <SysTick_CallBack+0x3c>
    {
    	HCSR04_Trigger(HCSR04_SENSOR1);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f004 fd61 	bl	80060bc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR2);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f004 fd5e 	bl	80060bc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR3);
 8001600:	2002      	movs	r0, #2
 8001602:	f004 fd5b 	bl	80060bc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR4);
 8001606:	2003      	movs	r0, #3
 8001608:	f004 fd58 	bl	80060bc <HCSR04_Trigger>
    	HCSR04_Trigger(HCSR04_SENSOR5);
 800160c:	2004      	movs	r0, #4
 800160e:	f004 fd55 	bl	80060bc <HCSR04_Trigger>
    	TRIG_Ticks = 0;
 8001612:	4b02      	ldr	r3, [pc, #8]	; (800161c <SysTick_CallBack+0x40>)
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
    }
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000284 	.word	0x20000284

08001620 <move_forward>:
/*------------------------- (Interrupt handling end) ---------------------------------*/



/*------------------------- (Movement control start) ---------------------------------*/
void move_forward(uint16_t SpeedF){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, SpeedF);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	461a      	mov	r2, r3
 800162e:	2101      	movs	r1, #1
 8001630:	2000      	movs	r0, #0
 8001632:	f003 ffa5 	bl	8005580 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, SpeedF);
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	461a      	mov	r2, r3
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f003 ff9f 	bl	8005580 <DC_MOTOR_Start>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <move_backward>:


void move_backward(uint16_t SpeedB){
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	80fb      	strh	r3, [r7, #6]
	DC_MOTOR_Start(DC_MOTOR1, DIR_CW, SpeedB);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	461a      	mov	r2, r3
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f003 ff90 	bl	8005580 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CW, SpeedB);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	461a      	mov	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	2001      	movs	r0, #1
 8001668:	f003 ff8a 	bl	8005580 <DC_MOTOR_Start>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <move_right>:


void move_right(uint16_t SpeedR){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, SpeedR);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	461a      	mov	r2, r3
 8001682:	2101      	movs	r1, #1
 8001684:	2000      	movs	r0, #0
 8001686:	f003 ff7b 	bl	8005580 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, MIN_SPEED);
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	2001      	movs	r0, #1
 8001690:	f003 ff76 	bl	8005580 <DC_MOTOR_Start>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <move_left>:


void move_left(uint16_t SpeedL){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
	DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MIN_SPEED);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	2000      	movs	r0, #0
 80016ac:	f003 ff68 	bl	8005580 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR2, DIR_CCW, SpeedL);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	2001      	movs	r0, #1
 80016b8:	f003 ff62 	bl	8005580 <DC_MOTOR_Start>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <stop>:


void stop(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	DC_MOTOR_Stop(DC_MOTOR1);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f004 f833 	bl	8005734 <DC_MOTOR_Stop>
	DC_MOTOR_Stop(DC_MOTOR2);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f004 f830 	bl	8005734 <DC_MOTOR_Stop>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Speed_Control>:

void Speed_Control(uint16_t Speed1, uint16_t Speed2){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
	DC_MOTOR_Set_Speed(DC_MOTOR1, Speed1);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4619      	mov	r1, r3
 80016ec:	2000      	movs	r0, #0
 80016ee:	f003 ffd7 	bl	80056a0 <DC_MOTOR_Set_Speed>
	DC_MOTOR_Set_Speed(DC_MOTOR2, Speed2);
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	4619      	mov	r1, r3
 80016f6:	2001      	movs	r0, #1
 80016f8:	f003 ffd2 	bl	80056a0 <DC_MOTOR_Set_Speed>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <Calculate_Speed>:

/*
 * @Objective: Calculate the speed in cm/s.
 *
 * */
float Calculate_Speed(float current_distance, uint32_t current_time){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
    static float previous_distance = 0.0;
    static uint32_t previous_time = 0;
    float speed = 0.0;
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

    // Check if the previous time is not zero to avoid division by zero
    if (previous_time != 0) {
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Calculate_Speed+0x80>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <Calculate_Speed+0x5a>
        // Calculate the time difference in seconds
        float time_diff = (current_time - previous_time) / 1000.0; // Assuming current_time is in milliseconds
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <Calculate_Speed+0x80>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe5d 	bl	80003e4 <__aeabi_ui2d>
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <Calculate_Speed+0x84>)
 8001730:	f7fe fffc 	bl	800072c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f9a4 	bl	8000a88 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	60bb      	str	r3, [r7, #8]

        // Calculate the speed (distance change over time)
        speed = (current_distance - previous_distance) / time_diff; // Speed in cm/s
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <Calculate_Speed+0x88>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff f9f0 	bl	8000b30 <__aeabi_fsub>
 8001750:	4603      	mov	r3, r0
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fba9 	bl	8000eac <__aeabi_fdiv>
 800175a:	4603      	mov	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]
    }

    // Update the previous distance and time for the next calculation
    previous_distance = current_distance;
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <Calculate_Speed+0x88>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <Calculate_Speed+0x80>)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6013      	str	r3, [r2, #0]

    return (uint16_t)speed;
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fcb0 	bl	80010d0 <__aeabi_f2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fa8d 	bl	8000c94 <__aeabi_ui2f>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000294 	.word	0x20000294
 8001788:	408f4000 	.word	0x408f4000
 800178c:	20000298 	.word	0x20000298

08001790 <Obdtacle_Avoidance>:
/*------------------------- (Movement control end) ---------------------------------*/



/*------------------------- (Features part start) ---------------------------------*/
void Obdtacle_Avoidance(float Front_Distance, float Right_Distance, float Left_Distance){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	// Perform obstacle avoidance logic
	if (Right_Distance < THRESHOLD_DISTANCE || Front_Distance < THRESHOLD_DISTANCE || Left_Distance < THRESHOLD_DISTANCE) {
 800179c:	494f      	ldr	r1, [pc, #316]	; (80018dc <Obdtacle_Avoidance+0x14c>)
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f7ff fc6e 	bl	8001080 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <Obdtacle_Avoidance+0x36>
 80017aa:	494c      	ldr	r1, [pc, #304]	; (80018dc <Obdtacle_Avoidance+0x14c>)
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fc67 	bl	8001080 <__aeabi_fcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d106      	bne.n	80017c6 <Obdtacle_Avoidance+0x36>
 80017b8:	4948      	ldr	r1, [pc, #288]	; (80018dc <Obdtacle_Avoidance+0x14c>)
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fc60 	bl	8001080 <__aeabi_fcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d066      	beq.n	8001894 <Obdtacle_Avoidance+0x104>
		// Obstacle detected
		// Choose appropriate avoidance maneuver
		if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 80017c6:	68f9      	ldr	r1, [r7, #12]
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f7ff fc59 	bl	8001080 <__aeabi_fcmplt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00f      	beq.n	80017f4 <Obdtacle_Avoidance+0x64>
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f7ff fc52 	bl	8001080 <__aeabi_fcmplt>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <Obdtacle_Avoidance+0x64>
			// Obstacle is closer to sensor 1
 			UART_SendString("Moving left\r\n");
 80017e2:	483f      	ldr	r0, [pc, #252]	; (80018e0 <Obdtacle_Avoidance+0x150>)
 80017e4:	f000 f9d0 	bl	8001b88 <UART_SendString>
			move_left(current_speed);
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff55 	bl	800169c <move_left>
 80017f2:	e04e      	b.n	8001892 <Obdtacle_Avoidance+0x102>
		} else if (Front_Distance < Right_Distance && Front_Distance < Left_Distance) {
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fc42 	bl	8001080 <__aeabi_fcmplt>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03e      	beq.n	8001880 <Obdtacle_Avoidance+0xf0>
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fc3b 	bl	8001080 <__aeabi_fcmplt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d037      	beq.n	8001880 <Obdtacle_Avoidance+0xf0>
			// Obstacle is closer to sensor 2
			UART_SendString("Moving backward\r\n");
 8001810:	4835      	ldr	r0, [pc, #212]	; (80018e8 <Obdtacle_Avoidance+0x158>)
 8001812:	f000 f9b9 	bl	8001b88 <UART_SendString>
			stop();
 8001816:	f7ff ff55 	bl	80016c4 <stop>
			move_backward(current_speed);
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff13 	bl	800164a <move_backward>
			HAL_Delay(50);
 8001824:	2032      	movs	r0, #50	; 0x32
 8001826:	f000 fd7d 	bl	8002324 <HAL_Delay>

			if (Right_Distance < Left_Distance) {
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68b8      	ldr	r0, [r7, #8]
 800182e:	f7ff fc27 	bl	8001080 <__aeabi_fcmplt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d011      	beq.n	800185c <Obdtacle_Avoidance+0xcc>
				UART_SendString("Moving left\r\n");
 8001838:	4829      	ldr	r0, [pc, #164]	; (80018e0 <Obdtacle_Avoidance+0x150>)
 800183a:	f000 f9a5 	bl	8001b88 <UART_SendString>
				move_left(current_speed);
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff2a 	bl	800169c <move_left>
				HAL_Delay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184c:	f000 fd6a 	bl	8002324 <HAL_Delay>
				move_forward(current_speed);
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fee3 	bl	8001620 <move_forward>
			if (Right_Distance < Left_Distance) {
 800185a:	e01a      	b.n	8001892 <Obdtacle_Avoidance+0x102>
			} else {
				UART_SendString("Moving right\r\n");
 800185c:	4823      	ldr	r0, [pc, #140]	; (80018ec <Obdtacle_Avoidance+0x15c>)
 800185e:	f000 f993 	bl	8001b88 <UART_SendString>
				move_right(current_speed);
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff04 	bl	8001674 <move_right>
				HAL_Delay(500);
 800186c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001870:	f000 fd58 	bl	8002324 <HAL_Delay>
				move_forward(current_speed);
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fed1 	bl	8001620 <move_forward>
			if (Right_Distance < Left_Distance) {
 800187e:	e008      	b.n	8001892 <Obdtacle_Avoidance+0x102>
			}
		} else {
			// Obstacle is closer to sensor 3
			UART_SendString("Moving right\r\n");
 8001880:	481a      	ldr	r0, [pc, #104]	; (80018ec <Obdtacle_Avoidance+0x15c>)
 8001882:	f000 f981 	bl	8001b88 <UART_SendString>
			move_right(current_speed);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fef2 	bl	8001674 <move_right>
		if (Right_Distance < Front_Distance && Right_Distance < Left_Distance) {
 8001890:	e01f      	b.n	80018d2 <Obdtacle_Avoidance+0x142>
 8001892:	e01e      	b.n	80018d2 <Obdtacle_Avoidance+0x142>
		}
	} else {
		// No obstacle detected
		Current_Time = HAL_GetTick(); // Get the current time in milliseconds
 8001894:	f000 fd3c 	bl	8002310 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <Obdtacle_Avoidance+0x160>)
 800189c:	6013      	str	r3, [r2, #0]
		Speed = Calculate_Speed(Front_Distance, Current_Time);
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <Obdtacle_Avoidance+0x160>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff ff2d 	bl	8001704 <Calculate_Speed>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <Obdtacle_Avoidance+0x164>)
 80018ae:	6013      	str	r3, [r2, #0]
		move_forward(current_speed);
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <Obdtacle_Avoidance+0x154>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff feb3 	bl	8001620 <move_forward>

		UART_SendString("Moving forward with speed: ");
 80018ba:	480f      	ldr	r0, [pc, #60]	; (80018f8 <Obdtacle_Avoidance+0x168>)
 80018bc:	f000 f964 	bl	8001b88 <UART_SendString>
		UART_SendFloat(Speed);
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <Obdtacle_Avoidance+0x164>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f97d 	bl	8001bc4 <UART_SendFloat>
		UART_SendString("\r\n");
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <Obdtacle_Avoidance+0x16c>)
 80018cc:	f000 f95c 	bl	8001b88 <UART_SendString>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	41a00000 	.word	0x41a00000
 80018e0:	08008ff4 	.word	0x08008ff4
 80018e4:	20000290 	.word	0x20000290
 80018e8:	08009024 	.word	0x08009024
 80018ec:	08008fe4 	.word	0x08008fe4
 80018f0:	20000288 	.word	0x20000288
 80018f4:	2000028c 	.word	0x2000028c
 80018f8:	08008f8c 	.word	0x08008f8c
 80018fc:	08008fa8 	.word	0x08008fa8

08001900 <Adaptive_Cruise_Control>:

void Adaptive_Cruise_Control(float Safe_Distance){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	//For safe distance detection
	if ((Safe_Distance < ADAPTIVE_DISTANCE) && (Safe_Distance > SAFE_DISTANCE)){
 8001908:	4934      	ldr	r1, [pc, #208]	; (80019dc <Adaptive_Cruise_Control+0xdc>)
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fbb8 	bl	8001080 <__aeabi_fcmplt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <Adaptive_Cruise_Control+0x44>
 8001916:	4932      	ldr	r1, [pc, #200]	; (80019e0 <Adaptive_Cruise_Control+0xe0>)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fbcf 	bl	80010bc <__aeabi_fcmpgt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00f      	beq.n	8001944 <Adaptive_Cruise_Control+0x44>
		Speed_Control(0X7FF, 0X7FF);
 8001924:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001928:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800192c:	f7ff fed4 	bl	80016d8 <Speed_Control>
		UART_SendString("Speed has been limited to: ");
 8001930:	482c      	ldr	r0, [pc, #176]	; (80019e4 <Adaptive_Cruise_Control+0xe4>)
 8001932:	f000 f929 	bl	8001b88 <UART_SendString>
		UART_SendFloat(0X7FF);
 8001936:	482c      	ldr	r0, [pc, #176]	; (80019e8 <Adaptive_Cruise_Control+0xe8>)
 8001938:	f000 f944 	bl	8001bc4 <UART_SendFloat>
		UART_SendString("\r\n");
 800193c:	482b      	ldr	r0, [pc, #172]	; (80019ec <Adaptive_Cruise_Control+0xec>)
 800193e:	f000 f923 	bl	8001b88 <UART_SendString>
 8001942:	e047      	b.n	80019d4 <Adaptive_Cruise_Control+0xd4>
	} else if((Safe_Distance < SAFE_DISTANCE) && (Safe_Distance > THRESHOLD_DISTANCE)){
 8001944:	4926      	ldr	r1, [pc, #152]	; (80019e0 <Adaptive_Cruise_Control+0xe0>)
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fb9a 	bl	8001080 <__aeabi_fcmplt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d014      	beq.n	800197c <Adaptive_Cruise_Control+0x7c>
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <Adaptive_Cruise_Control+0xf0>)
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fbb1 	bl	80010bc <__aeabi_fcmpgt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <Adaptive_Cruise_Control+0x7c>
		Speed_Control(0XFA, 0XFA);
 8001960:	21fa      	movs	r1, #250	; 0xfa
 8001962:	20fa      	movs	r0, #250	; 0xfa
 8001964:	f7ff feb8 	bl	80016d8 <Speed_Control>
		UART_SendString("Speed has been limited to: ");
 8001968:	481e      	ldr	r0, [pc, #120]	; (80019e4 <Adaptive_Cruise_Control+0xe4>)
 800196a:	f000 f90d 	bl	8001b88 <UART_SendString>
		UART_SendFloat(0XFA);
 800196e:	4821      	ldr	r0, [pc, #132]	; (80019f4 <Adaptive_Cruise_Control+0xf4>)
 8001970:	f000 f928 	bl	8001bc4 <UART_SendFloat>
		UART_SendString("\r\n");
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <Adaptive_Cruise_Control+0xec>)
 8001976:	f000 f907 	bl	8001b88 <UART_SendString>
 800197a:	e02b      	b.n	80019d4 <Adaptive_Cruise_Control+0xd4>
	} else if (Safe_Distance < THRESHOLD_DISTANCE){
 800197c:	491c      	ldr	r1, [pc, #112]	; (80019f0 <Adaptive_Cruise_Control+0xf0>)
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fb7e 	bl	8001080 <__aeabi_fcmplt>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <Adaptive_Cruise_Control+0x96>
		stop();
 800198a:	f7ff fe9b 	bl	80016c4 <stop>
		UART_SendString("Stopped\r\n");
 800198e:	481a      	ldr	r0, [pc, #104]	; (80019f8 <Adaptive_Cruise_Control+0xf8>)
 8001990:	f000 f8fa 	bl	8001b88 <UART_SendString>

		UART_SendString("Moving forward with speed: ");
		UART_SendFloat(Speed);
		UART_SendString("\r\n");
	}
}
 8001994:	e01e      	b.n	80019d4 <Adaptive_Cruise_Control+0xd4>
		Current_Time = HAL_GetTick(); // Get the current time in milliseconds
 8001996:	f000 fcbb 	bl	8002310 <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <Adaptive_Cruise_Control+0xfc>)
 800199e:	6013      	str	r3, [r2, #0]
		Speed = Calculate_Speed(Safe_Distance, Current_Time);
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <Adaptive_Cruise_Control+0xfc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff feac 	bl	8001704 <Calculate_Speed>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <Adaptive_Cruise_Control+0x100>)
 80019b0:	6013      	str	r3, [r2, #0]
		move_forward(current_speed);
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <Adaptive_Cruise_Control+0x104>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe32 	bl	8001620 <move_forward>
		UART_SendString("Moving forward with speed: ");
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <Adaptive_Cruise_Control+0x108>)
 80019be:	f000 f8e3 	bl	8001b88 <UART_SendString>
		UART_SendFloat(Speed);
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <Adaptive_Cruise_Control+0x100>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f8fc 	bl	8001bc4 <UART_SendFloat>
		UART_SendString("\r\n");
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <Adaptive_Cruise_Control+0xec>)
 80019ce:	f000 f8db 	bl	8001b88 <UART_SendString>
}
 80019d2:	e7ff      	b.n	80019d4 <Adaptive_Cruise_Control+0xd4>
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	42200000 	.word	0x42200000
 80019e0:	41f00000 	.word	0x41f00000
 80019e4:	08009038 	.word	0x08009038
 80019e8:	44ffe000 	.word	0x44ffe000
 80019ec:	08008fa8 	.word	0x08008fa8
 80019f0:	41a00000 	.word	0x41a00000
 80019f4:	437a0000 	.word	0x437a0000
 80019f8:	08009004 	.word	0x08009004
 80019fc:	20000288 	.word	0x20000288
 8001a00:	2000028c 	.word	0x2000028c
 8001a04:	20000290 	.word	0x20000290
 8001a08:	08008f8c 	.word	0x08008f8c

08001a0c <BlindSpot_Detection>:

void BlindSpot_Detection(float BlindSpot_Right, float BlindSpot_Left){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
	//For blind spot detection
	if ((BlindSpot_Right > THRESHOLD_DISTANCE) && (BlindSpot_Right < SAFE_DISTANCE)){
 8001a16:	492a      	ldr	r1, [pc, #168]	; (8001ac0 <BlindSpot_Detection+0xb4>)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fb4f 	bl	80010bc <__aeabi_fcmpgt>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <BlindSpot_Detection+0x3a>
 8001a24:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <BlindSpot_Detection+0xb8>)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fb2a 	bl	8001080 <__aeabi_fcmplt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <BlindSpot_Detection+0x3a>
		Alarm_Subsystem(ALARM_MEDIUM_LEVEL);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f000 f852 	bl	8001adc <Alarm_Subsystem>
		UART_SendString("Take care of your right!! \r\n");
 8001a38:	4823      	ldr	r0, [pc, #140]	; (8001ac8 <BlindSpot_Detection+0xbc>)
 8001a3a:	f000 f8a5 	bl	8001b88 <UART_SendString>
		UART_SendString("Your blind spot is not safe\r\n");
 8001a3e:	4823      	ldr	r0, [pc, #140]	; (8001acc <BlindSpot_Detection+0xc0>)
 8001a40:	f000 f8a2 	bl	8001b88 <UART_SendString>
 8001a44:	e037      	b.n	8001ab6 <BlindSpot_Detection+0xaa>
	} else if ((BlindSpot_Left > THRESHOLD_DISTANCE) && (BlindSpot_Left < SAFE_DISTANCE)){
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <BlindSpot_Detection+0xb4>)
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f7ff fb37 	bl	80010bc <__aeabi_fcmpgt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <BlindSpot_Detection+0x6a>
 8001a54:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <BlindSpot_Detection+0xb8>)
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f7ff fb12 	bl	8001080 <__aeabi_fcmplt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <BlindSpot_Detection+0x6a>
		Alarm_Subsystem(ALARM_MEDIUM_LEVEL);
 8001a62:	2002      	movs	r0, #2
 8001a64:	f000 f83a 	bl	8001adc <Alarm_Subsystem>
		UART_SendString("Take care of your left!! \r\n");
 8001a68:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <BlindSpot_Detection+0xc4>)
 8001a6a:	f000 f88d 	bl	8001b88 <UART_SendString>
		UART_SendString("Your blind spot is not safe\r\n");
 8001a6e:	4817      	ldr	r0, [pc, #92]	; (8001acc <BlindSpot_Detection+0xc0>)
 8001a70:	f000 f88a 	bl	8001b88 <UART_SendString>
 8001a74:	e01f      	b.n	8001ab6 <BlindSpot_Detection+0xaa>
	} else if (BlindSpot_Right < THRESHOLD_DISTANCE){
 8001a76:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <BlindSpot_Detection+0xb4>)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fb01 	bl	8001080 <__aeabi_fcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <BlindSpot_Detection+0x86>
		Alarm_Subsystem(ALARM_HIGH_LEVEL);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f829 	bl	8001adc <Alarm_Subsystem>
		UART_SendString("Danger on your right!!!\r\n");
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <BlindSpot_Detection+0xc8>)
 8001a8c:	f000 f87c 	bl	8001b88 <UART_SendString>
		Alarm_Subsystem(ALARM_HIGH_LEVEL);
		UART_SendString("Danger on your left!!!\r\n");
	} else{
		Alarm_Subsystem(ALARM_LOW_LEVEL);
	}
}
 8001a90:	e011      	b.n	8001ab6 <BlindSpot_Detection+0xaa>
	} else if (BlindSpot_Left < THRESHOLD_DISTANCE){
 8001a92:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <BlindSpot_Detection+0xb4>)
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff faf3 	bl	8001080 <__aeabi_fcmplt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <BlindSpot_Detection+0xa2>
		Alarm_Subsystem(ALARM_HIGH_LEVEL);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f000 f81b 	bl	8001adc <Alarm_Subsystem>
		UART_SendString("Danger on your left!!!\r\n");
 8001aa6:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <BlindSpot_Detection+0xcc>)
 8001aa8:	f000 f86e 	bl	8001b88 <UART_SendString>
}
 8001aac:	e003      	b.n	8001ab6 <BlindSpot_Detection+0xaa>
		Alarm_Subsystem(ALARM_LOW_LEVEL);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 f814 	bl	8001adc <Alarm_Subsystem>
}
 8001ab4:	e7ff      	b.n	8001ab6 <BlindSpot_Detection+0xaa>
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	41a00000 	.word	0x41a00000
 8001ac4:	41f00000 	.word	0x41f00000
 8001ac8:	08009054 	.word	0x08009054
 8001acc:	08009074 	.word	0x08009074
 8001ad0:	08009094 	.word	0x08009094
 8001ad4:	080090b0 	.word	0x080090b0
 8001ad8:	080090cc 	.word	0x080090cc

08001adc <Alarm_Subsystem>:

void Alarm_Subsystem(uint8_t alarmLevel) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	if (ALARM_OFF == alarmLevel) {
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <Alarm_Subsystem+0x28>
		Buzzer_OFF();
 8001aec:	f003 fb9c 	bl	8005228 <Buzzer_OFF>
		LED_OFF(GREEN_LED);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f004 fb91 	bl	8006218 <LED_OFF>
		LED_OFF(YELLOW_LED);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f004 fb8e 	bl	8006218 <LED_OFF>
		LED_OFF(RED_LED);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f004 fb8b 	bl	8006218 <LED_OFF>
		LED_OFF(YELLOW_LED);
		LED_ON(RED_LED);
	} else{
		/* Nothing */
	}
}
 8001b02:	e02b      	b.n	8001b5c <Alarm_Subsystem+0x80>
	} else if (ALARM_LOW_LEVEL == alarmLevel) {
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10b      	bne.n	8001b22 <Alarm_Subsystem+0x46>
		Buzzer_OFF();
 8001b0a:	f003 fb8d 	bl	8005228 <Buzzer_OFF>
		LED_ON(GREEN_LED);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f004 fb44 	bl	800619c <LED_ON>
		LED_OFF(YELLOW_LED);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f004 fb7f 	bl	8006218 <LED_OFF>
		LED_OFF(RED_LED);
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f004 fb7c 	bl	8006218 <LED_OFF>
}
 8001b20:	e01c      	b.n	8001b5c <Alarm_Subsystem+0x80>
	} else if (ALARM_MEDIUM_LEVEL == alarmLevel) {
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d10b      	bne.n	8001b40 <Alarm_Subsystem+0x64>
		Buzzer_OFF();
 8001b28:	f003 fb7e 	bl	8005228 <Buzzer_OFF>
		LED_OFF(GREEN_LED);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f004 fb73 	bl	8006218 <LED_OFF>
		LED_ON(YELLOW_LED);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f004 fb32 	bl	800619c <LED_ON>
		LED_OFF(RED_LED);
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f004 fb6d 	bl	8006218 <LED_OFF>
}
 8001b3e:	e00d      	b.n	8001b5c <Alarm_Subsystem+0x80>
	} else if(ALARM_HIGH_LEVEL == alarmLevel){
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d10a      	bne.n	8001b5c <Alarm_Subsystem+0x80>
		Buzzer_ON();
 8001b46:	f003 fb63 	bl	8005210 <Buzzer_ON>
		LED_OFF(GREEN_LED);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f004 fb64 	bl	8006218 <LED_OFF>
		LED_OFF(YELLOW_LED);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f004 fb61 	bl	8006218 <LED_OFF>
		LED_ON(RED_LED);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f004 fb20 	bl	800619c <LED_ON>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <UART_Receiving_Init>:
/*------------------------- (Communication part start) ---------------------------------*/
/*
 * @Objective: Initiating receiving interrupt.
 *
 * */
void UART_Receiving_Init(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &RX_Data, 1) != HAL_OK) {
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4905      	ldr	r1, [pc, #20]	; (8001b80 <UART_Receiving_Init+0x1c>)
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <UART_Receiving_Init+0x20>)
 8001b6e:	f002 feea 	bl	8004946 <HAL_UART_Receive_IT>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <UART_Receiving_Init+0x18>
		  Error_Handler();
 8001b78:	f000 f8c8 	bl	8001d0c <Error_Handler>
	  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000286 	.word	0x20000286
 8001b84:	200002a0 	.word	0x200002a0

08001b88 <UART_SendString>:


//Function to send string over UART(Blocking mode)
void UART_SendString(char *string){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	uint16_t length = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 8001b94:	e002      	b.n	8001b9c <UART_SendString+0x14>
		length++;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f6      	bne.n	8001b96 <UART_SendString+0xe>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *)string, length, HAL_MAX_DELAY);
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <UART_SendString+0x38>)
 8001bb2:	f002 fe36 	bl	8004822 <HAL_UART_Transmit>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002a0 	.word	0x200002a0

08001bc4 <UART_SendFloat>:

//Function to send float over UART(Blocking mode)
void UART_SendFloat(float num){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    char buffer[20];               // Buffer to hold the string representation of the float
    sprintf(buffer, "%.2f", num);  // Convert float to string with 2 decimal places
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe fc2b 	bl	8000428 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	f107 000c 	add.w	r0, r7, #12
 8001bda:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <UART_SendFloat+0x30>)
 8001bdc:	f005 f866 	bl	8006cac <siprintf>
    UART_SendString(buffer);       // Send the string via UART
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ffcf 	bl	8001b88 <UART_SendString>
}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	080090e8 	.word	0x080090e8

08001bf8 <HAL_UART_RxCpltCallback>:

//Auto Called when receiving a new data over UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_UART_RxCpltCallback+0x100>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d171      	bne.n	8001cee <HAL_UART_RxCpltCallback+0xf6>
    	//new_data_flag = 1;
        HAL_UART_Receive_IT(&huart1, &RX_Data, 1);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	493b      	ldr	r1, [pc, #236]	; (8001cfc <HAL_UART_RxCpltCallback+0x104>)
 8001c0e:	483c      	ldr	r0, [pc, #240]	; (8001d00 <HAL_UART_RxCpltCallback+0x108>)
 8001c10:	f002 fe99 	bl	8004946 <HAL_UART_Receive_IT>
		switch (RX_Data) {
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_UART_RxCpltCallback+0x104>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3b42      	subs	r3, #66	; 0x42
 8001c1a:	2b17      	cmp	r3, #23
 8001c1c:	d866      	bhi.n	8001cec <HAL_UART_RxCpltCallback+0xf4>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_UART_RxCpltCallback+0x2c>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c8d 	.word	0x08001c8d
 8001c28:	08001ced 	.word	0x08001ced
 8001c2c:	08001cb5 	.word	0x08001cb5
 8001c30:	08001ced 	.word	0x08001ced
 8001c34:	08001c85 	.word	0x08001c85
 8001c38:	08001ced 	.word	0x08001ced
 8001c3c:	08001ced 	.word	0x08001ced
 8001c40:	08001ced 	.word	0x08001ced
 8001c44:	08001ced 	.word	0x08001ced
 8001c48:	08001ced 	.word	0x08001ced
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001ced 	.word	0x08001ced
 8001c54:	08001ced 	.word	0x08001ced
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001ced 	.word	0x08001ced
 8001c60:	08001cbd 	.word	0x08001cbd
 8001c64:	08001c95 	.word	0x08001c95
 8001c68:	08001ca5 	.word	0x08001ca5
 8001c6c:	08001ced 	.word	0x08001ced
 8001c70:	08001ce3 	.word	0x08001ce3
 8001c74:	08001ced 	.word	0x08001ced
 8001c78:	08001cc5 	.word	0x08001cc5
 8001c7c:	08001ccf 	.word	0x08001ccf
 8001c80:	08001cd9 	.word	0x08001cd9
			case FORWARD:
				current_state = Forward;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
				break;
 8001c8a:	e030      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case BACKWARD:
				current_state = Backward;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
				break;
 8001c92:	e02c      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case RIGHT:
				current_state = Right;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
				break;
 8001c9a:	e028      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case LEFT:
				current_state = Left;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	701a      	strb	r2, [r3, #0]
				break;
 8001ca2:	e024      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case STOP:
				current_state = Stop;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	701a      	strb	r2, [r3, #0]
				break;
 8001caa:	e020      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case OBSTACLE_AVOIDANCE:
				current_state = Obstacle_Avoidance;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	701a      	strb	r2, [r3, #0]
				break;
 8001cb2:	e01c      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case BLIND_SPOT_ADAPTIVE_CRUISE:
				current_state = BlindSpot_AdaptiveCruise;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_UART_RxCpltCallback+0x10c>)
 8001cb6:	2206      	movs	r2, #6
 8001cb8:	701a      	strb	r2, [r3, #0]
				break;
 8001cba:	e018      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case SPEED_LOW:
				current_speed = LOW_SPEED;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_UART_RxCpltCallback+0x110>)
 8001cbe:	22fa      	movs	r2, #250	; 0xfa
 8001cc0:	801a      	strh	r2, [r3, #0]
				break;
 8001cc2:	e014      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case SPEED1:
				current_speed = SPEED_1;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_UART_RxCpltCallback+0x110>)
 8001cc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001cca:	801a      	strh	r2, [r3, #0]
				break;
 8001ccc:	e00f      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case SPEED2:
				current_speed = SPEED_2;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_RxCpltCallback+0x110>)
 8001cd0:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001cd4:	801a      	strh	r2, [r3, #0]
				break;
 8001cd6:	e00a      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>
			case SPEED3:
				current_speed = SPEED_3;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_UART_RxCpltCallback+0x110>)
 8001cda:	f241 1211 	movw	r2, #4369	; 0x1111
 8001cde:	801a      	strh	r2, [r3, #0]
				break;
 8001ce0:	e005      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			case SPEED_HIGH:
				current_speed = MAX_SPEED;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_UART_RxCpltCallback+0x110>)
 8001ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce8:	801a      	strh	r2, [r3, #0]
				break;
 8001cea:	e000      	b.n	8001cee <HAL_UART_RxCpltCallback+0xf6>

			default:
				break;
 8001cec:	bf00      	nop
		}
    }
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	20000286 	.word	0x20000286
 8001d00:	200002a0 	.word	0x200002a0
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000290 	.word	0x20000290

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <Error_Handler+0x8>
	...

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x60>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_MspInit+0x60>)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc2:	f000 fa93 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 8001dc6:	f7ff fc09 	bl	80015dc <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM3_IRQHandler+0x10>)
 8001dd6:	f001 fd37 	bl	8003848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200001f4 	.word	0x200001f4

08001de4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM4_IRQHandler+0x10>)
 8001dea:	f001 fd2d 	bl	8003848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000023c 	.word	0x2000023c

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART1_IRQHandler+0x10>)
 8001dfe:	f002 fdd3 	bl	80049a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002a0 	.word	0x200002a0

08001e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <_kill>:

int _kill(int pid, int sig)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e24:	f004 fff8 	bl	8006e18 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2216      	movs	r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_exit>:

void _exit (int status)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e42:	f04f 31ff 	mov.w	r1, #4294967295
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffe7 	bl	8001e1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4c:	e7fe      	b.n	8001e4c <_exit+0x12>

08001e4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e00a      	b.n	8001e76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e60:	f3af 8000 	nop.w
 8001e64:	4601      	mov	r1, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbf0      	blt.n	8001e60 <_read+0x12>
  }

  return len;
 8001e7e:	687b      	ldr	r3, [r7, #4]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e009      	b.n	8001eae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf1      	blt.n	8001e9a <_write+0x12>
  }
  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_close>:

int _close(int file)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <_isatty>:

int _isatty(int file)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <_sbrk+0x5c>)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_sbrk+0x60>)
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_sbrk+0x64>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <_sbrk+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d207      	bcs.n	8001f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f50:	f004 ff62 	bl	8006e18 <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	220c      	movs	r2, #12
 8001f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e009      	b.n	8001f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <_sbrk+0x64>)
 8001f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20005000 	.word	0x20005000
 8001f80:	00000400 	.word	0x00000400
 8001f84:	2000029c 	.word	0x2000029c
 8001f88:	200004e8 	.word	0x200004e8

08001f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_Base_MspInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fd0:	e063      	b.n	800209a <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_TIM_Base_MspInit+0x110>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d12c      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Echo3_Pin|Echo4_Pin;
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4619      	mov	r1, r3
 800201e:	4823      	ldr	r0, [pc, #140]	; (80020ac <HAL_TIM_Base_MspInit+0x114>)
 8002020:	f000 fb62 	bl	80026e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	201d      	movs	r0, #29
 800202a:	f000 fa76 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800202e:	201d      	movs	r0, #29
 8002030:	f000 fa8f 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8002034:	e031      	b.n	800209a <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM4)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_TIM_Base_MspInit+0x118>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d12c      	bne.n	800209a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_TIM_Base_MspInit+0x10c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin|Echo5_Pin;
 8002070:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	4619      	mov	r1, r3
 8002084:	480b      	ldr	r0, [pc, #44]	; (80020b4 <HAL_TIM_Base_MspInit+0x11c>)
 8002086:	f000 fb2f 	bl	80026e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	201e      	movs	r0, #30
 8002090:	f000 fa43 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002094:	201e      	movs	r0, #30
 8002096:	f000 fa5c 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40010c00 	.word	0x40010c00

080020b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d117      	bne.n	8002108 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_TIM_MspPostInit+0x58>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_TIM_MspPostInit+0x58>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_TIM_MspPostInit+0x58>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = L298_ENA_Pin|L298_ENB_Pin;
 80020f0:	2306      	movs	r3, #6
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	4804      	ldr	r0, [pc, #16]	; (8002114 <HAL_TIM_MspPostInit+0x5c>)
 8002104:	f000 faf0 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40010800 	.word	0x40010800

08002118 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_USART1_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002124:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002150:	f002 fb1a 	bl	8004788 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f7ff fdd7 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002a0 	.word	0x200002a0
 8002168:	40013800 	.word	0x40013800

0800216c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_UART_MspInit+0x9c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d139      	bne.n	8002200 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_UART_MspInit+0xa0>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_UART_MspInit+0xa0>)
 8002192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0xa0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0xa0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_UART_MspInit+0xa0>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_UART_MspInit+0xa0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	4619      	mov	r1, r3
 80021d0:	480f      	ldr	r0, [pc, #60]	; (8002210 <HAL_UART_MspInit+0xa4>)
 80021d2:	f000 fa89 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4619      	mov	r1, r3
 80021ea:	4809      	ldr	r0, [pc, #36]	; (8002210 <HAL_UART_MspInit+0xa4>)
 80021ec:	f000 fa7c 	bl	80026e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2025      	movs	r0, #37	; 0x25
 80021f6:	f000 f990 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021fa:	2025      	movs	r0, #37	; 0x25
 80021fc:	f000 f9a9 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013800 	.word	0x40013800
 800220c:	40021000 	.word	0x40021000
 8002210:	40010800 	.word	0x40010800

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff fea7 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f004 fdf1 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7fe ffc7 	bl	80011d4 <main>
  bx lr
 8002246:	4770      	bx	lr
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002250:	08009534 	.word	0x08009534
  ldr r2, =_sbss
 8002254:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002258:	200004e8 	.word	0x200004e8

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x28>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x28>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f947 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fd4c 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f95f 	bl	800256e <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f000 f927 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000004 	.word	0x20000004
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	2000000c 	.word	0x2000000c
 800230c:	200002e4 	.word	0x200002e4

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	200002e4 	.word	0x200002e4

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fff0 	bl	8002310 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffe0 	bl	8002310 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4906      	ldr	r1, [pc, #24]	; (8002404 <__NVIC_EnableIRQ+0x34>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff90 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff2d 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff42 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff90 	bl	800245c <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5f 	bl	8002408 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff35 	bl	80023d0 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002598:	2b02      	cmp	r3, #2
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e020      	b.n	80025f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 020e 	bic.w	r2, r2, #14
 80025bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260e:	2b02      	cmp	r3, #2
 8002610:	d005      	beq.n	800261e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e051      	b.n	80026c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020e 	bic.w	r2, r2, #14
 800262c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_DMA_Abort_IT+0xd0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d029      	beq.n	800269c <HAL_DMA_Abort_IT+0xa0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <HAL_DMA_Abort_IT+0xd4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Abort_IT+0x9c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_DMA_Abort_IT+0xd8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01a      	beq.n	8002692 <HAL_DMA_Abort_IT+0x96>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_DMA_Abort_IT+0xdc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d012      	beq.n	800268c <HAL_DMA_Abort_IT+0x90>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_DMA_Abort_IT+0xe0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00a      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_DMA_Abort_IT+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d102      	bne.n	8002680 <HAL_DMA_Abort_IT+0x84>
 800267a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800267e:	e00e      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002684:	e00b      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268a:	e008      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	e005      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	e002      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002698:	2310      	movs	r3, #16
 800269a:	e000      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 800269c:	2301      	movs	r3, #1
 800269e:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_DMA_Abort_IT+0xe8>)
 80026a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
    } 
  }
  return status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020008 	.word	0x40020008
 80026d0:	4002001c 	.word	0x4002001c
 80026d4:	40020030 	.word	0x40020030
 80026d8:	40020044 	.word	0x40020044
 80026dc:	40020058 	.word	0x40020058
 80026e0:	4002006c 	.word	0x4002006c
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b08b      	sub	sp, #44	; 0x2c
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fa:	e169      	b.n	80029d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026fc:	2201      	movs	r2, #1
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8158 	bne.w	80029ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a9a      	ldr	r2, [pc, #616]	; (8002988 <HAL_GPIO_Init+0x2a0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d05e      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002724:	4a98      	ldr	r2, [pc, #608]	; (8002988 <HAL_GPIO_Init+0x2a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d875      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800272a:	4a98      	ldr	r2, [pc, #608]	; (800298c <HAL_GPIO_Init+0x2a4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d058      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002730:	4a96      	ldr	r2, [pc, #600]	; (800298c <HAL_GPIO_Init+0x2a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d86f      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002736:	4a96      	ldr	r2, [pc, #600]	; (8002990 <HAL_GPIO_Init+0x2a8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d052      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 800273c:	4a94      	ldr	r2, [pc, #592]	; (8002990 <HAL_GPIO_Init+0x2a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d869      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002742:	4a94      	ldr	r2, [pc, #592]	; (8002994 <HAL_GPIO_Init+0x2ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d04c      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002748:	4a92      	ldr	r2, [pc, #584]	; (8002994 <HAL_GPIO_Init+0x2ac>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d863      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800274e:	4a92      	ldr	r2, [pc, #584]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d046      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002754:	4a90      	ldr	r2, [pc, #576]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d85d      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800275a:	2b12      	cmp	r3, #18
 800275c:	d82a      	bhi.n	80027b4 <HAL_GPIO_Init+0xcc>
 800275e:	2b12      	cmp	r3, #18
 8002760:	d859      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_GPIO_Init+0x80>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	080027e3 	.word	0x080027e3
 800276c:	080027bd 	.word	0x080027bd
 8002770:	080027cf 	.word	0x080027cf
 8002774:	08002811 	.word	0x08002811
 8002778:	08002817 	.word	0x08002817
 800277c:	08002817 	.word	0x08002817
 8002780:	08002817 	.word	0x08002817
 8002784:	08002817 	.word	0x08002817
 8002788:	08002817 	.word	0x08002817
 800278c:	08002817 	.word	0x08002817
 8002790:	08002817 	.word	0x08002817
 8002794:	08002817 	.word	0x08002817
 8002798:	08002817 	.word	0x08002817
 800279c:	08002817 	.word	0x08002817
 80027a0:	08002817 	.word	0x08002817
 80027a4:	08002817 	.word	0x08002817
 80027a8:	08002817 	.word	0x08002817
 80027ac:	080027c5 	.word	0x080027c5
 80027b0:	080027d9 	.word	0x080027d9
 80027b4:	4a79      	ldr	r2, [pc, #484]	; (800299c <HAL_GPIO_Init+0x2b4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ba:	e02c      	b.n	8002816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	623b      	str	r3, [r7, #32]
          break;
 80027c2:	e029      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	3304      	adds	r3, #4
 80027ca:	623b      	str	r3, [r7, #32]
          break;
 80027cc:	e024      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	3308      	adds	r3, #8
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e01f      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	330c      	adds	r3, #12
 80027de:	623b      	str	r3, [r7, #32]
          break;
 80027e0:	e01a      	b.n	8002818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ea:	2304      	movs	r3, #4
 80027ec:	623b      	str	r3, [r7, #32]
          break;
 80027ee:	e013      	b.n	8002818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f8:	2308      	movs	r3, #8
 80027fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	611a      	str	r2, [r3, #16]
          break;
 8002802:	e009      	b.n	8002818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002804:	2308      	movs	r3, #8
 8002806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	615a      	str	r2, [r3, #20]
          break;
 800280e:	e003      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
          break;
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x130>
          break;
 8002816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d801      	bhi.n	8002822 <HAL_GPIO_Init+0x13a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	e001      	b.n	8002826 <HAL_GPIO_Init+0x13e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d802      	bhi.n	8002834 <HAL_GPIO_Init+0x14c>
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_Init+0x152>
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3b08      	subs	r3, #8
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	210f      	movs	r1, #15
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	401a      	ands	r2, r3
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80b1 	beq.w	80029ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002868:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_GPIO_Init+0x2b8>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a4c      	ldr	r2, [pc, #304]	; (80029a0 <HAL_GPIO_Init+0x2b8>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_GPIO_Init+0x2b8>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002880:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x2bc>)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HAL_GPIO_Init+0x2c0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_GPIO_Init+0x1ec>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <HAL_GPIO_Init+0x2c4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_Init+0x1e8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3e      	ldr	r2, [pc, #248]	; (80029b0 <HAL_GPIO_Init+0x2c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x1e4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3d      	ldr	r2, [pc, #244]	; (80029b4 <HAL_GPIO_Init+0x2cc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_Init+0x1e0>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e004      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028d4:	2300      	movs	r3, #0
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e6:	492f      	ldr	r1, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x2bc>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	492c      	ldr	r1, [pc, #176]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	4928      	ldr	r1, [pc, #160]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	491e      	ldr	r1, [pc, #120]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002940:	4013      	ands	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	4918      	ldr	r1, [pc, #96]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4914      	ldr	r1, [pc, #80]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002968:	4013      	ands	r3, r2
 800296a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e021      	b.n	80029ca <HAL_GPIO_Init+0x2e2>
 8002986:	bf00      	nop
 8002988:	10320000 	.word	0x10320000
 800298c:	10310000 	.word	0x10310000
 8002990:	10220000 	.word	0x10220000
 8002994:	10210000 	.word	0x10210000
 8002998:	10120000 	.word	0x10120000
 800299c:	10110000 	.word	0x10110000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40010800 	.word	0x40010800
 80029ac:	40010c00 	.word	0x40010c00
 80029b0:	40011000 	.word	0x40011000
 80029b4:	40011400 	.word	0x40011400
 80029b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_GPIO_Init+0x304>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	4909      	ldr	r1, [pc, #36]	; (80029ec <HAL_GPIO_Init+0x304>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f47f ae8e 	bne.w	80026fc <HAL_GPIO_Init+0x14>
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	372c      	adds	r7, #44	; 0x2c
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a00:	787b      	ldrb	r3, [r7, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a0c:	e003      	b.n	8002a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e272      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a4c:	4b8f      	ldr	r3, [pc, #572]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5e>
 8002a58:	4b8c      	ldr	r3, [pc, #560]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a66:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x12c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d168      	bne.n	8002b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e24c      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x76>
 8002a88:	4b80      	ldr	r3, [pc, #512]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a7f      	ldr	r2, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b7b      	ldr	r3, [pc, #492]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7a      	ldr	r2, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a77      	ldr	r2, [pc, #476]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0xbc>
 8002ac2:	4b72      	ldr	r3, [pc, #456]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a71      	ldr	r2, [pc, #452]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6e      	ldr	r2, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002adc:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a67      	ldr	r2, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff fc08 	bl	8002310 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff fc04 	bl	8002310 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e200      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe4>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fbf4 	bl	8002310 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fbf0 	bl	8002310 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1ec      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x10c>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b66:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x18c>
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x176>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1c0      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4939      	ldr	r1, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7ff fba9 	bl	8002310 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7ff fba5 	bl	8002310 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1a1      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4927      	ldr	r1, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff fb88 	bl	8002310 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7ff fb84 	bl	8002310 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e180      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d03a      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d019      	beq.n	8002c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fb68 	bl	8002310 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7ff fb64 	bl	8002310 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e160      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f000 fad8 	bl	8003218 <RCC_Delay>
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c70:	f7ff fb4e 	bl	8002310 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c78:	f7ff fb4a 	bl	8002310 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e146      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	42420000 	.word	0x42420000
 8002c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e9      	bne.n	8002c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a6 	beq.w	8002dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff fb0b 	bl	8002310 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7ff fb07 	bl	8002310 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e103      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x312>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	e02d      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x334>
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	e01c      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x356>
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a60      	ldr	r2, [pc, #384]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d015      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7ff fabb 	bl	8002310 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7ff fab7 	bl	8002310 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0b1      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ee      	beq.n	8002d9e <HAL_RCC_OscConfig+0x37e>
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7ff faa5 	bl	8002310 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7ff faa1 	bl	8002310 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e09b      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d061      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d146      	bne.n	8002eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fa75 	bl	8002310 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7ff fa71 	bl	8002310 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e06d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4921      	ldr	r1, [pc, #132]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a19      	ldr	r1, [r3, #32]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	430b      	orrs	r3, r1
 8002e76:	491b      	ldr	r1, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff fa45 	bl	8002310 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7ff fa41 	bl	8002310 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x46a>
 8002ea8:	e035      	b.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fa2e 	bl	8002310 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff fa2a 	bl	8002310 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e026      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x498>
 8002ed6:	e01e      	b.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e019      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x500>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d0      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4965      	ldr	r1, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d040      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d115      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e073      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06b      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4936      	ldr	r1, [pc, #216]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7ff f97c 	bl	8002310 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7ff f978 	bl	8002310 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e053      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d210      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4922      	ldr	r1, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f821 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1cc>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f8da 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08009100 	.word	0x08009100
 80030f0:	20000004 	.word	0x20000004
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b490      	push	{r4, r7}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003100:	1d3c      	adds	r4, r7, #4
 8003102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003108:	f240 2301 	movw	r3, #513	; 0x201
 800310c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x40>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x46>
 8003136:	e02b      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800313a:	623b      	str	r3, [r7, #32]
      break;
 800313c:	e02b      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3328      	adds	r3, #40	; 0x28
 8003148:	443b      	add	r3, r7
 800314a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800314e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0c5b      	lsrs	r3, r3, #17
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	3328      	adds	r3, #40	; 0x28
 8003166:	443b      	add	r3, r7
 8003168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800316c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003172:	fb03 f202 	mul.w	r2, r3, r2
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e004      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	623b      	str	r3, [r7, #32]
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003192:	623b      	str	r3, [r7, #32]
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	6a3b      	ldr	r3, [r7, #32]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	; 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc90      	pop	{r4, r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	080090f0 	.word	0x080090f0
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff2 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08009110 	.word	0x08009110

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08009110 	.word	0x08009110

08003218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <RCC_Delay+0x34>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <RCC_Delay+0x38>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a5b      	lsrs	r3, r3, #9
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003234:	bf00      	nop
  }
  while (Delay --);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <RCC_Delay+0x1c>
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	20000004 	.word	0x20000004
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e041      	b.n	80032ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fe8c 	bl	8001f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fe56 	bl	8003f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e03a      	b.n	8003382 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIM_Base_Start_IT+0x98>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d009      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_TIM_Base_Start_IT+0x9c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIM_Base_Start_IT+0xa0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d111      	bne.n	8003370 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d010      	beq.n	8003380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	e007      	b.n	8003380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e041      	b.n	800342e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f839 	bl	8003436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 fdb4 	bl	8003f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x24>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e022      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d109      	bne.n	8003486 <HAL_TIM_PWM_Start+0x3e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e015      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d109      	bne.n	80034a0 <HAL_TIM_PWM_Start+0x58>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e008      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e05e      	b.n	8003578 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_TIM_PWM_Start+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0x92>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f8af 	bl	800465e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_TIM_PWM_Start+0x138>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d107      	bne.n	800351a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_PWM_Start+0x138>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d009      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_PWM_Start+0x13c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_TIM_PWM_Start+0x140>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d111      	bne.n	8003566 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d010      	beq.n	8003576 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	e007      	b.n	8003576 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fcba 	bl	8003f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_IC_Start_IT+0x1a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	e013      	b.n	800367e <HAL_TIM_IC_Start_IT+0x42>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d104      	bne.n	8003666 <HAL_TIM_IC_Start_IT+0x2a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e00b      	b.n	800367e <HAL_TIM_IC_Start_IT+0x42>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d104      	bne.n	8003676 <HAL_TIM_IC_Start_IT+0x3a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	b2db      	uxtb	r3, r3
 8003674:	e003      	b.n	800367e <HAL_TIM_IC_Start_IT+0x42>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_TIM_IC_Start_IT+0x54>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e013      	b.n	80036b8 <HAL_TIM_IC_Start_IT+0x7c>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d104      	bne.n	80036a0 <HAL_TIM_IC_Start_IT+0x64>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e00b      	b.n	80036b8 <HAL_TIM_IC_Start_IT+0x7c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d104      	bne.n	80036b0 <HAL_TIM_IC_Start_IT+0x74>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e003      	b.n	80036b8 <HAL_TIM_IC_Start_IT+0x7c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c0:	7bbb      	ldrb	r3, [r7, #14]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d001      	beq.n	80036ca <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0b3      	b.n	8003832 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <HAL_TIM_IC_Start_IT+0x9e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d8:	e013      	b.n	8003702 <HAL_TIM_IC_Start_IT+0xc6>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d104      	bne.n	80036ea <HAL_TIM_IC_Start_IT+0xae>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_IC_Start_IT+0xc6>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_IC_Start_IT+0xbe>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f8:	e003      	b.n	8003702 <HAL_TIM_IC_Start_IT+0xc6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_TIM_IC_Start_IT+0xd6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	e013      	b.n	800373a <HAL_TIM_IC_Start_IT+0xfe>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d104      	bne.n	8003722 <HAL_TIM_IC_Start_IT+0xe6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003720:	e00b      	b.n	800373a <HAL_TIM_IC_Start_IT+0xfe>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d104      	bne.n	8003732 <HAL_TIM_IC_Start_IT+0xf6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003730:	e003      	b.n	800373a <HAL_TIM_IC_Start_IT+0xfe>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d841      	bhi.n	80037c4 <HAL_TIM_IC_Start_IT+0x188>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_TIM_IC_Start_IT+0x10c>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800377d 	.word	0x0800377d
 800374c:	080037c5 	.word	0x080037c5
 8003750:	080037c5 	.word	0x080037c5
 8003754:	080037c5 	.word	0x080037c5
 8003758:	0800378f 	.word	0x0800378f
 800375c:	080037c5 	.word	0x080037c5
 8003760:	080037c5 	.word	0x080037c5
 8003764:	080037c5 	.word	0x080037c5
 8003768:	080037a1 	.word	0x080037a1
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037c5 	.word	0x080037c5
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037b3 	.word	0x080037b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0202 	orr.w	r2, r2, #2
 800378a:	60da      	str	r2, [r3, #12]
      break;
 800378c:	e01b      	b.n	80037c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0204 	orr.w	r2, r2, #4
 800379c:	60da      	str	r2, [r3, #12]
      break;
 800379e:	e012      	b.n	80037c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	60da      	str	r2, [r3, #12]
      break;
 80037b0:	e009      	b.n	80037c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0210 	orr.w	r2, r2, #16
 80037c0:	60da      	str	r2, [r3, #12]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80037c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 ff45 	bl	800465e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_TIM_IC_Start_IT+0x200>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_TIM_IC_Start_IT+0x1c0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d009      	beq.n	80037fc <HAL_TIM_IC_Start_IT+0x1c0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <HAL_TIM_IC_Start_IT+0x204>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_IC_Start_IT+0x1c0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_TIM_IC_Start_IT+0x208>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d010      	beq.n	8003830 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	e007      	b.n	8003830 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800

08003848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0202 	mvn.w	r2, #2
 8003874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fe90 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fb3a 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fb40 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0204 	mvn.w	r2, #4
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fe66 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fb10 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fb16 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b08      	cmp	r3, #8
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0208 	mvn.w	r2, #8
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2204      	movs	r2, #4
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fe3c 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fae6 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 faec 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b10      	cmp	r3, #16
 8003958:	d122      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b10      	cmp	r3, #16
 8003966:	d11b      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0210 	mvn.w	r2, #16
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2208      	movs	r2, #8
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fe12 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fabc 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fac2 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fdfd 	bl	80015c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b80      	cmp	r3, #128	; 0x80
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 febf 	bl	8004776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa86 	bl	8003f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0220 	mvn.w	r2, #32
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fe8a 	bl	8004764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e082      	b.n	8003b78 <HAL_TIM_IC_ConfigChannel+0x120>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f000 fc42 	bl	8004318 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020c 	bic.w	r2, r2, #12
 8003aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	e05a      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d11c      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f000 fcab 	bl	8004428 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ae0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	e03a      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f000 fcf6 	bl	80044fe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020c 	bic.w	r2, r2, #12
 8003b20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	e01b      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f000 fd15 	bl	8004574 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	021a      	lsls	r2, r3, #8
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ac      	b.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	f200 809f 	bhi.w	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003ce9 	.word	0x08003ce9
 8003bb8:	08003ce9 	.word	0x08003ce9
 8003bbc:	08003ce9 	.word	0x08003ce9
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003ce9 	.word	0x08003ce9
 8003bc8:	08003ce9 	.word	0x08003ce9
 8003bcc:	08003ce9 	.word	0x08003ce9
 8003bd0:	08003c67 	.word	0x08003c67
 8003bd4:	08003ce9 	.word	0x08003ce9
 8003bd8:	08003ce9 	.word	0x08003ce9
 8003bdc:	08003ce9 	.word	0x08003ce9
 8003be0:	08003ca7 	.word	0x08003ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fa0c 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6999      	ldr	r1, [r3, #24]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	619a      	str	r2, [r3, #24]
      break;
 8003c22:	e062      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa52 	bl	80040d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      break;
 8003c64:	e041      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fa9b 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0208 	orr.w	r2, r2, #8
 8003c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0204 	bic.w	r2, r2, #4
 8003c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69d9      	ldr	r1, [r3, #28]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
      break;
 8003ca4:	e021      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fae5 	bl	800427c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	021a      	lsls	r2, r3, #8
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0b3      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x180>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4c:	d03e      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0xd0>
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d52:	f200 8087 	bhi.w	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	f000 8085 	beq.w	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d87f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d01a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xa2>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d87b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d050      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x116>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d877      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d74:	2b50      	cmp	r3, #80	; 0x50
 8003d76:	d03c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xf6>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d873      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d058      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x136>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d86f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d84:	2b30      	cmp	r3, #48	; 0x30
 8003d86:	d064      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x156>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d86b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d060      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x156>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d867      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05c      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x156>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d05a      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d9c:	e062      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f000 fc37 	bl	8004620 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	609a      	str	r2, [r3, #8]
      break;
 8003dca:	e04e      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6899      	ldr	r1, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f000 fc20 	bl	8004620 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dee:	609a      	str	r2, [r3, #8]
      break;
 8003df0:	e03b      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 fae4 	bl	80043cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2150      	movs	r1, #80	; 0x50
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fbee 	bl	80045ec <TIM_ITRx_SetConfig>
      break;
 8003e10:	e02b      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f000 fb3e 	bl	80044a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2160      	movs	r1, #96	; 0x60
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fbde 	bl	80045ec <TIM_ITRx_SetConfig>
      break;
 8003e30:	e01b      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 fac4 	bl	80043cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2140      	movs	r1, #64	; 0x40
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fbce 	bl	80045ec <TIM_ITRx_SetConfig>
      break;
 8003e50:	e00b      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fbc5 	bl	80045ec <TIM_ITRx_SetConfig>
        break;
 8003e62:	e002      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d831      	bhi.n	8003efc <HAL_TIM_ReadCapturedValue+0x78>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003efd 	.word	0x08003efd
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	08003edf 	.word	0x08003edf
 8003eb4:	08003efd 	.word	0x08003efd
 8003eb8:	08003efd 	.word	0x08003efd
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003efd 	.word	0x08003efd
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003ef3 	.word	0x08003ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	60fb      	str	r3, [r7, #12]

      break;
 8003edc:	e00f      	b.n	8003efe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	60fb      	str	r3, [r7, #12]

      break;
 8003ee6:	e00a      	b.n	8003efe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	60fb      	str	r3, [r7, #12]

      break;
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	60fb      	str	r3, [r7, #12]

      break;
 8003efa:	e000      	b.n	8003efe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003efc:	bf00      	nop
  }

  return tmpreg;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop

08003f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
	...

08003f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <TIM_Base_SetConfig+0xb8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_Base_SetConfig+0x30>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f62:	d007      	beq.n	8003f74 <TIM_Base_SetConfig+0x30>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a26      	ldr	r2, [pc, #152]	; (8004000 <TIM_Base_SetConfig+0xbc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0x30>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_Base_SetConfig+0xc0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <TIM_Base_SetConfig+0xb8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <TIM_Base_SetConfig+0x62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d007      	beq.n	8003fa6 <TIM_Base_SetConfig+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <TIM_Base_SetConfig+0xbc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_Base_SetConfig+0x62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <TIM_Base_SetConfig+0xc0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <TIM_Base_SetConfig+0xb8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10c      	bne.n	800407e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0308 	bic.w	r3, r3, #8
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00

080040d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <TIM_OC2_SetConfig+0xd0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10d      	bne.n	8004150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <TIM_OC2_SetConfig+0xd0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d113      	bne.n	8004180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <TIM_OC3_SetConfig+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800420c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00

0800427c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <TIM_OC4_SetConfig+0x98>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00

08004318 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <TIM_TI1_SetConfig+0xa8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_TI1_SetConfig+0x46>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <TIM_TI1_SetConfig+0x46>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <TIM_TI1_SetConfig+0xac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_TI1_SetConfig+0x46>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <TIM_TI1_SetConfig+0xb0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <TIM_TI1_SetConfig+0x4a>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <TIM_TI1_SetConfig+0x4c>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e003      	b.n	8004382 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	b2db      	uxtb	r3, r3
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f023 030a 	bic.w	r3, r3, #10
 800439c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 030a 	and.w	r3, r3, #10
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800

080043cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 030a 	bic.w	r3, r3, #10
 8004408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0210 	bic.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	b29b      	uxth	r3, r3
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 0210 	bic.w	r2, r3, #16
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	031b      	lsls	r3, r3, #12
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	b2db      	uxtb	r3, r3
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800454e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	031b      	lsls	r3, r3, #12
 80045cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	f043 0307 	orr.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	609a      	str	r2, [r3, #8]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	431a      	orrs	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	43db      	mvns	r3, r3
 8004680:	401a      	ands	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	fa01 f303 	lsl.w	r3, r1, r3
 8004696:	431a      	orrs	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	621a      	str	r2, [r3, #32]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e046      	b.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d009      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10c      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800

08004764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e03f      	b.n	800481a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fcdc 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fc85 	bl	80050dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08a      	sub	sp, #40	; 0x28
 8004826:	af02      	add	r7, sp, #8
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d17c      	bne.n	800493c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_UART_Transmit+0x2c>
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e075      	b.n	800493e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit+0x3e>
 800485c:	2302      	movs	r3, #2
 800485e:	e06e      	b.n	800493e <HAL_UART_Transmit+0x11c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2221      	movs	r2, #33	; 0x21
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004876:	f7fd fd4b 	bl	8002310 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d108      	bne.n	80048a4 <HAL_UART_Transmit+0x82>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e003      	b.n	80048ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048b4:	e02a      	b.n	800490c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa38 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e036      	b.n	800493e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3302      	adds	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e007      	b.n	80048fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1cf      	bne.n	80048b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fa08 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e006      	b.n	800493e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	d11d      	bne.n	800499c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_UART_Receive_IT+0x26>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e016      	b.n	800499e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_UART_Receive_IT+0x38>
 800497a:	2302      	movs	r3, #2
 800497c:	e00f      	b.n	800499e <HAL_UART_Receive_IT+0x58>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	461a      	mov	r2, r3
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa19 	bl	8004dca <UART_Start_Receive_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	e000      	b.n	800499e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_UART_IRQHandler+0x52>
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fac9 	bl	8004f8a <UART_Receive_IT>
      return;
 80049f8:	e17b      	b.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80b1 	beq.w	8004b64 <HAL_UART_IRQHandler+0x1bc>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_UART_IRQHandler+0x70>
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a6 	beq.w	8004b64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_UART_IRQHandler+0x90>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_UART_IRQHandler+0xb0>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0202 	orr.w	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_UART_IRQHandler+0xd0>
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f043 0204 	orr.w	r2, r3, #4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00f      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xfa>
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_UART_IRQHandler+0xee>
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0208 	orr.w	r2, r3, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 811e 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x11e>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa62 	bl	8004f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_UART_IRQHandler+0x146>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d031      	beq.n	8004b52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9a4 	bl	8004e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d023      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	4a76      	ldr	r2, [pc, #472]	; (8004cf8 <HAL_UART_IRQHandler+0x350>)
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fd68 	bl	80025fc <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	e00e      	b.n	8004b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8e3 	bl	8004d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e00a      	b.n	8004b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8df 	bl	8004d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e006      	b.n	8004b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8db 	bl	8004d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b5e:	e0c3      	b.n	8004ce8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	bf00      	nop
    return;
 8004b62:	e0c1      	b.n	8004ce8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 80a1 	bne.w	8004cb0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 809b 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8095 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04e      	beq.n	8004c48 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004bb4:	8a3b      	ldrh	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8098 	beq.w	8004cec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc0:	8a3a      	ldrh	r2, [r7, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	f080 8092 	bcs.w	8004cec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8a3a      	ldrh	r2, [r7, #16]
 8004bcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d02b      	beq.n	8004c30 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c06:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0210 	bic.w	r2, r2, #16
 8004c24:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fcab 	bl	8002586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f86d 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c46:	e051      	b.n	8004cec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d047      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004c60:	8a7b      	ldrh	r3, [r7, #18]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d044      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0210 	bic.w	r2, r2, #16
 8004ca2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ca4:	8a7b      	ldrh	r3, [r7, #18]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f839 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cae:	e01f      	b.n	8004cf0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_UART_IRQHandler+0x324>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8f9 	bl	8004ebc <UART_Transmit_IT>
    return;
 8004cca:	e012      	b.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f93a 	bl	8004f5a <UART_EndTransmit_IT>
    return;
 8004ce6:	e004      	b.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004ce8:	bf00      	nop
 8004cea:	e002      	b.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004cf0:	bf00      	nop
  }
}
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08004e95 	.word	0x08004e95

08004cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	e02c      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d028      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d56:	f7fd fadb 	bl	8002310 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d21d      	bcs.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0c3      	beq.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2222      	movs	r2, #34	; 0x22
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0220 	orr.w	r2, r2, #32
 8004e2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0210 	bic.w	r2, r2, #16
 8004e7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ff2d 	bl	8004d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d13e      	bne.n	8004f4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d114      	bne.n	8004f04 <UART_Transmit_IT+0x48>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d110      	bne.n	8004f04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]
 8004f02:	e008      	b.n	8004f16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6211      	str	r1, [r2, #32]
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff febe 	bl	8004cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b22      	cmp	r3, #34	; 0x22
 8004f9c:	f040 8099 	bne.w	80050d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa8:	d117      	bne.n	8004fda <UART_Receive_IT+0x50>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd8:	e026      	b.n	8005028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d007      	beq.n	8004ffe <UART_Receive_IT+0x74>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <UART_Receive_IT+0x82>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e008      	b.n	800501e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005018:	b2da      	uxtb	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4619      	mov	r1, r3
 8005036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005038:	2b00      	cmp	r3, #0
 800503a:	d148      	bne.n	80050ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0220 	bic.w	r2, r2, #32
 800504a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800505a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0210 	bic.w	r2, r2, #16
 8005090:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d10a      	bne.n	80050b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fe2f 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
 80050c2:	e002      	b.n	80050ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fc fd97 	bl	8001bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e002      	b.n	80050d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005116:	f023 030c 	bic.w	r3, r3, #12
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	430b      	orrs	r3, r1
 8005122:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <UART_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d103      	bne.n	800514c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005144:	f7fe f854 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	e002      	b.n	8005152 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe f83c 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8005150:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009a      	lsls	r2, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <UART_SetConfig+0x118>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	0119      	lsls	r1, r3, #4
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009a      	lsls	r2, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	fbb2 f2f3 	udiv	r2, r2, r3
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <UART_SetConfig+0x118>)
 800518a:	fba3 0302 	umull	r0, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2064      	movs	r0, #100	; 0x64
 8005192:	fb00 f303 	mul.w	r3, r0, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <UART_SetConfig+0x118>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	4419      	add	r1, r3
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <UART_SetConfig+0x118>)
 80051c2:	fba3 0302 	umull	r0, r3, r3, r2
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2064      	movs	r0, #100	; 0x64
 80051ca:	fb00 f303 	mul.w	r3, r0, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	3332      	adds	r3, #50	; 0x32
 80051d4:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <UART_SetConfig+0x118>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 020f 	and.w	r2, r3, #15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	440a      	add	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40013800 	.word	0x40013800
 80051f4:	51eb851f 	.word	0x51eb851f

080051f8 <Buzzer_Init>:
 *      Author: Abdallah Alnemr
 */

#include "../Inc/Buzzer.h"

void Buzzer_Init(void){
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80051fc:	2200      	movs	r2, #0
 80051fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005202:	4802      	ldr	r0, [pc, #8]	; (800520c <Buzzer_Init+0x14>)
 8005204:	f7fd fbf4 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8005208:	bf00      	nop
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40010c00 	.word	0x40010c00

08005210 <Buzzer_ON>:

void Buzzer_ON(void){
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8005214:	2201      	movs	r2, #1
 8005216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800521a:	4802      	ldr	r0, [pc, #8]	; (8005224 <Buzzer_ON+0x14>)
 800521c:	f7fd fbe8 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8005220:	bf00      	nop
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40010c00 	.word	0x40010c00

08005228 <Buzzer_OFF>:

void Buzzer_OFF(void){
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005232:	4802      	ldr	r0, [pc, #8]	; (800523c <Buzzer_OFF+0x14>)
 8005234:	f7fd fbdc 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40010c00 	.word	0x40010c00

08005240 <DC_MOTOR_Init>:
#include "../Inc/DC_MOTOR.h"
#include "../Inc/DC_MOTOR_cfg.h"
#include "../../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ac      	sub	sp, #176	; 0xb0
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005258:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005266:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8005270:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	611a      	str	r2, [r3, #16]
 8005280:	615a      	str	r2, [r3, #20]
 8005282:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t ARR_Value = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint8_t i = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	4ab2      	ldr	r2, [pc, #712]	; (8005564 <DC_MOTOR_Init+0x324>)
 800529a:	015b      	lsls	r3, r3, #5
 800529c:	4413      	add	r3, r2
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4ab1      	ldr	r2, [pc, #708]	; (8005568 <DC_MOTOR_Init+0x328>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d008      	beq.n	80052b8 <DC_MOTOR_Init+0x78>
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	4aae      	ldr	r2, [pc, #696]	; (8005564 <DC_MOTOR_Init+0x324>)
 80052aa:	015b      	lsls	r3, r3, #5
 80052ac:	4413      	add	r3, r2
 80052ae:	3304      	adds	r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4aad      	ldr	r2, [pc, #692]	; (8005568 <DC_MOTOR_Init+0x328>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d10c      	bne.n	80052d2 <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80052b8:	4bac      	ldr	r3, [pc, #688]	; (800556c <DC_MOTOR_Init+0x32c>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	4aab      	ldr	r2, [pc, #684]	; (800556c <DC_MOTOR_Init+0x32c>)
 80052be:	f043 0304 	orr.w	r3, r3, #4
 80052c2:	6193      	str	r3, [r2, #24]
 80052c4:	4ba9      	ldr	r3, [pc, #676]	; (800556c <DC_MOTOR_Init+0x32c>)
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e058      	b.n	8005384 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	4aa3      	ldr	r2, [pc, #652]	; (8005564 <DC_MOTOR_Init+0x324>)
 80052d6:	015b      	lsls	r3, r3, #5
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4aa4      	ldr	r2, [pc, #656]	; (8005570 <DC_MOTOR_Init+0x330>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d008      	beq.n	80052f4 <DC_MOTOR_Init+0xb4>
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	4a9f      	ldr	r2, [pc, #636]	; (8005564 <DC_MOTOR_Init+0x324>)
 80052e6:	015b      	lsls	r3, r3, #5
 80052e8:	4413      	add	r3, r2
 80052ea:	3304      	adds	r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4aa0      	ldr	r2, [pc, #640]	; (8005570 <DC_MOTOR_Init+0x330>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10c      	bne.n	800530e <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80052f4:	4b9d      	ldr	r3, [pc, #628]	; (800556c <DC_MOTOR_Init+0x32c>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	4a9c      	ldr	r2, [pc, #624]	; (800556c <DC_MOTOR_Init+0x32c>)
 80052fa:	f043 0308 	orr.w	r3, r3, #8
 80052fe:	6193      	str	r3, [r2, #24]
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <DC_MOTOR_Init+0x32c>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	e03a      	b.n	8005384 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	4a94      	ldr	r2, [pc, #592]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005312:	015b      	lsls	r3, r3, #5
 8005314:	4413      	add	r3, r2
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a96      	ldr	r2, [pc, #600]	; (8005574 <DC_MOTOR_Init+0x334>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d008      	beq.n	8005330 <DC_MOTOR_Init+0xf0>
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	4a90      	ldr	r2, [pc, #576]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005322:	015b      	lsls	r3, r3, #5
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a92      	ldr	r2, [pc, #584]	; (8005574 <DC_MOTOR_Init+0x334>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10c      	bne.n	800534a <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8005330:	4b8e      	ldr	r3, [pc, #568]	; (800556c <DC_MOTOR_Init+0x32c>)
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	4a8d      	ldr	r2, [pc, #564]	; (800556c <DC_MOTOR_Init+0x32c>)
 8005336:	f043 0310 	orr.w	r3, r3, #16
 800533a:	6193      	str	r3, [r2, #24]
 800533c:	4b8b      	ldr	r3, [pc, #556]	; (800556c <DC_MOTOR_Init+0x32c>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	e01c      	b.n	8005384 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	4a85      	ldr	r2, [pc, #532]	; (8005564 <DC_MOTOR_Init+0x324>)
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	4413      	add	r3, r2
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a88      	ldr	r2, [pc, #544]	; (8005578 <DC_MOTOR_Init+0x338>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d008      	beq.n	800536c <DC_MOTOR_Init+0x12c>
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	4a81      	ldr	r2, [pc, #516]	; (8005564 <DC_MOTOR_Init+0x324>)
 800535e:	015b      	lsls	r3, r3, #5
 8005360:	4413      	add	r3, r2
 8005362:	3304      	adds	r3, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a84      	ldr	r2, [pc, #528]	; (8005578 <DC_MOTOR_Init+0x338>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10b      	bne.n	8005384 <DC_MOTOR_Init+0x144>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800536c:	4b7f      	ldr	r3, [pc, #508]	; (800556c <DC_MOTOR_Init+0x32c>)
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	4a7e      	ldr	r2, [pc, #504]	; (800556c <DC_MOTOR_Init+0x32c>)
 8005372:	f043 0320 	orr.w	r3, r3, #32
 8005376:	6193      	str	r3, [r2, #24]
 8005378:	4b7c      	ldr	r3, [pc, #496]	; (800556c <DC_MOTOR_Init+0x32c>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	4a77      	ldr	r2, [pc, #476]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005388:	015b      	lsls	r3, r3, #5
 800538a:	4413      	add	r3, r2
 800538c:	3308      	adds	r3, #8
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005394:	2301      	movs	r3, #1
 8005396:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539a:	2302      	movs	r3, #2
 800539c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	4a70      	ldr	r2, [pc, #448]	; (8005564 <DC_MOTOR_Init+0x324>)
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	4413      	add	r3, r2
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fd f999 	bl	80026e8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	4a6a      	ldr	r2, [pc, #424]	; (8005564 <DC_MOTOR_Init+0x324>)
 80053ba:	015b      	lsls	r3, r3, #5
 80053bc:	4413      	add	r3, r2
 80053be:	330a      	adds	r3, #10
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	2302      	movs	r3, #2
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4a63      	ldr	r2, [pc, #396]	; (8005564 <DC_MOTOR_Init+0x324>)
 80053d6:	015b      	lsls	r3, r3, #5
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fd f97f 	bl	80026e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <DC_MOTOR_Init+0x324>)
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	4413      	add	r3, r2
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	4a5b      	ldr	r2, [pc, #364]	; (8005564 <DC_MOTOR_Init+0x324>)
 80053f8:	015b      	lsls	r3, r3, #5
 80053fa:	4413      	add	r3, r2
 80053fc:	3308      	adds	r3, #8
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	2200      	movs	r2, #0
 8005402:	4619      	mov	r1, r3
 8005404:	f7fd faf4 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	4a56      	ldr	r2, [pc, #344]	; (8005564 <DC_MOTOR_Init+0x324>)
 800540c:	015b      	lsls	r3, r3, #5
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4a53      	ldr	r2, [pc, #332]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005418:	015b      	lsls	r3, r3, #5
 800541a:	4413      	add	r3, r2
 800541c:	330a      	adds	r3, #10
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	4619      	mov	r1, r3
 8005424:	f7fd fae4 	bl	80029f0 <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8005428:	2301      	movs	r3, #1
 800542a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8005434:	e009      	b.n	800544a <DC_MOTOR_Init+0x20a>
	{
		ARR_Value *= 2;
 8005436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8005440:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8005444:	3301      	adds	r3, #1
 8005446:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4a45      	ldr	r2, [pc, #276]	; (8005564 <DC_MOTOR_Init+0x324>)
 800544e:	015b      	lsls	r3, r3, #5
 8005450:	4413      	add	r3, r2
 8005452:	331c      	adds	r3, #28
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800545a:	429a      	cmp	r2, r3
 800545c:	d3eb      	bcc.n	8005436 <DC_MOTOR_Init+0x1f6>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	4a40      	ldr	r2, [pc, #256]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005462:	015b      	lsls	r3, r3, #5
 8005464:	4413      	add	r3, r2
 8005466:	3314      	adds	r3, #20
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	4b43      	ldr	r3, [pc, #268]	; (800557c <DC_MOTOR_Init+0x33c>)
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	4619      	mov	r1, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005478:	015b      	lsls	r3, r3, #5
 800547a:	4413      	add	r3, r2
 800547c:	3318      	adds	r3, #24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	fbb1 f3f3 	udiv	r3, r1, r3
 800548c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PSC_Value--;
 8005490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005494:	3b01      	subs	r3, #1
 8005496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	ARR_Value -= 2;
 800549a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549e:	3b02      	subs	r3, #2
 80054a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <DC_MOTOR_Init+0x324>)
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	4413      	add	r3, r2
 80054ac:	330c      	adds	r3, #12
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	61bb      	str	r3, [r7, #24]
	htim.Init.Prescaler = PSC_Value;
 80054b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054b6:	61fb      	str	r3, [r7, #28]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
	htim.Init.Period = ARR_Value;
 80054bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054c2:	2300      	movs	r3, #0
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_Base_Init(&htim);
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd fec0 	bl	8003254 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80054dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80054e0:	f107 0318 	add.w	r3, r7, #24
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fc08 	bl	8003cfc <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80054ec:	f107 0318 	add.w	r3, r7, #24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fd ff51 	bl	8003398 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8005500:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005504:	f107 0318 	add.w	r3, r7, #24
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f8cc 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005510:	2360      	movs	r3, #96	; 0x60
 8005512:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005518:	2300      	movs	r3, #0
 800551a:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005524:	015b      	lsls	r3, r3, #5
 8005526:	4413      	add	r3, r2
 8005528:	3310      	adds	r3, #16
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005530:	f107 0318 	add.w	r3, r7, #24
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fb23 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800553a:	f107 0318 	add.w	r3, r7, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc fdba 	bl	80020b8 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <DC_MOTOR_Init+0x324>)
 8005548:	015b      	lsls	r3, r3, #5
 800554a:	4413      	add	r3, r2
 800554c:	3310      	adds	r3, #16
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	f107 0318 	add.w	r3, r7, #24
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fd ff76 	bl	8003448 <HAL_TIM_PWM_Start>
}
 800555c:	bf00      	nop
 800555e:	37b0      	adds	r7, #176	; 0xb0
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	08009118 	.word	0x08009118
 8005568:	40010800 	.word	0x40010800
 800556c:	40021000 	.word	0x40021000
 8005570:	40010c00 	.word	0x40010c00
 8005574:	40011000 	.word	0x40011000
 8005578:	40011400 	.word	0x40011400
 800557c:	000f4240 	.word	0x000f4240

08005580 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
 800558a:	460b      	mov	r3, r1
 800558c:	71bb      	strb	r3, [r7, #6]
 800558e:	4613      	mov	r3, r2
 8005590:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8005592:	79bb      	ldrb	r3, [r7, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11f      	bne.n	80055d8 <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <DC_MOTOR_Start+0x11c>)
 800559c:	015b      	lsls	r3, r3, #5
 800559e:	4413      	add	r3, r2
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	4a3d      	ldr	r2, [pc, #244]	; (800569c <DC_MOTOR_Start+0x11c>)
 80055a6:	015b      	lsls	r3, r3, #5
 80055a8:	4413      	add	r3, r2
 80055aa:	3308      	adds	r3, #8
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	4619      	mov	r1, r3
 80055b2:	f7fd fa1d 	bl	80029f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	4a38      	ldr	r2, [pc, #224]	; (800569c <DC_MOTOR_Start+0x11c>)
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	4413      	add	r3, r2
 80055be:	3304      	adds	r3, #4
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4a35      	ldr	r2, [pc, #212]	; (800569c <DC_MOTOR_Start+0x11c>)
 80055c6:	015b      	lsls	r3, r3, #5
 80055c8:	4413      	add	r3, r2
 80055ca:	330a      	adds	r3, #10
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fd fa0d 	bl	80029f0 <HAL_GPIO_WritePin>
 80055d6:	e021      	b.n	800561c <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 80055d8:	79bb      	ldrb	r3, [r7, #6]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d11e      	bne.n	800561c <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <DC_MOTOR_Start+0x11c>)
 80055e2:	015b      	lsls	r3, r3, #5
 80055e4:	4413      	add	r3, r2
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <DC_MOTOR_Start+0x11c>)
 80055ec:	015b      	lsls	r3, r3, #5
 80055ee:	4413      	add	r3, r2
 80055f0:	3308      	adds	r3, #8
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	2200      	movs	r2, #0
 80055f6:	4619      	mov	r1, r3
 80055f8:	f7fd f9fa 	bl	80029f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005600:	015b      	lsls	r3, r3, #5
 8005602:	4413      	add	r3, r2
 8005604:	3304      	adds	r3, #4
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	4a24      	ldr	r2, [pc, #144]	; (800569c <DC_MOTOR_Start+0x11c>)
 800560c:	015b      	lsls	r3, r3, #5
 800560e:	4413      	add	r3, r2
 8005610:	330a      	adds	r3, #10
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	4619      	mov	r1, r3
 8005618:	f7fd f9ea 	bl	80029f0 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	4a1f      	ldr	r2, [pc, #124]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005620:	015b      	lsls	r3, r3, #5
 8005622:	4413      	add	r3, r2
 8005624:	3310      	adds	r3, #16
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d108      	bne.n	800563e <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	4a1b      	ldr	r2, [pc, #108]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005630:	015b      	lsls	r3, r3, #5
 8005632:	4413      	add	r3, r2
 8005634:	330c      	adds	r3, #12
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	88ba      	ldrh	r2, [r7, #4]
 800563a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800563c:	e029      	b.n	8005692 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005642:	015b      	lsls	r3, r3, #5
 8005644:	4413      	add	r3, r2
 8005646:	3310      	adds	r3, #16
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d108      	bne.n	8005660 <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4a12      	ldr	r2, [pc, #72]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	4413      	add	r3, r2
 8005656:	330c      	adds	r3, #12
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	88ba      	ldrh	r2, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800565e:	e018      	b.n	8005692 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	4a0e      	ldr	r2, [pc, #56]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	4413      	add	r3, r2
 8005668:	3310      	adds	r3, #16
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d108      	bne.n	8005682 <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005674:	015b      	lsls	r3, r3, #5
 8005676:	4413      	add	r3, r2
 8005678:	330c      	adds	r3, #12
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	88ba      	ldrh	r2, [r7, #4]
 800567e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005680:	e007      	b.n	8005692 <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	4a05      	ldr	r2, [pc, #20]	; (800569c <DC_MOTOR_Start+0x11c>)
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	4413      	add	r3, r2
 800568a:	330c      	adds	r3, #12
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	88ba      	ldrh	r2, [r7, #4]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08009118 	.word	0x08009118

080056a0 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	460a      	mov	r2, r1
 80056aa:	71fb      	strb	r3, [r7, #7]
 80056ac:	4613      	mov	r3, r2
 80056ae:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 80056b4:	015b      	lsls	r3, r3, #5
 80056b6:	4413      	add	r3, r2
 80056b8:	3310      	adds	r3, #16
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <DC_MOTOR_Set_Speed+0x32>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	4413      	add	r3, r2
 80056c8:	330c      	adds	r3, #12
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	88ba      	ldrh	r2, [r7, #4]
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80056d0:	e029      	b.n	8005726 <DC_MOTOR_Set_Speed+0x86>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4a16      	ldr	r2, [pc, #88]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 80056d6:	015b      	lsls	r3, r3, #5
 80056d8:	4413      	add	r3, r2
 80056da:	3310      	adds	r3, #16
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d108      	bne.n	80056f4 <DC_MOTOR_Set_Speed+0x54>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 80056e6:	015b      	lsls	r3, r3, #5
 80056e8:	4413      	add	r3, r2
 80056ea:	330c      	adds	r3, #12
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	88ba      	ldrh	r2, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80056f2:	e018      	b.n	8005726 <DC_MOTOR_Set_Speed+0x86>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 80056f8:	015b      	lsls	r3, r3, #5
 80056fa:	4413      	add	r3, r2
 80056fc:	3310      	adds	r3, #16
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d108      	bne.n	8005716 <DC_MOTOR_Set_Speed+0x76>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 8005708:	015b      	lsls	r3, r3, #5
 800570a:	4413      	add	r3, r2
 800570c:	330c      	adds	r3, #12
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	88ba      	ldrh	r2, [r7, #4]
 8005712:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005714:	e007      	b.n	8005726 <DC_MOTOR_Set_Speed+0x86>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4a05      	ldr	r2, [pc, #20]	; (8005730 <DC_MOTOR_Set_Speed+0x90>)
 800571a:	015b      	lsls	r3, r3, #5
 800571c:	4413      	add	r3, r2
 800571e:	330c      	adds	r3, #12
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	88ba      	ldrh	r2, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	08009118 	.word	0x08009118

08005734 <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 8005742:	015b      	lsls	r3, r3, #5
 8005744:	4413      	add	r3, r2
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 800574c:	015b      	lsls	r3, r3, #5
 800574e:	4413      	add	r3, r2
 8005750:	3308      	adds	r3, #8
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	4619      	mov	r1, r3
 8005758:	f7fd f94a 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 8005760:	015b      	lsls	r3, r3, #5
 8005762:	4413      	add	r3, r2
 8005764:	3304      	adds	r3, #4
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	4a24      	ldr	r2, [pc, #144]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 800576c:	015b      	lsls	r3, r3, #5
 800576e:	4413      	add	r3, r2
 8005770:	330a      	adds	r3, #10
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	4619      	mov	r1, r3
 8005778:	f7fd f93a 	bl	80029f0 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 8005780:	015b      	lsls	r3, r3, #5
 8005782:	4413      	add	r3, r2
 8005784:	3310      	adds	r3, #16
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 8005790:	015b      	lsls	r3, r3, #5
 8005792:	4413      	add	r3, r2
 8005794:	330c      	adds	r3, #12
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 800579c:	e029      	b.n	80057f2 <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	4a16      	ldr	r2, [pc, #88]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 80057a2:	015b      	lsls	r3, r3, #5
 80057a4:	4413      	add	r3, r2
 80057a6:	3310      	adds	r3, #16
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d108      	bne.n	80057c0 <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	4a12      	ldr	r2, [pc, #72]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 80057b2:	015b      	lsls	r3, r3, #5
 80057b4:	4413      	add	r3, r2
 80057b6:	330c      	adds	r3, #12
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80057be:	e018      	b.n	80057f2 <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 80057c4:	015b      	lsls	r3, r3, #5
 80057c6:	4413      	add	r3, r2
 80057c8:	3310      	adds	r3, #16
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d108      	bne.n	80057e2 <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 80057d4:	015b      	lsls	r3, r3, #5
 80057d6:	4413      	add	r3, r2
 80057d8:	330c      	adds	r3, #12
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2200      	movs	r2, #0
 80057de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80057e0:	e007      	b.n	80057f2 <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <DC_MOTOR_Stop+0xc8>)
 80057e6:	015b      	lsls	r3, r3, #5
 80057e8:	4413      	add	r3, r2
 80057ea:	330c      	adds	r3, #12
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	08009118 	.word	0x08009118

08005800 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800580c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800581a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8005832:	f107 0318 	add.w	r3, r7, #24
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	609a      	str	r2, [r3, #8]
 800583e:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8005840:	79fa      	ldrb	r2, [r7, #7]
 8005842:	4987      	ldr	r1, [pc, #540]	; (8005a60 <HCSR04_Init+0x260>)
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a84      	ldr	r2, [pc, #528]	; (8005a64 <HCSR04_Init+0x264>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10c      	bne.n	8005870 <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005856:	4b84      	ldr	r3, [pc, #528]	; (8005a68 <HCSR04_Init+0x268>)
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4a83      	ldr	r2, [pc, #524]	; (8005a68 <HCSR04_Init+0x268>)
 800585c:	f043 0304 	orr.w	r3, r3, #4
 8005860:	6193      	str	r3, [r2, #24]
 8005862:	4b81      	ldr	r3, [pc, #516]	; (8005a68 <HCSR04_Init+0x268>)
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	e046      	b.n	80058fe <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8005870:	79fa      	ldrb	r2, [r7, #7]
 8005872:	497b      	ldr	r1, [pc, #492]	; (8005a60 <HCSR04_Init+0x260>)
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <HCSR04_Init+0x26c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005886:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <HCSR04_Init+0x268>)
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	4a77      	ldr	r2, [pc, #476]	; (8005a68 <HCSR04_Init+0x268>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6193      	str	r3, [r2, #24]
 8005892:	4b75      	ldr	r3, [pc, #468]	; (8005a68 <HCSR04_Init+0x268>)
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	e02e      	b.n	80058fe <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80058a0:	79fa      	ldrb	r2, [r7, #7]
 80058a2:	496f      	ldr	r1, [pc, #444]	; (8005a60 <HCSR04_Init+0x260>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6f      	ldr	r2, [pc, #444]	; (8005a70 <HCSR04_Init+0x270>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10c      	bne.n	80058d0 <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b6:	4b6c      	ldr	r3, [pc, #432]	; (8005a68 <HCSR04_Init+0x268>)
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	4a6b      	ldr	r2, [pc, #428]	; (8005a68 <HCSR04_Init+0x268>)
 80058bc:	f043 0310 	orr.w	r3, r3, #16
 80058c0:	6193      	str	r3, [r2, #24]
 80058c2:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <HCSR04_Init+0x268>)
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e016      	b.n	80058fe <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 80058d0:	79fa      	ldrb	r2, [r7, #7]
 80058d2:	4963      	ldr	r1, [pc, #396]	; (8005a60 <HCSR04_Init+0x260>)
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a64      	ldr	r2, [pc, #400]	; (8005a74 <HCSR04_Init+0x274>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10b      	bne.n	80058fe <HCSR04_Init+0xfe>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80058e6:	4b60      	ldr	r3, [pc, #384]	; (8005a68 <HCSR04_Init+0x268>)
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	4a5f      	ldr	r2, [pc, #380]	; (8005a68 <HCSR04_Init+0x268>)
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6193      	str	r3, [r2, #24]
 80058f2:	4b5d      	ldr	r3, [pc, #372]	; (8005a68 <HCSR04_Init+0x268>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 80058fe:	79fa      	ldrb	r2, [r7, #7]
 8005900:	4957      	ldr	r1, [pc, #348]	; (8005a60 <HCSR04_Init+0x260>)
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3304      	adds	r3, #4
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	643b      	str	r3, [r7, #64]	; 0x40
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005912:	2301      	movs	r3, #1
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005916:	2300      	movs	r3, #0
 8005918:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591a:	2302      	movs	r3, #2
 800591c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 800591e:	79fa      	ldrb	r2, [r7, #7]
 8005920:	494f      	ldr	r1, [pc, #316]	; (8005a60 <HCSR04_Init+0x260>)
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f7fc fed7 	bl	80026e8 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800593a:	79fa      	ldrb	r2, [r7, #7]
 800593c:	4948      	ldr	r1, [pc, #288]	; (8005a60 <HCSR04_Init+0x260>)
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3308      	adds	r3, #8
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	79fa      	ldrb	r2, [r7, #7]
 800594e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005950:	4849      	ldr	r0, [pc, #292]	; (8005a78 <HCSR04_Init+0x278>)
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4403      	add	r3, r0
 800595c:	3304      	adds	r3, #4
 800595e:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	493f      	ldr	r1, [pc, #252]	; (8005a60 <HCSR04_Init+0x260>)
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3308      	adds	r3, #8
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	79fa      	ldrb	r2, [r7, #7]
 8005974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005976:	4840      	ldr	r0, [pc, #256]	; (8005a78 <HCSR04_Init+0x278>)
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4403      	add	r3, r0
 8005982:	3308      	adds	r3, #8
 8005984:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8005986:	79fa      	ldrb	r2, [r7, #7]
 8005988:	493b      	ldr	r1, [pc, #236]	; (8005a78 <HCSR04_Init+0x278>)
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3302      	adds	r3, #2
 8005996:	2200      	movs	r2, #0
 8005998:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 800599a:	79fa      	ldrb	r2, [r7, #7]
 800599c:	4936      	ldr	r1, [pc, #216]	; (8005a78 <HCSR04_Init+0x278>)
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	331c      	adds	r3, #28
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 80059ae:	79fa      	ldrb	r2, [r7, #7]
 80059b0:	4931      	ldr	r1, [pc, #196]	; (8005a78 <HCSR04_Init+0x278>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3308      	adds	r3, #8
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HCSR04_Init+0x1da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 80059c4:	79fa      	ldrb	r2, [r7, #7]
 80059c6:	492c      	ldr	r1, [pc, #176]	; (8005a78 <HCSR04_Init+0x278>)
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3308      	adds	r3, #8
 80059d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d8:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	4920      	ldr	r1, [pc, #128]	; (8005a60 <HCSR04_Init+0x260>)
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	330c      	adds	r3, #12
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HCSR04_Init+0x206>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f0:	79fa      	ldrb	r2, [r7, #7]
 80059f2:	4921      	ldr	r1, [pc, #132]	; (8005a78 <HCSR04_Init+0x278>)
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	3320      	adds	r3, #32
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e04f      	b.n	8005aa6 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8005a06:	79fa      	ldrb	r2, [r7, #7]
 8005a08:	4915      	ldr	r1, [pc, #84]	; (8005a60 <HCSR04_Init+0x260>)
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	330c      	adds	r3, #12
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d10a      	bne.n	8005a32 <HCSR04_Init+0x232>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1c:	79fa      	ldrb	r2, [r7, #7]
 8005a1e:	4916      	ldr	r1, [pc, #88]	; (8005a78 <HCSR04_Init+0x278>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e039      	b.n	8005aa6 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8005a32:	79fa      	ldrb	r2, [r7, #7]
 8005a34:	490a      	ldr	r1, [pc, #40]	; (8005a60 <HCSR04_Init+0x260>)
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	330c      	adds	r3, #12
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d119      	bne.n	8005a7c <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a48:	79fa      	ldrb	r2, [r7, #7]
 8005a4a:	490b      	ldr	r1, [pc, #44]	; (8005a78 <HCSR04_Init+0x278>)
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3320      	adds	r3, #32
 8005a58:	2204      	movs	r2, #4
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e023      	b.n	8005aa6 <HCSR04_Init+0x2a6>
 8005a5e:	bf00      	nop
 8005a60:	08009158 	.word	0x08009158
 8005a64:	40010800 	.word	0x40010800
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40010c00 	.word	0x40010c00
 8005a70:	40011000 	.word	0x40011000
 8005a74:	40011400 	.word	0x40011400
 8005a78:	200002e8 	.word	0x200002e8
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8005a7c:	79fa      	ldrb	r2, [r7, #7]
 8005a7e:	4941      	ldr	r1, [pc, #260]	; (8005b84 <HCSR04_Init+0x384>)
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d109      	bne.n	8005aa6 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a92:	79fa      	ldrb	r2, [r7, #7]
 8005a94:	493c      	ldr	r1, [pc, #240]	; (8005b88 <HCSR04_Init+0x388>)
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3320      	adds	r3, #32
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8005aa6:	79fa      	ldrb	r2, [r7, #7]
 8005aa8:	4936      	ldr	r1, [pc, #216]	; (8005b84 <HCSR04_Init+0x384>)
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8005abc:	79fa      	ldrb	r2, [r7, #7]
 8005abe:	4932      	ldr	r1, [pc, #200]	; (8005b88 <HCSR04_Init+0x388>)
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	3304      	adds	r3, #4
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8005ad8:	79fa      	ldrb	r2, [r7, #7]
 8005ada:	492b      	ldr	r1, [pc, #172]	; (8005b88 <HCSR04_Init+0x388>)
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	f7fd fbaa 	bl	8003254 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8005b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6838      	ldr	r0, [r7, #0]
 8005b0e:	f7fe f8f5 	bl	8003cfc <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8005b12:	6838      	ldr	r0, [r7, #0]
 8005b14:	f7fd fd3a 	bl	800358c <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b24:	4619      	mov	r1, r3
 8005b26:	6838      	ldr	r0, [r7, #0]
 8005b28:	f7fe fdbe 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005b30:	2301      	movs	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	4911      	ldr	r1, [pc, #68]	; (8005b84 <HCSR04_Init+0x384>)
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f107 0318 	add.w	r3, r7, #24
 8005b52:	4619      	mov	r1, r3
 8005b54:	6838      	ldr	r0, [r7, #0]
 8005b56:	f7fd ff7f 	bl	8003a58 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	f7fd fbca 	bl	80032f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005b60:	79fa      	ldrb	r2, [r7, #7]
 8005b62:	4908      	ldr	r1, [pc, #32]	; (8005b84 <HCSR04_Init+0x384>)
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	330c      	adds	r3, #12
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	6838      	ldr	r0, [r7, #0]
 8005b76:	f7fd fd61 	bl	800363c <HAL_TIM_IC_Start_IT>
}
 8005b7a:	bf00      	nop
 8005b7c:	3750      	adds	r7, #80	; 0x50
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	08009158 	.word	0x08009158
 8005b88:	200002e8 	.word	0x200002e8

08005b8c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	e023      	b.n	8005be6 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	4814      	ldr	r0, [pc, #80]	; (8005bf8 <HCSR04_TMR_OVF_ISR+0x6c>)
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4403      	add	r3, r0
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	d113      	bne.n	8005be0 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	4910      	ldr	r1, [pc, #64]	; (8005bfc <HCSR04_TMR_OVF_ISR+0x70>)
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b298      	uxth	r0, r3
 8005bce:	490b      	ldr	r1, [pc, #44]	; (8005bfc <HCSR04_TMR_OVF_ISR+0x70>)
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3302      	adds	r3, #2
 8005bdc:	4602      	mov	r2, r0
 8005bde:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	3301      	adds	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d9d8      	bls.n	8005b9e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	08009158 	.word	0x08009158
 8005bfc:	200002e8 	.word	0x200002e8

08005c00 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8005c00:	b5b0      	push	{r4, r5, r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	e22a      	b.n	800606c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	486b      	ldr	r0, [pc, #428]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4403      	add	r3, r0
 8005c28:	3308      	adds	r3, #8
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	f040 821a 	bne.w	8006066 <HCSR04_TMR_IC_ISR+0x466>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7f19      	ldrb	r1, [r3, #28]
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	4865      	ldr	r0, [pc, #404]	; (8005dd0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4403      	add	r3, r0
 8005c44:	3320      	adds	r3, #32
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	f040 820c 	bne.w	8006066 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	495f      	ldr	r1, [pc, #380]	; (8005dd0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 80b8 	bne.w	8005dd4 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005c64:	7bfa      	ldrb	r2, [r7, #15]
 8005c66:	4959      	ldr	r1, [pc, #356]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	330c      	adds	r3, #12
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	7bfc      	ldrb	r4, [r7, #15]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fe f902 	bl	8003e84 <HAL_TIM_ReadCapturedValue>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4953      	ldr	r1, [pc, #332]	; (8005dd0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005c84:	4623      	mov	r3, r4
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4423      	add	r3, r4
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	330c      	adds	r3, #12
 8005c90:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	494e      	ldr	r1, [pc, #312]	; (8005dd0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	4949      	ldr	r1, [pc, #292]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <HCSR04_TMR_IC_ISR+0xcc>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 020a 	bic.w	r2, r2, #10
 8005cc8:	621a      	str	r2, [r3, #32]
 8005cca:	e02f      	b.n	8005d2c <HCSR04_TMR_IC_ISR+0x12c>
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	493f      	ldr	r1, [pc, #252]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	330c      	adds	r3, #12
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d108      	bne.n	8005cf4 <HCSR04_TMR_IC_ISR+0xf4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf0:	6213      	str	r3, [r2, #32]
 8005cf2:	e01b      	b.n	8005d2c <HCSR04_TMR_IC_ISR+0x12c>
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	4935      	ldr	r1, [pc, #212]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	330c      	adds	r3, #12
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d108      	bne.n	8005d1c <HCSR04_TMR_IC_ISR+0x11c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d18:	6213      	str	r3, [r2, #32]
 8005d1a:	e007      	b.n	8005d2c <HCSR04_TMR_IC_ISR+0x12c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	4927      	ldr	r1, [pc, #156]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HCSR04_TMR_IC_ISR+0x154>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0202 	orr.w	r2, r2, #2
 8005d50:	621a      	str	r2, [r3, #32]
 8005d52:	e02f      	b.n	8005db4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005d54:	7bfa      	ldrb	r2, [r7, #15]
 8005d56:	491d      	ldr	r1, [pc, #116]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	330c      	adds	r3, #12
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d108      	bne.n	8005d7c <HCSR04_TMR_IC_ISR+0x17c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	f043 0320 	orr.w	r3, r3, #32
 8005d78:	6213      	str	r3, [r2, #32]
 8005d7a:	e01b      	b.n	8005db4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	4913      	ldr	r1, [pc, #76]	; (8005dcc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d108      	bne.n	8005da4 <HCSR04_TMR_IC_ISR+0x1a4>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da0:	6213      	str	r3, [r2, #32]
 8005da2:	e007      	b.n	8005db4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005db2:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	4906      	ldr	r1, [pc, #24]	; (8005dd0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e14d      	b.n	8006066 <HCSR04_TMR_IC_ISR+0x466>
 8005dca:	bf00      	nop
 8005dcc:	08009158 	.word	0x08009158
 8005dd0:	200002e8 	.word	0x200002e8
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8005dd4:	7bfa      	ldrb	r2, [r7, #15]
 8005dd6:	49ac      	ldr	r1, [pc, #688]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005dd8:	4613      	mov	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f040 813e 	bne.w	8006066 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	49a7      	ldr	r1, [pc, #668]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	3308      	adds	r3, #8
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8005e00:	7bfa      	ldrb	r2, [r7, #15]
 8005e02:	49a2      	ldr	r1, [pc, #648]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3308      	adds	r3, #8
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e16:	489c      	ldr	r0, [pc, #624]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4403      	add	r3, r0
 8005e22:	3308      	adds	r3, #8
 8005e24:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	4998      	ldr	r1, [pc, #608]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	330c      	adds	r3, #12
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	7bfc      	ldrb	r4, [r7, #15]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fe f821 	bl	8003e84 <HAL_TIM_ReadCapturedValue>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4990      	ldr	r1, [pc, #576]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e46:	4623      	mov	r3, r4
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4423      	add	r3, r4
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3310      	adds	r3, #16
 8005e52:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8005e54:	7bfa      	ldrb	r2, [r7, #15]
 8005e56:	498c      	ldr	r1, [pc, #560]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e58:	4613      	mov	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	3310      	adds	r3, #16
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	7bfa      	ldrb	r2, [r7, #15]
 8005e68:	4887      	ldr	r0, [pc, #540]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4403      	add	r3, r0
 8005e74:	3302      	adds	r3, #2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	461c      	mov	r4, r3
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	4882      	ldr	r0, [pc, #520]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4403      	add	r3, r0
 8005e88:	3308      	adds	r3, #8
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	fb04 f303 	mul.w	r3, r4, r3
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	4419      	add	r1, r3
 8005e96:	487c      	ldr	r0, [pc, #496]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4403      	add	r3, r0
 8005ea2:	3310      	adds	r3, #16
 8005ea4:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8005ea6:	7bfa      	ldrb	r2, [r7, #15]
 8005ea8:	4977      	ldr	r1, [pc, #476]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005eaa:	4613      	mov	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3310      	adds	r3, #16
 8005eb6:	6819      	ldr	r1, [r3, #0]
 8005eb8:	7bfa      	ldrb	r2, [r7, #15]
 8005eba:	4873      	ldr	r0, [pc, #460]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4403      	add	r3, r0
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	1ac9      	subs	r1, r1, r3
 8005ece:	486e      	ldr	r0, [pc, #440]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4403      	add	r3, r0
 8005eda:	3314      	adds	r3, #20
 8005edc:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	4969      	ldr	r1, [pc, #420]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3314      	adds	r3, #20
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fa77 	bl	80003e4 <__aeabi_ui2d>
 8005ef6:	a362      	add	r3, pc, #392	; (adr r3, 8006080 <HCSR04_TMR_IC_ISR+0x480>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa faec 	bl	80004d8 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	461d      	mov	r5, r3
 8005f08:	7bfa      	ldrb	r2, [r7, #15]
 8005f0a:	4960      	ldr	r1, [pc, #384]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	3310      	adds	r3, #16
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fa fa5e 	bl	80003e4 <__aeabi_ui2d>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fbfc 	bl	800072c <__aeabi_ddiv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	7bfc      	ldrb	r4, [r7, #15]
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fa fda3 	bl	8000a88 <__aeabi_d2f>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4950      	ldr	r1, [pc, #320]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005f46:	4623      	mov	r3, r4
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4423      	add	r3, r4
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3318      	adds	r3, #24
 8005f52:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	494c      	ldr	r1, [pc, #304]	; (8006088 <HCSR04_TMR_IC_ISR+0x488>)
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	4948      	ldr	r1, [pc, #288]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	330c      	adds	r3, #12
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <HCSR04_TMR_IC_ISR+0x38e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 020a 	bic.w	r2, r2, #10
 8005f8a:	621a      	str	r2, [r3, #32]
 8005f8c:	e02f      	b.n	8005fee <HCSR04_TMR_IC_ISR+0x3ee>
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	493e      	ldr	r1, [pc, #248]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d108      	bne.n	8005fb6 <HCSR04_TMR_IC_ISR+0x3b6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fb2:	6213      	str	r3, [r2, #32]
 8005fb4:	e01b      	b.n	8005fee <HCSR04_TMR_IC_ISR+0x3ee>
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	4934      	ldr	r1, [pc, #208]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d108      	bne.n	8005fde <HCSR04_TMR_IC_ISR+0x3de>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fda:	6213      	str	r3, [r2, #32]
 8005fdc:	e007      	b.n	8005fee <HCSR04_TMR_IC_ISR+0x3ee>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fec:	6213      	str	r3, [r2, #32]
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	4926      	ldr	r1, [pc, #152]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HCSR04_TMR_IC_ISR+0x412>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a12      	ldr	r2, [r2, #32]
 800600e:	621a      	str	r2, [r3, #32]
 8006010:	e029      	b.n	8006066 <HCSR04_TMR_IC_ISR+0x466>
 8006012:	7bfa      	ldrb	r2, [r7, #15]
 8006014:	491d      	ldr	r1, [pc, #116]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	330c      	adds	r3, #12
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d106      	bne.n	8006036 <HCSR04_TMR_IC_ISR+0x436>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	6213      	str	r3, [r2, #32]
 8006034:	e017      	b.n	8006066 <HCSR04_TMR_IC_ISR+0x466>
 8006036:	7bfa      	ldrb	r2, [r7, #15]
 8006038:	4914      	ldr	r1, [pc, #80]	; (800608c <HCSR04_TMR_IC_ISR+0x48c>)
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	330c      	adds	r3, #12
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d106      	bne.n	800605a <HCSR04_TMR_IC_ISR+0x45a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	6213      	str	r3, [r2, #32]
 8006058:	e005      	b.n	8006066 <HCSR04_TMR_IC_ISR+0x466>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	3301      	adds	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b04      	cmp	r3, #4
 8006070:	f67f add1 	bls.w	8005c16 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bdb0      	pop	{r4, r5, r7, pc}
 800607e:	bf00      	nop
 8006080:	b020c49c 	.word	0xb020c49c
 8006084:	3f916872 	.word	0x3f916872
 8006088:	200002e8 	.word	0x200002e8
 800608c:	08009158 	.word	0x08009158

08006090 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
	/* float Distance_meters = gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;

	float Distance_centimeters = Distance_meters * 100.0; */

	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800609a:	79fa      	ldrb	r2, [r7, #7]
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <HCSR04_Read+0x28>)
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3318      	adds	r3, #24
 80060aa:	681b      	ldr	r3, [r3, #0]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	200002e8 	.word	0x200002e8

080060bc <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	4923      	ldr	r1, [pc, #140]	; (8006158 <HCSR04_Trigger+0x9c>)
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	79fa      	ldrb	r2, [r7, #7]
 80060d8:	491f      	ldr	r1, [pc, #124]	; (8006158 <HCSR04_Trigger+0x9c>)
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3304      	adds	r3, #4
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	f7fc fc80 	bl	80029f0 <HAL_GPIO_WritePin>
	DELAY_US(2);
 80060f0:	4b1a      	ldr	r3, [pc, #104]	; (800615c <HCSR04_Trigger+0xa0>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <HCSR04_Trigger+0xa4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HCSR04_Trigger+0xa8>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	0c9b      	lsrs	r3, r3, #18
 8006102:	005a      	lsls	r2, r3, #1
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <HCSR04_Trigger+0xa4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4916      	ldr	r1, [pc, #88]	; (8006164 <HCSR04_Trigger+0xa8>)
 800610a:	fba1 1303 	umull	r1, r3, r1, r3
 800610e:	0c9b      	lsrs	r3, r3, #18
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <HCSR04_Trigger+0xa0>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	429a      	cmp	r2, r3
 8006122:	d8f8      	bhi.n	8006116 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8006124:	79fa      	ldrb	r2, [r7, #7]
 8006126:	490c      	ldr	r1, [pc, #48]	; (8006158 <HCSR04_Trigger+0x9c>)
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	79fa      	ldrb	r2, [r7, #7]
 8006136:	4908      	ldr	r1, [pc, #32]	; (8006158 <HCSR04_Trigger+0x9c>)
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3304      	adds	r3, #4
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	4619      	mov	r1, r3
 800614a:	f7fc fc51 	bl	80029f0 <HAL_GPIO_WritePin>
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	08009158 	.word	0x08009158
 800615c:	e000e010 	.word	0xe000e010
 8006160:	20000004 	.word	0x20000004
 8006164:	431bde83 	.word	0x431bde83

08006168 <LED_Init>:
 *      Author: Abdallah Alnemr
 */

#include "../Inc/LED.h"

void LED_Init(void){
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800616c:	2201      	movs	r2, #1
 800616e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <LED_Init+0x2c>)
 8006174:	f7fc fc3c 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8006178:	2200      	movs	r2, #0
 800617a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800617e:	4806      	ldr	r0, [pc, #24]	; (8006198 <LED_Init+0x30>)
 8006180:	f7fc fc36 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8006184:	2200      	movs	r2, #0
 8006186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618a:	4802      	ldr	r0, [pc, #8]	; (8006194 <LED_Init+0x2c>)
 800618c:	f7fc fc30 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8006190:	bf00      	nop
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40010c00 	.word	0x40010c00
 8006198:	40010800 	.word	0x40010800

0800619c <LED_ON>:

void LED_ON(uint8_t ledInstance){
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
	if(0 == ledInstance){
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <LED_ON+0x1e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80061ac:	2201      	movs	r2, #1
 80061ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061b2:	4817      	ldr	r0, [pc, #92]	; (8006210 <LED_ON+0x74>)
 80061b4:	f7fc fc1c 	bl	80029f0 <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	}
}
 80061b8:	e025      	b.n	8006206 <LED_ON+0x6a>
	} else if(1 == ledInstance){
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d106      	bne.n	80061ce <LED_ON+0x32>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80061c0:	2201      	movs	r2, #1
 80061c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c6:	4813      	ldr	r0, [pc, #76]	; (8006214 <LED_ON+0x78>)
 80061c8:	f7fc fc12 	bl	80029f0 <HAL_GPIO_WritePin>
}
 80061cc:	e01b      	b.n	8006206 <LED_ON+0x6a>
	} else if(2 == ledInstance){
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d106      	bne.n	80061e2 <LED_ON+0x46>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80061d4:	2201      	movs	r2, #1
 80061d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061da:	480d      	ldr	r0, [pc, #52]	; (8006210 <LED_ON+0x74>)
 80061dc:	f7fc fc08 	bl	80029f0 <HAL_GPIO_WritePin>
}
 80061e0:	e011      	b.n	8006206 <LED_ON+0x6a>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80061e2:	2200      	movs	r2, #0
 80061e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061e8:	4809      	ldr	r0, [pc, #36]	; (8006210 <LED_ON+0x74>)
 80061ea:	f7fc fc01 	bl	80029f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80061ee:	2200      	movs	r2, #0
 80061f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061f4:	4807      	ldr	r0, [pc, #28]	; (8006214 <LED_ON+0x78>)
 80061f6:	f7fc fbfb 	bl	80029f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80061fa:	2200      	movs	r2, #0
 80061fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006200:	4803      	ldr	r0, [pc, #12]	; (8006210 <LED_ON+0x74>)
 8006202:	f7fc fbf5 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40010c00 	.word	0x40010c00
 8006214:	40010800 	.word	0x40010800

08006218 <LED_OFF>:

void LED_OFF(uint8_t ledInstance){
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
	if (0 == ledInstance) {
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <LED_OFF+0x1e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800622e:	480d      	ldr	r0, [pc, #52]	; (8006264 <LED_OFF+0x4c>)
 8006230:	f7fc fbde 	bl	80029f0 <HAL_GPIO_WritePin>
	} else if (2 == ledInstance) {
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	} else {
		/* Nothing */
	}
}
 8006234:	e012      	b.n	800625c <LED_OFF+0x44>
	} else if (1 == ledInstance) {
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d106      	bne.n	800624a <LED_OFF+0x32>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800623c:	2200      	movs	r2, #0
 800623e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006242:	4809      	ldr	r0, [pc, #36]	; (8006268 <LED_OFF+0x50>)
 8006244:	f7fc fbd4 	bl	80029f0 <HAL_GPIO_WritePin>
}
 8006248:	e008      	b.n	800625c <LED_OFF+0x44>
	} else if (2 == ledInstance) {
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d105      	bne.n	800625c <LED_OFF+0x44>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006256:	4803      	ldr	r0, [pc, #12]	; (8006264 <LED_OFF+0x4c>)
 8006258:	f7fc fbca 	bl	80029f0 <HAL_GPIO_WritePin>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40010c00 	.word	0x40010c00
 8006268:	40010800 	.word	0x40010800

0800626c <__cvt>:
 800626c:	2b00      	cmp	r3, #0
 800626e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006272:	461f      	mov	r7, r3
 8006274:	bfbb      	ittet	lt
 8006276:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800627a:	461f      	movlt	r7, r3
 800627c:	2300      	movge	r3, #0
 800627e:	232d      	movlt	r3, #45	; 0x2d
 8006280:	b088      	sub	sp, #32
 8006282:	4614      	mov	r4, r2
 8006284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006286:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800628c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006290:	f023 0820 	bic.w	r8, r3, #32
 8006294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006298:	d005      	beq.n	80062a6 <__cvt+0x3a>
 800629a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800629e:	d100      	bne.n	80062a2 <__cvt+0x36>
 80062a0:	3501      	adds	r5, #1
 80062a2:	2302      	movs	r3, #2
 80062a4:	e000      	b.n	80062a8 <__cvt+0x3c>
 80062a6:	2303      	movs	r3, #3
 80062a8:	aa07      	add	r2, sp, #28
 80062aa:	9204      	str	r2, [sp, #16]
 80062ac:	aa06      	add	r2, sp, #24
 80062ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062b2:	e9cd 3500 	strd	r3, r5, [sp]
 80062b6:	4622      	mov	r2, r4
 80062b8:	463b      	mov	r3, r7
 80062ba:	f000 fe71 	bl	8006fa0 <_dtoa_r>
 80062be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062c2:	4606      	mov	r6, r0
 80062c4:	d102      	bne.n	80062cc <__cvt+0x60>
 80062c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062c8:	07db      	lsls	r3, r3, #31
 80062ca:	d522      	bpl.n	8006312 <__cvt+0xa6>
 80062cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062d0:	eb06 0905 	add.w	r9, r6, r5
 80062d4:	d110      	bne.n	80062f8 <__cvt+0x8c>
 80062d6:	7833      	ldrb	r3, [r6, #0]
 80062d8:	2b30      	cmp	r3, #48	; 0x30
 80062da:	d10a      	bne.n	80062f2 <__cvt+0x86>
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	4620      	mov	r0, r4
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7fa fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80062e8:	b918      	cbnz	r0, 80062f2 <__cvt+0x86>
 80062ea:	f1c5 0501 	rsb	r5, r5, #1
 80062ee:	f8ca 5000 	str.w	r5, [sl]
 80062f2:	f8da 3000 	ldr.w	r3, [sl]
 80062f6:	4499      	add	r9, r3
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4620      	mov	r0, r4
 80062fe:	4639      	mov	r1, r7
 8006300:	f7fa fb52 	bl	80009a8 <__aeabi_dcmpeq>
 8006304:	b108      	cbz	r0, 800630a <__cvt+0x9e>
 8006306:	f8cd 901c 	str.w	r9, [sp, #28]
 800630a:	2230      	movs	r2, #48	; 0x30
 800630c:	9b07      	ldr	r3, [sp, #28]
 800630e:	454b      	cmp	r3, r9
 8006310:	d307      	bcc.n	8006322 <__cvt+0xb6>
 8006312:	4630      	mov	r0, r6
 8006314:	9b07      	ldr	r3, [sp, #28]
 8006316:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	b008      	add	sp, #32
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	9107      	str	r1, [sp, #28]
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e7f0      	b.n	800630c <__cvt+0xa0>

0800632a <__exponent>:
 800632a:	4603      	mov	r3, r0
 800632c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632e:	2900      	cmp	r1, #0
 8006330:	f803 2b02 	strb.w	r2, [r3], #2
 8006334:	bfb6      	itet	lt
 8006336:	222d      	movlt	r2, #45	; 0x2d
 8006338:	222b      	movge	r2, #43	; 0x2b
 800633a:	4249      	neglt	r1, r1
 800633c:	2909      	cmp	r1, #9
 800633e:	7042      	strb	r2, [r0, #1]
 8006340:	dd2a      	ble.n	8006398 <__exponent+0x6e>
 8006342:	f10d 0207 	add.w	r2, sp, #7
 8006346:	4617      	mov	r7, r2
 8006348:	260a      	movs	r6, #10
 800634a:	fb91 f5f6 	sdiv	r5, r1, r6
 800634e:	4694      	mov	ip, r2
 8006350:	fb06 1415 	mls	r4, r6, r5, r1
 8006354:	3430      	adds	r4, #48	; 0x30
 8006356:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800635a:	460c      	mov	r4, r1
 800635c:	2c63      	cmp	r4, #99	; 0x63
 800635e:	4629      	mov	r1, r5
 8006360:	f102 32ff 	add.w	r2, r2, #4294967295
 8006364:	dcf1      	bgt.n	800634a <__exponent+0x20>
 8006366:	3130      	adds	r1, #48	; 0x30
 8006368:	f1ac 0402 	sub.w	r4, ip, #2
 800636c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006370:	4622      	mov	r2, r4
 8006372:	1c41      	adds	r1, r0, #1
 8006374:	42ba      	cmp	r2, r7
 8006376:	d30a      	bcc.n	800638e <__exponent+0x64>
 8006378:	f10d 0209 	add.w	r2, sp, #9
 800637c:	eba2 020c 	sub.w	r2, r2, ip
 8006380:	42bc      	cmp	r4, r7
 8006382:	bf88      	it	hi
 8006384:	2200      	movhi	r2, #0
 8006386:	4413      	add	r3, r2
 8006388:	1a18      	subs	r0, r3, r0
 800638a:	b003      	add	sp, #12
 800638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006392:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006396:	e7ed      	b.n	8006374 <__exponent+0x4a>
 8006398:	2330      	movs	r3, #48	; 0x30
 800639a:	3130      	adds	r1, #48	; 0x30
 800639c:	7083      	strb	r3, [r0, #2]
 800639e:	70c1      	strb	r1, [r0, #3]
 80063a0:	1d03      	adds	r3, r0, #4
 80063a2:	e7f1      	b.n	8006388 <__exponent+0x5e>

080063a4 <_printf_float>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	b091      	sub	sp, #68	; 0x44
 80063aa:	460c      	mov	r4, r1
 80063ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063b0:	4616      	mov	r6, r2
 80063b2:	461f      	mov	r7, r3
 80063b4:	4605      	mov	r5, r0
 80063b6:	f000 fce5 	bl	8006d84 <_localeconv_r>
 80063ba:	6803      	ldr	r3, [r0, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	f7f9 fec6 	bl	8000150 <strlen>
 80063c4:	2300      	movs	r3, #0
 80063c6:	930e      	str	r3, [sp, #56]	; 0x38
 80063c8:	f8d8 3000 	ldr.w	r3, [r8]
 80063cc:	900a      	str	r0, [sp, #40]	; 0x28
 80063ce:	3307      	adds	r3, #7
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063dc:	f8d4 b000 	ldr.w	fp, [r4]
 80063e0:	f8c8 2000 	str.w	r2, [r8]
 80063e4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80063e8:	4652      	mov	r2, sl
 80063ea:	4643      	mov	r3, r8
 80063ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063f0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80063f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	4650      	mov	r0, sl
 80063fc:	4b9c      	ldr	r3, [pc, #624]	; (8006670 <_printf_float+0x2cc>)
 80063fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006400:	f7fa fb04 	bl	8000a0c <__aeabi_dcmpun>
 8006404:	bb70      	cbnz	r0, 8006464 <_printf_float+0xc0>
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	4650      	mov	r0, sl
 800640c:	4b98      	ldr	r3, [pc, #608]	; (8006670 <_printf_float+0x2cc>)
 800640e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006410:	f7fa fade 	bl	80009d0 <__aeabi_dcmple>
 8006414:	bb30      	cbnz	r0, 8006464 <_printf_float+0xc0>
 8006416:	2200      	movs	r2, #0
 8006418:	2300      	movs	r3, #0
 800641a:	4650      	mov	r0, sl
 800641c:	4641      	mov	r1, r8
 800641e:	f7fa facd 	bl	80009bc <__aeabi_dcmplt>
 8006422:	b110      	cbz	r0, 800642a <_printf_float+0x86>
 8006424:	232d      	movs	r3, #45	; 0x2d
 8006426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642a:	4a92      	ldr	r2, [pc, #584]	; (8006674 <_printf_float+0x2d0>)
 800642c:	4b92      	ldr	r3, [pc, #584]	; (8006678 <_printf_float+0x2d4>)
 800642e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006432:	bf94      	ite	ls
 8006434:	4690      	movls	r8, r2
 8006436:	4698      	movhi	r8, r3
 8006438:	2303      	movs	r3, #3
 800643a:	f04f 0a00 	mov.w	sl, #0
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	f02b 0304 	bic.w	r3, fp, #4
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	4633      	mov	r3, r6
 8006448:	4621      	mov	r1, r4
 800644a:	4628      	mov	r0, r5
 800644c:	9700      	str	r7, [sp, #0]
 800644e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006450:	f000 f9d6 	bl	8006800 <_printf_common>
 8006454:	3001      	adds	r0, #1
 8006456:	f040 8090 	bne.w	800657a <_printf_float+0x1d6>
 800645a:	f04f 30ff 	mov.w	r0, #4294967295
 800645e:	b011      	add	sp, #68	; 0x44
 8006460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006464:	4652      	mov	r2, sl
 8006466:	4643      	mov	r3, r8
 8006468:	4650      	mov	r0, sl
 800646a:	4641      	mov	r1, r8
 800646c:	f7fa face 	bl	8000a0c <__aeabi_dcmpun>
 8006470:	b148      	cbz	r0, 8006486 <_printf_float+0xe2>
 8006472:	f1b8 0f00 	cmp.w	r8, #0
 8006476:	bfb8      	it	lt
 8006478:	232d      	movlt	r3, #45	; 0x2d
 800647a:	4a80      	ldr	r2, [pc, #512]	; (800667c <_printf_float+0x2d8>)
 800647c:	bfb8      	it	lt
 800647e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006482:	4b7f      	ldr	r3, [pc, #508]	; (8006680 <_printf_float+0x2dc>)
 8006484:	e7d3      	b.n	800642e <_printf_float+0x8a>
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	d142      	bne.n	8006516 <_printf_float+0x172>
 8006490:	2306      	movs	r3, #6
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	9206      	str	r2, [sp, #24]
 8006498:	aa0e      	add	r2, sp, #56	; 0x38
 800649a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800649e:	aa0d      	add	r2, sp, #52	; 0x34
 80064a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064a4:	9203      	str	r2, [sp, #12]
 80064a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	4652      	mov	r2, sl
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4628      	mov	r0, r5
 80064b8:	4643      	mov	r3, r8
 80064ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80064bc:	f7ff fed6 	bl	800626c <__cvt>
 80064c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064c2:	4680      	mov	r8, r0
 80064c4:	2947      	cmp	r1, #71	; 0x47
 80064c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064c8:	d108      	bne.n	80064dc <_printf_float+0x138>
 80064ca:	1cc8      	adds	r0, r1, #3
 80064cc:	db02      	blt.n	80064d4 <_printf_float+0x130>
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	4299      	cmp	r1, r3
 80064d2:	dd40      	ble.n	8006556 <_printf_float+0x1b2>
 80064d4:	f1a9 0902 	sub.w	r9, r9, #2
 80064d8:	fa5f f989 	uxtb.w	r9, r9
 80064dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064e0:	d81f      	bhi.n	8006522 <_printf_float+0x17e>
 80064e2:	464a      	mov	r2, r9
 80064e4:	3901      	subs	r1, #1
 80064e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064ea:	910d      	str	r1, [sp, #52]	; 0x34
 80064ec:	f7ff ff1d 	bl	800632a <__exponent>
 80064f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064f2:	4682      	mov	sl, r0
 80064f4:	1813      	adds	r3, r2, r0
 80064f6:	2a01      	cmp	r2, #1
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	dc02      	bgt.n	8006502 <_printf_float+0x15e>
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	07d2      	lsls	r2, r2, #31
 8006500:	d501      	bpl.n	8006506 <_printf_float+0x162>
 8006502:	3301      	adds	r3, #1
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800650a:	2b00      	cmp	r3, #0
 800650c:	d09b      	beq.n	8006446 <_printf_float+0xa2>
 800650e:	232d      	movs	r3, #45	; 0x2d
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	e797      	b.n	8006446 <_printf_float+0xa2>
 8006516:	2947      	cmp	r1, #71	; 0x47
 8006518:	d1bc      	bne.n	8006494 <_printf_float+0xf0>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1ba      	bne.n	8006494 <_printf_float+0xf0>
 800651e:	2301      	movs	r3, #1
 8006520:	e7b7      	b.n	8006492 <_printf_float+0xee>
 8006522:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006526:	d118      	bne.n	800655a <_printf_float+0x1b6>
 8006528:	2900      	cmp	r1, #0
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	dd0b      	ble.n	8006546 <_printf_float+0x1a2>
 800652e:	6121      	str	r1, [r4, #16]
 8006530:	b913      	cbnz	r3, 8006538 <_printf_float+0x194>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	07d0      	lsls	r0, r2, #31
 8006536:	d502      	bpl.n	800653e <_printf_float+0x19a>
 8006538:	3301      	adds	r3, #1
 800653a:	440b      	add	r3, r1
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	f04f 0a00 	mov.w	sl, #0
 8006542:	65a1      	str	r1, [r4, #88]	; 0x58
 8006544:	e7df      	b.n	8006506 <_printf_float+0x162>
 8006546:	b913      	cbnz	r3, 800654e <_printf_float+0x1aa>
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	07d2      	lsls	r2, r2, #31
 800654c:	d501      	bpl.n	8006552 <_printf_float+0x1ae>
 800654e:	3302      	adds	r3, #2
 8006550:	e7f4      	b.n	800653c <_printf_float+0x198>
 8006552:	2301      	movs	r3, #1
 8006554:	e7f2      	b.n	800653c <_printf_float+0x198>
 8006556:	f04f 0967 	mov.w	r9, #103	; 0x67
 800655a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800655c:	4299      	cmp	r1, r3
 800655e:	db05      	blt.n	800656c <_printf_float+0x1c8>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	6121      	str	r1, [r4, #16]
 8006564:	07d8      	lsls	r0, r3, #31
 8006566:	d5ea      	bpl.n	800653e <_printf_float+0x19a>
 8006568:	1c4b      	adds	r3, r1, #1
 800656a:	e7e7      	b.n	800653c <_printf_float+0x198>
 800656c:	2900      	cmp	r1, #0
 800656e:	bfcc      	ite	gt
 8006570:	2201      	movgt	r2, #1
 8006572:	f1c1 0202 	rsble	r2, r1, #2
 8006576:	4413      	add	r3, r2
 8006578:	e7e0      	b.n	800653c <_printf_float+0x198>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	055a      	lsls	r2, r3, #21
 800657e:	d407      	bmi.n	8006590 <_printf_float+0x1ec>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	4642      	mov	r2, r8
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	d12b      	bne.n	80065e6 <_printf_float+0x242>
 800658e:	e764      	b.n	800645a <_printf_float+0xb6>
 8006590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006594:	f240 80dd 	bls.w	8006752 <_printf_float+0x3ae>
 8006598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	f7fa fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d033      	beq.n	8006610 <_printf_float+0x26c>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	4a35      	ldr	r2, [pc, #212]	; (8006684 <_printf_float+0x2e0>)
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f af51 	beq.w	800645a <_printf_float+0xb6>
 80065b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065bc:	429a      	cmp	r2, r3
 80065be:	db02      	blt.n	80065c6 <_printf_float+0x222>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07d8      	lsls	r0, r3, #31
 80065c4:	d50f      	bpl.n	80065e6 <_printf_float+0x242>
 80065c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f af42 	beq.w	800645a <_printf_float+0xb6>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	f104 091a 	add.w	r9, r4, #26
 80065de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4543      	cmp	r3, r8
 80065e4:	dc09      	bgt.n	80065fa <_printf_float+0x256>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	079b      	lsls	r3, r3, #30
 80065ea:	f100 8104 	bmi.w	80067f6 <_printf_float+0x452>
 80065ee:	68e0      	ldr	r0, [r4, #12]
 80065f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065f2:	4298      	cmp	r0, r3
 80065f4:	bfb8      	it	lt
 80065f6:	4618      	movlt	r0, r3
 80065f8:	e731      	b.n	800645e <_printf_float+0xba>
 80065fa:	2301      	movs	r3, #1
 80065fc:	464a      	mov	r2, r9
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f af28 	beq.w	800645a <_printf_float+0xb6>
 800660a:	f108 0801 	add.w	r8, r8, #1
 800660e:	e7e6      	b.n	80065de <_printf_float+0x23a>
 8006610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	dc38      	bgt.n	8006688 <_printf_float+0x2e4>
 8006616:	2301      	movs	r3, #1
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <_printf_float+0x2e0>)
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f af1a 	beq.w	800645a <_printf_float+0xb6>
 8006626:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800662a:	4313      	orrs	r3, r2
 800662c:	d102      	bne.n	8006634 <_printf_float+0x290>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d5d8      	bpl.n	80065e6 <_printf_float+0x242>
 8006634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af0b 	beq.w	800645a <_printf_float+0xb6>
 8006644:	f04f 0900 	mov.w	r9, #0
 8006648:	f104 0a1a 	add.w	sl, r4, #26
 800664c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664e:	425b      	negs	r3, r3
 8006650:	454b      	cmp	r3, r9
 8006652:	dc01      	bgt.n	8006658 <_printf_float+0x2b4>
 8006654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006656:	e794      	b.n	8006582 <_printf_float+0x1de>
 8006658:	2301      	movs	r3, #1
 800665a:	4652      	mov	r2, sl
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f aef9 	beq.w	800645a <_printf_float+0xb6>
 8006668:	f109 0901 	add.w	r9, r9, #1
 800666c:	e7ee      	b.n	800664c <_printf_float+0x2a8>
 800666e:	bf00      	nop
 8006670:	7fefffff 	.word	0x7fefffff
 8006674:	080091bc 	.word	0x080091bc
 8006678:	080091c0 	.word	0x080091c0
 800667c:	080091c4 	.word	0x080091c4
 8006680:	080091c8 	.word	0x080091c8
 8006684:	080091cc 	.word	0x080091cc
 8006688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800668a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800668c:	429a      	cmp	r2, r3
 800668e:	bfa8      	it	ge
 8006690:	461a      	movge	r2, r3
 8006692:	2a00      	cmp	r2, #0
 8006694:	4691      	mov	r9, r2
 8006696:	dc37      	bgt.n	8006708 <_printf_float+0x364>
 8006698:	f04f 0b00 	mov.w	fp, #0
 800669c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a0:	f104 021a 	add.w	r2, r4, #26
 80066a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066a8:	ebaa 0309 	sub.w	r3, sl, r9
 80066ac:	455b      	cmp	r3, fp
 80066ae:	dc33      	bgt.n	8006718 <_printf_float+0x374>
 80066b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066b4:	429a      	cmp	r2, r3
 80066b6:	db3b      	blt.n	8006730 <_printf_float+0x38c>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	07da      	lsls	r2, r3, #31
 80066bc:	d438      	bmi.n	8006730 <_printf_float+0x38c>
 80066be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80066c2:	eba2 0903 	sub.w	r9, r2, r3
 80066c6:	eba2 020a 	sub.w	r2, r2, sl
 80066ca:	4591      	cmp	r9, r2
 80066cc:	bfa8      	it	ge
 80066ce:	4691      	movge	r9, r2
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	dc34      	bgt.n	8006740 <_printf_float+0x39c>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066de:	f104 0a1a 	add.w	sl, r4, #26
 80066e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	eba3 0309 	sub.w	r3, r3, r9
 80066ec:	4543      	cmp	r3, r8
 80066ee:	f77f af7a 	ble.w	80065e6 <_printf_float+0x242>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f aeac 	beq.w	800645a <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	e7ec      	b.n	80066e2 <_printf_float+0x33e>
 8006708:	4613      	mov	r3, r2
 800670a:	4631      	mov	r1, r6
 800670c:	4642      	mov	r2, r8
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	d1c0      	bne.n	8006698 <_printf_float+0x2f4>
 8006716:	e6a0      	b.n	800645a <_printf_float+0xb6>
 8006718:	2301      	movs	r3, #1
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f ae99 	beq.w	800645a <_printf_float+0xb6>
 8006728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800672a:	f10b 0b01 	add.w	fp, fp, #1
 800672e:	e7b9      	b.n	80066a4 <_printf_float+0x300>
 8006730:	4631      	mov	r1, r6
 8006732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006736:	4628      	mov	r0, r5
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	d1bf      	bne.n	80066be <_printf_float+0x31a>
 800673e:	e68c      	b.n	800645a <_printf_float+0xb6>
 8006740:	464b      	mov	r3, r9
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	eb08 020a 	add.w	r2, r8, sl
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	d1c2      	bne.n	80066d6 <_printf_float+0x332>
 8006750:	e683      	b.n	800645a <_printf_float+0xb6>
 8006752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006754:	2a01      	cmp	r2, #1
 8006756:	dc01      	bgt.n	800675c <_printf_float+0x3b8>
 8006758:	07db      	lsls	r3, r3, #31
 800675a:	d539      	bpl.n	80067d0 <_printf_float+0x42c>
 800675c:	2301      	movs	r3, #1
 800675e:	4642      	mov	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f ae77 	beq.w	800645a <_printf_float+0xb6>
 800676c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f ae6f 	beq.w	800645a <_printf_float+0xb6>
 800677c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006788:	f7fa f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800678c:	b9d8      	cbnz	r0, 80067c6 <_printf_float+0x422>
 800678e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006792:	f108 0201 	add.w	r2, r8, #1
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	d10e      	bne.n	80067be <_printf_float+0x41a>
 80067a0:	e65b      	b.n	800645a <_printf_float+0xb6>
 80067a2:	2301      	movs	r3, #1
 80067a4:	464a      	mov	r2, r9
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae54 	beq.w	800645a <_printf_float+0xb6>
 80067b2:	f108 0801 	add.w	r8, r8, #1
 80067b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b8:	3b01      	subs	r3, #1
 80067ba:	4543      	cmp	r3, r8
 80067bc:	dcf1      	bgt.n	80067a2 <_printf_float+0x3fe>
 80067be:	4653      	mov	r3, sl
 80067c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067c4:	e6de      	b.n	8006584 <_printf_float+0x1e0>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	f104 091a 	add.w	r9, r4, #26
 80067ce:	e7f2      	b.n	80067b6 <_printf_float+0x412>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4642      	mov	r2, r8
 80067d4:	e7df      	b.n	8006796 <_printf_float+0x3f2>
 80067d6:	2301      	movs	r3, #1
 80067d8:	464a      	mov	r2, r9
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae3a 	beq.w	800645a <_printf_float+0xb6>
 80067e6:	f108 0801 	add.w	r8, r8, #1
 80067ea:	68e3      	ldr	r3, [r4, #12]
 80067ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067ee:	1a5b      	subs	r3, r3, r1
 80067f0:	4543      	cmp	r3, r8
 80067f2:	dcf0      	bgt.n	80067d6 <_printf_float+0x432>
 80067f4:	e6fb      	b.n	80065ee <_printf_float+0x24a>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0919 	add.w	r9, r4, #25
 80067fe:	e7f4      	b.n	80067ea <_printf_float+0x446>

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4699      	mov	r9, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	4607      	mov	r7, r0
 800680e:	4293      	cmp	r3, r2
 8006810:	bfb8      	it	lt
 8006812:	4613      	movlt	r3, r2
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800681a:	460c      	mov	r4, r1
 800681c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc2b      	bgt.n	80068a0 <_printf_common+0xa0>
 8006848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800684c:	1e13      	subs	r3, r2, #0
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d430      	bmi.n	80068ba <_printf_common+0xba>
 8006858:	4649      	mov	r1, r9
 800685a:	4638      	mov	r0, r7
 800685c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d023      	beq.n	80068ae <_printf_common+0xae>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf14      	ite	ne
 8006872:	2500      	movne	r5, #0
 8006874:	6833      	ldreq	r3, [r6, #0]
 8006876:	f04f 0600 	mov.w	r6, #0
 800687a:	bf08      	it	eq
 800687c:	68e5      	ldreq	r5, [r4, #12]
 800687e:	f104 041a 	add.w	r4, r4, #26
 8006882:	bf08      	it	eq
 8006884:	1aed      	subeq	r5, r5, r3
 8006886:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800688a:	bf08      	it	eq
 800688c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006890:	4293      	cmp	r3, r2
 8006892:	bfc4      	itt	gt
 8006894:	1a9b      	subgt	r3, r3, r2
 8006896:	18ed      	addgt	r5, r5, r3
 8006898:	42b5      	cmp	r5, r6
 800689a:	d11a      	bne.n	80068d2 <_printf_common+0xd2>
 800689c:	2000      	movs	r0, #0
 800689e:	e008      	b.n	80068b2 <_printf_common+0xb2>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4652      	mov	r2, sl
 80068a4:	4649      	mov	r1, r9
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c0      	blx	r8
 80068aa:	3001      	adds	r0, #1
 80068ac:	d103      	bne.n	80068b6 <_printf_common+0xb6>
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b6:	3501      	adds	r5, #1
 80068b8:	e7c1      	b.n	800683e <_printf_common+0x3e>
 80068ba:	2030      	movs	r0, #48	; 0x30
 80068bc:	18e1      	adds	r1, r4, r3
 80068be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c8:	4422      	add	r2, r4
 80068ca:	3302      	adds	r3, #2
 80068cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068d0:	e7c2      	b.n	8006858 <_printf_common+0x58>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4622      	mov	r2, r4
 80068d6:	4649      	mov	r1, r9
 80068d8:	4638      	mov	r0, r7
 80068da:	47c0      	blx	r8
 80068dc:	3001      	adds	r0, #1
 80068de:	d0e6      	beq.n	80068ae <_printf_common+0xae>
 80068e0:	3601      	adds	r6, #1
 80068e2:	e7d9      	b.n	8006898 <_printf_common+0x98>

080068e4 <_printf_i>:
 80068e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	7e0f      	ldrb	r7, [r1, #24]
 80068ea:	4691      	mov	r9, r2
 80068ec:	2f78      	cmp	r7, #120	; 0x78
 80068ee:	4680      	mov	r8, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	469a      	mov	sl, r3
 80068f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068fa:	d807      	bhi.n	800690c <_printf_i+0x28>
 80068fc:	2f62      	cmp	r7, #98	; 0x62
 80068fe:	d80a      	bhi.n	8006916 <_printf_i+0x32>
 8006900:	2f00      	cmp	r7, #0
 8006902:	f000 80d5 	beq.w	8006ab0 <_printf_i+0x1cc>
 8006906:	2f58      	cmp	r7, #88	; 0x58
 8006908:	f000 80c1 	beq.w	8006a8e <_printf_i+0x1aa>
 800690c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006914:	e03a      	b.n	800698c <_printf_i+0xa8>
 8006916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800691a:	2b15      	cmp	r3, #21
 800691c:	d8f6      	bhi.n	800690c <_printf_i+0x28>
 800691e:	a101      	add	r1, pc, #4	; (adr r1, 8006924 <_printf_i+0x40>)
 8006920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006924:	0800697d 	.word	0x0800697d
 8006928:	08006991 	.word	0x08006991
 800692c:	0800690d 	.word	0x0800690d
 8006930:	0800690d 	.word	0x0800690d
 8006934:	0800690d 	.word	0x0800690d
 8006938:	0800690d 	.word	0x0800690d
 800693c:	08006991 	.word	0x08006991
 8006940:	0800690d 	.word	0x0800690d
 8006944:	0800690d 	.word	0x0800690d
 8006948:	0800690d 	.word	0x0800690d
 800694c:	0800690d 	.word	0x0800690d
 8006950:	08006a97 	.word	0x08006a97
 8006954:	080069bd 	.word	0x080069bd
 8006958:	08006a51 	.word	0x08006a51
 800695c:	0800690d 	.word	0x0800690d
 8006960:	0800690d 	.word	0x0800690d
 8006964:	08006ab9 	.word	0x08006ab9
 8006968:	0800690d 	.word	0x0800690d
 800696c:	080069bd 	.word	0x080069bd
 8006970:	0800690d 	.word	0x0800690d
 8006974:	0800690d 	.word	0x0800690d
 8006978:	08006a59 	.word	0x08006a59
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	602a      	str	r2, [r5, #0]
 8006984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800698c:	2301      	movs	r3, #1
 800698e:	e0a0      	b.n	8006ad2 <_printf_i+0x1ee>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	0607      	lsls	r7, r0, #24
 8006996:	f103 0104 	add.w	r1, r3, #4
 800699a:	6029      	str	r1, [r5, #0]
 800699c:	d501      	bpl.n	80069a2 <_printf_i+0xbe>
 800699e:	681e      	ldr	r6, [r3, #0]
 80069a0:	e003      	b.n	80069aa <_printf_i+0xc6>
 80069a2:	0646      	lsls	r6, r0, #25
 80069a4:	d5fb      	bpl.n	800699e <_printf_i+0xba>
 80069a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	da03      	bge.n	80069b6 <_printf_i+0xd2>
 80069ae:	232d      	movs	r3, #45	; 0x2d
 80069b0:	4276      	negs	r6, r6
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b6:	230a      	movs	r3, #10
 80069b8:	4859      	ldr	r0, [pc, #356]	; (8006b20 <_printf_i+0x23c>)
 80069ba:	e012      	b.n	80069e2 <_printf_i+0xfe>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	1d19      	adds	r1, r3, #4
 80069c2:	6029      	str	r1, [r5, #0]
 80069c4:	0605      	lsls	r5, r0, #24
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0xe8>
 80069c8:	681e      	ldr	r6, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0xee>
 80069cc:	0641      	lsls	r1, r0, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0xe4>
 80069d0:	881e      	ldrh	r6, [r3, #0]
 80069d2:	2f6f      	cmp	r7, #111	; 0x6f
 80069d4:	bf0c      	ite	eq
 80069d6:	2308      	moveq	r3, #8
 80069d8:	230a      	movne	r3, #10
 80069da:	4851      	ldr	r0, [pc, #324]	; (8006b20 <_printf_i+0x23c>)
 80069dc:	2100      	movs	r1, #0
 80069de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069e2:	6865      	ldr	r5, [r4, #4]
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	bfa8      	it	ge
 80069e8:	6821      	ldrge	r1, [r4, #0]
 80069ea:	60a5      	str	r5, [r4, #8]
 80069ec:	bfa4      	itt	ge
 80069ee:	f021 0104 	bicge.w	r1, r1, #4
 80069f2:	6021      	strge	r1, [r4, #0]
 80069f4:	b90e      	cbnz	r6, 80069fa <_printf_i+0x116>
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	d04b      	beq.n	8006a92 <_printf_i+0x1ae>
 80069fa:	4615      	mov	r5, r2
 80069fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a00:	fb03 6711 	mls	r7, r3, r1, r6
 8006a04:	5dc7      	ldrb	r7, [r0, r7]
 8006a06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a0a:	4637      	mov	r7, r6
 8006a0c:	42bb      	cmp	r3, r7
 8006a0e:	460e      	mov	r6, r1
 8006a10:	d9f4      	bls.n	80069fc <_printf_i+0x118>
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d10b      	bne.n	8006a2e <_printf_i+0x14a>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	07de      	lsls	r6, r3, #31
 8006a1a:	d508      	bpl.n	8006a2e <_printf_i+0x14a>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	6861      	ldr	r1, [r4, #4]
 8006a20:	4299      	cmp	r1, r3
 8006a22:	bfde      	ittt	le
 8006a24:	2330      	movle	r3, #48	; 0x30
 8006a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2e:	1b52      	subs	r2, r2, r5
 8006a30:	6122      	str	r2, [r4, #16]
 8006a32:	464b      	mov	r3, r9
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f8cd a000 	str.w	sl, [sp]
 8006a3c:	aa03      	add	r2, sp, #12
 8006a3e:	f7ff fedf 	bl	8006800 <_printf_common>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d14a      	bne.n	8006adc <_printf_i+0x1f8>
 8006a46:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4a:	b004      	add	sp, #16
 8006a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	f043 0320 	orr.w	r3, r3, #32
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	2778      	movs	r7, #120	; 0x78
 8006a5a:	4832      	ldr	r0, [pc, #200]	; (8006b24 <_printf_i+0x240>)
 8006a5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	6829      	ldr	r1, [r5, #0]
 8006a64:	061f      	lsls	r7, r3, #24
 8006a66:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a6a:	d402      	bmi.n	8006a72 <_printf_i+0x18e>
 8006a6c:	065f      	lsls	r7, r3, #25
 8006a6e:	bf48      	it	mi
 8006a70:	b2b6      	uxthmi	r6, r6
 8006a72:	07df      	lsls	r7, r3, #31
 8006a74:	bf48      	it	mi
 8006a76:	f043 0320 	orrmi.w	r3, r3, #32
 8006a7a:	6029      	str	r1, [r5, #0]
 8006a7c:	bf48      	it	mi
 8006a7e:	6023      	strmi	r3, [r4, #0]
 8006a80:	b91e      	cbnz	r6, 8006a8a <_printf_i+0x1a6>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	e7a6      	b.n	80069dc <_printf_i+0xf8>
 8006a8e:	4824      	ldr	r0, [pc, #144]	; (8006b20 <_printf_i+0x23c>)
 8006a90:	e7e4      	b.n	8006a5c <_printf_i+0x178>
 8006a92:	4615      	mov	r5, r2
 8006a94:	e7bd      	b.n	8006a12 <_printf_i+0x12e>
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	6826      	ldr	r6, [r4, #0]
 8006a9a:	1d18      	adds	r0, r3, #4
 8006a9c:	6961      	ldr	r1, [r4, #20]
 8006a9e:	6028      	str	r0, [r5, #0]
 8006aa0:	0635      	lsls	r5, r6, #24
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	d501      	bpl.n	8006aaa <_printf_i+0x1c6>
 8006aa6:	6019      	str	r1, [r3, #0]
 8006aa8:	e002      	b.n	8006ab0 <_printf_i+0x1cc>
 8006aaa:	0670      	lsls	r0, r6, #25
 8006aac:	d5fb      	bpl.n	8006aa6 <_printf_i+0x1c2>
 8006aae:	8019      	strh	r1, [r3, #0]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4615      	mov	r5, r2
 8006ab4:	6123      	str	r3, [r4, #16]
 8006ab6:	e7bc      	b.n	8006a32 <_printf_i+0x14e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	2100      	movs	r1, #0
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	602a      	str	r2, [r5, #0]
 8006ac0:	681d      	ldr	r5, [r3, #0]
 8006ac2:	6862      	ldr	r2, [r4, #4]
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 f9d4 	bl	8006e72 <memchr>
 8006aca:	b108      	cbz	r0, 8006ad0 <_printf_i+0x1ec>
 8006acc:	1b40      	subs	r0, r0, r5
 8006ace:	6060      	str	r0, [r4, #4]
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	6123      	str	r3, [r4, #16]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ada:	e7aa      	b.n	8006a32 <_printf_i+0x14e>
 8006adc:	462a      	mov	r2, r5
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	47d0      	blx	sl
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d0ad      	beq.n	8006a46 <_printf_i+0x162>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	079b      	lsls	r3, r3, #30
 8006aee:	d413      	bmi.n	8006b18 <_printf_i+0x234>
 8006af0:	68e0      	ldr	r0, [r4, #12]
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	4298      	cmp	r0, r3
 8006af6:	bfb8      	it	lt
 8006af8:	4618      	movlt	r0, r3
 8006afa:	e7a6      	b.n	8006a4a <_printf_i+0x166>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4632      	mov	r2, r6
 8006b00:	4649      	mov	r1, r9
 8006b02:	4640      	mov	r0, r8
 8006b04:	47d0      	blx	sl
 8006b06:	3001      	adds	r0, #1
 8006b08:	d09d      	beq.n	8006a46 <_printf_i+0x162>
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	68e3      	ldr	r3, [r4, #12]
 8006b0e:	9903      	ldr	r1, [sp, #12]
 8006b10:	1a5b      	subs	r3, r3, r1
 8006b12:	42ab      	cmp	r3, r5
 8006b14:	dcf2      	bgt.n	8006afc <_printf_i+0x218>
 8006b16:	e7eb      	b.n	8006af0 <_printf_i+0x20c>
 8006b18:	2500      	movs	r5, #0
 8006b1a:	f104 0619 	add.w	r6, r4, #25
 8006b1e:	e7f5      	b.n	8006b0c <_printf_i+0x228>
 8006b20:	080091ce 	.word	0x080091ce
 8006b24:	080091df 	.word	0x080091df

08006b28 <std>:
 8006b28:	2300      	movs	r3, #0
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b36:	6083      	str	r3, [r0, #8]
 8006b38:	8181      	strh	r1, [r0, #12]
 8006b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b3c:	81c2      	strh	r2, [r0, #14]
 8006b3e:	6183      	str	r3, [r0, #24]
 8006b40:	4619      	mov	r1, r3
 8006b42:	2208      	movs	r2, #8
 8006b44:	305c      	adds	r0, #92	; 0x5c
 8006b46:	f000 f914 	bl	8006d72 <memset>
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <std+0x58>)
 8006b4c:	6224      	str	r4, [r4, #32]
 8006b4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <std+0x5c>)
 8006b52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b54:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <std+0x60>)
 8006b56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <std+0x64>)
 8006b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <std+0x68>)
 8006b5e:	429c      	cmp	r4, r3
 8006b60:	d006      	beq.n	8006b70 <std+0x48>
 8006b62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b66:	4294      	cmp	r4, r2
 8006b68:	d002      	beq.n	8006b70 <std+0x48>
 8006b6a:	33d0      	adds	r3, #208	; 0xd0
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d105      	bne.n	8006b7c <std+0x54>
 8006b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	f000 b978 	b.w	8006e6c <__retarget_lock_init_recursive>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	bf00      	nop
 8006b80:	08006ced 	.word	0x08006ced
 8006b84:	08006d0f 	.word	0x08006d0f
 8006b88:	08006d47 	.word	0x08006d47
 8006b8c:	08006d6b 	.word	0x08006d6b
 8006b90:	2000039c 	.word	0x2000039c

08006b94 <stdio_exit_handler>:
 8006b94:	4a02      	ldr	r2, [pc, #8]	; (8006ba0 <stdio_exit_handler+0xc>)
 8006b96:	4903      	ldr	r1, [pc, #12]	; (8006ba4 <stdio_exit_handler+0x10>)
 8006b98:	4803      	ldr	r0, [pc, #12]	; (8006ba8 <stdio_exit_handler+0x14>)
 8006b9a:	f000 b869 	b.w	8006c70 <_fwalk_sglue>
 8006b9e:	bf00      	nop
 8006ba0:	20000010 	.word	0x20000010
 8006ba4:	08008805 	.word	0x08008805
 8006ba8:	2000001c 	.word	0x2000001c

08006bac <cleanup_stdio>:
 8006bac:	6841      	ldr	r1, [r0, #4]
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <cleanup_stdio+0x34>)
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	d001      	beq.n	8006bbc <cleanup_stdio+0x10>
 8006bb8:	f001 fe24 	bl	8008804 <_fflush_r>
 8006bbc:	68a1      	ldr	r1, [r4, #8]
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <cleanup_stdio+0x38>)
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d002      	beq.n	8006bca <cleanup_stdio+0x1e>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f001 fe1d 	bl	8008804 <_fflush_r>
 8006bca:	68e1      	ldr	r1, [r4, #12]
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <cleanup_stdio+0x3c>)
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	d004      	beq.n	8006bdc <cleanup_stdio+0x30>
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd8:	f001 be14 	b.w	8008804 <_fflush_r>
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	2000039c 	.word	0x2000039c
 8006be4:	20000404 	.word	0x20000404
 8006be8:	2000046c 	.word	0x2000046c

08006bec <global_stdio_init.part.0>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <global_stdio_init.part.0+0x30>)
 8006bf0:	4c0b      	ldr	r4, [pc, #44]	; (8006c20 <global_stdio_init.part.0+0x34>)
 8006bf2:	4a0c      	ldr	r2, [pc, #48]	; (8006c24 <global_stdio_init.part.0+0x38>)
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7ff ff94 	bl	8006b28 <std>
 8006c00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c04:	2201      	movs	r2, #1
 8006c06:	2109      	movs	r1, #9
 8006c08:	f7ff ff8e 	bl	8006b28 <std>
 8006c0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c10:	2202      	movs	r2, #2
 8006c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c16:	2112      	movs	r1, #18
 8006c18:	f7ff bf86 	b.w	8006b28 <std>
 8006c1c:	200004d4 	.word	0x200004d4
 8006c20:	2000039c 	.word	0x2000039c
 8006c24:	08006b95 	.word	0x08006b95

08006c28 <__sfp_lock_acquire>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sfp_lock_acquire+0x8>)
 8006c2a:	f000 b920 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200004dd 	.word	0x200004dd

08006c34 <__sfp_lock_release>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__sfp_lock_release+0x8>)
 8006c36:	f000 b91b 	b.w	8006e70 <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	200004dd 	.word	0x200004dd

08006c40 <__sinit>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4604      	mov	r4, r0
 8006c44:	f7ff fff0 	bl	8006c28 <__sfp_lock_acquire>
 8006c48:	6a23      	ldr	r3, [r4, #32]
 8006c4a:	b11b      	cbz	r3, 8006c54 <__sinit+0x14>
 8006c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c50:	f7ff bff0 	b.w	8006c34 <__sfp_lock_release>
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <__sinit+0x28>)
 8006c56:	6223      	str	r3, [r4, #32]
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <__sinit+0x2c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f5      	bne.n	8006c4c <__sinit+0xc>
 8006c60:	f7ff ffc4 	bl	8006bec <global_stdio_init.part.0>
 8006c64:	e7f2      	b.n	8006c4c <__sinit+0xc>
 8006c66:	bf00      	nop
 8006c68:	08006bad 	.word	0x08006bad
 8006c6c:	200004d4 	.word	0x200004d4

08006c70 <_fwalk_sglue>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	4607      	mov	r7, r0
 8006c76:	4688      	mov	r8, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c80:	f1b9 0901 	subs.w	r9, r9, #1
 8006c84:	d505      	bpl.n	8006c92 <_fwalk_sglue+0x22>
 8006c86:	6824      	ldr	r4, [r4, #0]
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	d1f7      	bne.n	8006c7c <_fwalk_sglue+0xc>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c92:	89ab      	ldrh	r3, [r5, #12]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d907      	bls.n	8006ca8 <_fwalk_sglue+0x38>
 8006c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	d003      	beq.n	8006ca8 <_fwalk_sglue+0x38>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	47c0      	blx	r8
 8006ca6:	4306      	orrs	r6, r0
 8006ca8:	3568      	adds	r5, #104	; 0x68
 8006caa:	e7e9      	b.n	8006c80 <_fwalk_sglue+0x10>

08006cac <siprintf>:
 8006cac:	b40e      	push	{r1, r2, r3}
 8006cae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cb2:	b500      	push	{lr}
 8006cb4:	b09c      	sub	sp, #112	; 0x70
 8006cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cb8:	9002      	str	r0, [sp, #8]
 8006cba:	9006      	str	r0, [sp, #24]
 8006cbc:	9107      	str	r1, [sp, #28]
 8006cbe:	9104      	str	r1, [sp, #16]
 8006cc0:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <siprintf+0x38>)
 8006cc2:	4909      	ldr	r1, [pc, #36]	; (8006ce8 <siprintf+0x3c>)
 8006cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc8:	9105      	str	r1, [sp, #20]
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	a902      	add	r1, sp, #8
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f001 fc18 	bl	8008504 <_svfiprintf_r>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	b01c      	add	sp, #112	; 0x70
 8006cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce0:	b003      	add	sp, #12
 8006ce2:	4770      	bx	lr
 8006ce4:	20000068 	.word	0x20000068
 8006ce8:	ffff0208 	.word	0xffff0208

08006cec <__sread>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	f000 f86c 	bl	8006dd0 <_read_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	bfab      	itete	ge
 8006cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006d00:	181b      	addge	r3, r3, r0
 8006d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d06:	bfac      	ite	ge
 8006d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d0a:	81a3      	strhlt	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__swrite>:
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	461f      	mov	r7, r3
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	4605      	mov	r5, r0
 8006d18:	05db      	lsls	r3, r3, #23
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	d505      	bpl.n	8006d2c <__swrite+0x1e>
 8006d20:	2302      	movs	r3, #2
 8006d22:	2200      	movs	r2, #0
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	f000 f840 	bl	8006dac <_lseek_r>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	4632      	mov	r2, r6
 8006d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d34:	81a3      	strh	r3, [r4, #12]
 8006d36:	4628      	mov	r0, r5
 8006d38:	463b      	mov	r3, r7
 8006d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	f000 b857 	b.w	8006df4 <_write_r>

08006d46 <__sseek>:
 8006d46:	b510      	push	{r4, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 f82d 	bl	8006dac <_lseek_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	bf15      	itete	ne
 8006d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d62:	81a3      	strheq	r3, [r4, #12]
 8006d64:	bf18      	it	ne
 8006d66:	81a3      	strhne	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__sclose>:
 8006d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6e:	f000 b80d 	b.w	8006d8c <_close_r>

08006d72 <memset>:
 8006d72:	4603      	mov	r3, r0
 8006d74:	4402      	add	r2, r0
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d100      	bne.n	8006d7c <memset+0xa>
 8006d7a:	4770      	bx	lr
 8006d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d80:	e7f9      	b.n	8006d76 <memset+0x4>
	...

08006d84 <_localeconv_r>:
 8006d84:	4800      	ldr	r0, [pc, #0]	; (8006d88 <_localeconv_r+0x4>)
 8006d86:	4770      	bx	lr
 8006d88:	2000015c 	.word	0x2000015c

08006d8c <_close_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4d05      	ldr	r5, [pc, #20]	; (8006da8 <_close_r+0x1c>)
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fb f892 	bl	8001ec0 <_close>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_close_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_close_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	200004d8 	.word	0x200004d8

08006dac <_lseek_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	4d05      	ldr	r5, [pc, #20]	; (8006dcc <_lseek_r+0x20>)
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f7fb f8a4 	bl	8001f08 <_lseek>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_lseek_r+0x1e>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_lseek_r+0x1e>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	200004d8 	.word	0x200004d8

08006dd0 <_read_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4d05      	ldr	r5, [pc, #20]	; (8006df0 <_read_r+0x20>)
 8006ddc:	602a      	str	r2, [r5, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f7fb f835 	bl	8001e4e <_read>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_read_r+0x1e>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_read_r+0x1e>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	200004d8 	.word	0x200004d8

08006df4 <_write_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4d05      	ldr	r5, [pc, #20]	; (8006e14 <_write_r+0x20>)
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7fb f840 	bl	8001e88 <_write>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_write_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_write_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200004d8 	.word	0x200004d8

08006e18 <__errno>:
 8006e18:	4b01      	ldr	r3, [pc, #4]	; (8006e20 <__errno+0x8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000068 	.word	0x20000068

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	2600      	movs	r6, #0
 8006e28:	4d0c      	ldr	r5, [pc, #48]	; (8006e5c <__libc_init_array+0x38>)
 8006e2a:	4c0d      	ldr	r4, [pc, #52]	; (8006e60 <__libc_init_array+0x3c>)
 8006e2c:	1b64      	subs	r4, r4, r5
 8006e2e:	10a4      	asrs	r4, r4, #2
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	f002 f886 	bl	8008f44 <_init>
 8006e38:	2600      	movs	r6, #0
 8006e3a:	4d0a      	ldr	r5, [pc, #40]	; (8006e64 <__libc_init_array+0x40>)
 8006e3c:	4c0a      	ldr	r4, [pc, #40]	; (8006e68 <__libc_init_array+0x44>)
 8006e3e:	1b64      	subs	r4, r4, r5
 8006e40:	10a4      	asrs	r4, r4, #2
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4c:	4798      	blx	r3
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e56:	4798      	blx	r3
 8006e58:	3601      	adds	r6, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	0800952c 	.word	0x0800952c
 8006e60:	0800952c 	.word	0x0800952c
 8006e64:	0800952c 	.word	0x0800952c
 8006e68:	08009530 	.word	0x08009530

08006e6c <__retarget_lock_init_recursive>:
 8006e6c:	4770      	bx	lr

08006e6e <__retarget_lock_acquire_recursive>:
 8006e6e:	4770      	bx	lr

08006e70 <__retarget_lock_release_recursive>:
 8006e70:	4770      	bx	lr

08006e72 <memchr>:
 8006e72:	4603      	mov	r3, r0
 8006e74:	b510      	push	{r4, lr}
 8006e76:	b2c9      	uxtb	r1, r1
 8006e78:	4402      	add	r2, r0
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	d101      	bne.n	8006e84 <memchr+0x12>
 8006e80:	2000      	movs	r0, #0
 8006e82:	e003      	b.n	8006e8c <memchr+0x1a>
 8006e84:	7804      	ldrb	r4, [r0, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	428c      	cmp	r4, r1
 8006e8a:	d1f6      	bne.n	8006e7a <memchr+0x8>
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <quorem>:
 8006e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e92:	6903      	ldr	r3, [r0, #16]
 8006e94:	690c      	ldr	r4, [r1, #16]
 8006e96:	4607      	mov	r7, r0
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	db7f      	blt.n	8006f9c <quorem+0x10e>
 8006e9c:	3c01      	subs	r4, #1
 8006e9e:	f100 0514 	add.w	r5, r0, #20
 8006ea2:	f101 0814 	add.w	r8, r1, #20
 8006ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ec4:	d331      	bcc.n	8006f2a <quorem+0x9c>
 8006ec6:	f04f 0e00 	mov.w	lr, #0
 8006eca:	4640      	mov	r0, r8
 8006ecc:	46ac      	mov	ip, r5
 8006ece:	46f2      	mov	sl, lr
 8006ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ed4:	b293      	uxth	r3, r2
 8006ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8006eda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ede:	0c1a      	lsrs	r2, r3, #16
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	fb06 220e 	mla	r2, r6, lr, r2
 8006ee6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eea:	f8dc a000 	ldr.w	sl, [ip]
 8006eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ef2:	fa1f fa8a 	uxth.w	sl, sl
 8006ef6:	4453      	add	r3, sl
 8006ef8:	f8dc a000 	ldr.w	sl, [ip]
 8006efc:	b292      	uxth	r2, r2
 8006efe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0c:	4581      	cmp	r9, r0
 8006f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f12:	f84c 3b04 	str.w	r3, [ip], #4
 8006f16:	d2db      	bcs.n	8006ed0 <quorem+0x42>
 8006f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f1c:	b92b      	cbnz	r3, 8006f2a <quorem+0x9c>
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	429d      	cmp	r5, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	d32d      	bcc.n	8006f84 <quorem+0xf6>
 8006f28:	613c      	str	r4, [r7, #16]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f001 f992 	bl	8008254 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	db23      	blt.n	8006f7c <quorem+0xee>
 8006f34:	4629      	mov	r1, r5
 8006f36:	2000      	movs	r0, #0
 8006f38:	3601      	adds	r6, #1
 8006f3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f3e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f42:	b293      	uxth	r3, r2
 8006f44:	1ac3      	subs	r3, r0, r3
 8006f46:	0c12      	lsrs	r2, r2, #16
 8006f48:	fa1f f08c 	uxth.w	r0, ip
 8006f4c:	4403      	add	r3, r0
 8006f4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5c:	45c1      	cmp	r9, r8
 8006f5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f62:	f841 3b04 	str.w	r3, [r1], #4
 8006f66:	d2e8      	bcs.n	8006f3a <quorem+0xac>
 8006f68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f70:	b922      	cbnz	r2, 8006f7c <quorem+0xee>
 8006f72:	3b04      	subs	r3, #4
 8006f74:	429d      	cmp	r5, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	d30a      	bcc.n	8006f90 <quorem+0x102>
 8006f7a:	613c      	str	r4, [r7, #16]
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	b003      	add	sp, #12
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	d1cd      	bne.n	8006f28 <quorem+0x9a>
 8006f8c:	3c01      	subs	r4, #1
 8006f8e:	e7c8      	b.n	8006f22 <quorem+0x94>
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	3b04      	subs	r3, #4
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d1f0      	bne.n	8006f7a <quorem+0xec>
 8006f98:	3c01      	subs	r4, #1
 8006f9a:	e7eb      	b.n	8006f74 <quorem+0xe6>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7ee      	b.n	8006f7e <quorem+0xf0>

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	69c4      	ldr	r4, [r0, #28]
 8006faa:	b099      	sub	sp, #100	; 0x64
 8006fac:	4605      	mov	r5, r0
 8006fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006fb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006fb6:	b974      	cbnz	r4, 8006fd6 <_dtoa_r+0x36>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f000 fe1d 	bl	8007bf8 <malloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	61e8      	str	r0, [r5, #28]
 8006fc2:	b920      	cbnz	r0, 8006fce <_dtoa_r+0x2e>
 8006fc4:	21ef      	movs	r1, #239	; 0xef
 8006fc6:	4bac      	ldr	r3, [pc, #688]	; (8007278 <_dtoa_r+0x2d8>)
 8006fc8:	48ac      	ldr	r0, [pc, #688]	; (800727c <_dtoa_r+0x2dc>)
 8006fca:	f001 fc7b 	bl	80088c4 <__assert_func>
 8006fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd2:	6004      	str	r4, [r0, #0]
 8006fd4:	60c4      	str	r4, [r0, #12]
 8006fd6:	69eb      	ldr	r3, [r5, #28]
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	b151      	cbz	r1, 8006ff2 <_dtoa_r+0x52>
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4093      	lsls	r3, r2
 8006fe2:	604a      	str	r2, [r1, #4]
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 fefa 	bl	8007de0 <_Bfree>
 8006fec:	2200      	movs	r2, #0
 8006fee:	69eb      	ldr	r3, [r5, #28]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	1e3b      	subs	r3, r7, #0
 8006ff4:	bfaf      	iteee	ge
 8006ff6:	2300      	movge	r3, #0
 8006ff8:	2201      	movlt	r2, #1
 8006ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	9305      	strlt	r3, [sp, #20]
 8007000:	bfa8      	it	ge
 8007002:	f8c8 3000 	strge.w	r3, [r8]
 8007006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800700a:	4b9d      	ldr	r3, [pc, #628]	; (8007280 <_dtoa_r+0x2e0>)
 800700c:	bfb8      	it	lt
 800700e:	f8c8 2000 	strlt.w	r2, [r8]
 8007012:	ea33 0309 	bics.w	r3, r3, r9
 8007016:	d119      	bne.n	800704c <_dtoa_r+0xac>
 8007018:	f242 730f 	movw	r3, #9999	; 0x270f
 800701c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007024:	4333      	orrs	r3, r6
 8007026:	f000 8589 	beq.w	8007b3c <_dtoa_r+0xb9c>
 800702a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800702c:	b953      	cbnz	r3, 8007044 <_dtoa_r+0xa4>
 800702e:	4b95      	ldr	r3, [pc, #596]	; (8007284 <_dtoa_r+0x2e4>)
 8007030:	e023      	b.n	800707a <_dtoa_r+0xda>
 8007032:	4b95      	ldr	r3, [pc, #596]	; (8007288 <_dtoa_r+0x2e8>)
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	3308      	adds	r3, #8
 8007038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	9803      	ldr	r0, [sp, #12]
 800703e:	b019      	add	sp, #100	; 0x64
 8007040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	4b8f      	ldr	r3, [pc, #572]	; (8007284 <_dtoa_r+0x2e4>)
 8007046:	9303      	str	r3, [sp, #12]
 8007048:	3303      	adds	r3, #3
 800704a:	e7f5      	b.n	8007038 <_dtoa_r+0x98>
 800704c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007050:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	f7f9 fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8007060:	4680      	mov	r8, r0
 8007062:	b160      	cbz	r0, 800707e <_dtoa_r+0xde>
 8007064:	2301      	movs	r3, #1
 8007066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8562 	beq.w	8007b36 <_dtoa_r+0xb96>
 8007072:	4b86      	ldr	r3, [pc, #536]	; (800728c <_dtoa_r+0x2ec>)
 8007074:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	9303      	str	r3, [sp, #12]
 800707c:	e7de      	b.n	800703c <_dtoa_r+0x9c>
 800707e:	ab16      	add	r3, sp, #88	; 0x58
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	ab17      	add	r3, sp, #92	; 0x5c
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4628      	mov	r0, r5
 8007088:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800708c:	f001 f98a 	bl	80083a4 <__d2b>
 8007090:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007094:	4682      	mov	sl, r0
 8007096:	2c00      	cmp	r4, #0
 8007098:	d07e      	beq.n	8007198 <_dtoa_r+0x1f8>
 800709a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80070b4:	4619      	mov	r1, r3
 80070b6:	2200      	movs	r2, #0
 80070b8:	4b75      	ldr	r3, [pc, #468]	; (8007290 <_dtoa_r+0x2f0>)
 80070ba:	f7f9 f855 	bl	8000168 <__aeabi_dsub>
 80070be:	a368      	add	r3, pc, #416	; (adr r3, 8007260 <_dtoa_r+0x2c0>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 fa08 	bl	80004d8 <__aeabi_dmul>
 80070c8:	a367      	add	r3, pc, #412	; (adr r3, 8007268 <_dtoa_r+0x2c8>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f84d 	bl	800016c <__adddf3>
 80070d2:	4606      	mov	r6, r0
 80070d4:	4620      	mov	r0, r4
 80070d6:	460f      	mov	r7, r1
 80070d8:	f7f9 f994 	bl	8000404 <__aeabi_i2d>
 80070dc:	a364      	add	r3, pc, #400	; (adr r3, 8007270 <_dtoa_r+0x2d0>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 f9f9 	bl	80004d8 <__aeabi_dmul>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 f83d 	bl	800016c <__adddf3>
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	f7f9 fc9f 	bl	8000a38 <__aeabi_d2iz>
 80070fa:	2200      	movs	r2, #0
 80070fc:	4683      	mov	fp, r0
 80070fe:	2300      	movs	r3, #0
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fc5a 	bl	80009bc <__aeabi_dcmplt>
 8007108:	b148      	cbz	r0, 800711e <_dtoa_r+0x17e>
 800710a:	4658      	mov	r0, fp
 800710c:	f7f9 f97a 	bl	8000404 <__aeabi_i2d>
 8007110:	4632      	mov	r2, r6
 8007112:	463b      	mov	r3, r7
 8007114:	f7f9 fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8007118:	b908      	cbnz	r0, 800711e <_dtoa_r+0x17e>
 800711a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800711e:	f1bb 0f16 	cmp.w	fp, #22
 8007122:	d857      	bhi.n	80071d4 <_dtoa_r+0x234>
 8007124:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007128:	4b5a      	ldr	r3, [pc, #360]	; (8007294 <_dtoa_r+0x2f4>)
 800712a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 fc43 	bl	80009bc <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	d04e      	beq.n	80071d8 <_dtoa_r+0x238>
 800713a:	2300      	movs	r3, #0
 800713c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007140:	930f      	str	r3, [sp, #60]	; 0x3c
 8007142:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007144:	1b1b      	subs	r3, r3, r4
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	bf46      	itte	mi
 800714a:	f1c3 0901 	rsbmi	r9, r3, #1
 800714e:	2300      	movmi	r3, #0
 8007150:	f04f 0900 	movpl.w	r9, #0
 8007154:	9209      	str	r2, [sp, #36]	; 0x24
 8007156:	bf48      	it	mi
 8007158:	9309      	strmi	r3, [sp, #36]	; 0x24
 800715a:	f1bb 0f00 	cmp.w	fp, #0
 800715e:	db3d      	blt.n	80071dc <_dtoa_r+0x23c>
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007166:	445b      	add	r3, fp
 8007168:	9309      	str	r3, [sp, #36]	; 0x24
 800716a:	2300      	movs	r3, #0
 800716c:	930a      	str	r3, [sp, #40]	; 0x28
 800716e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007170:	2b09      	cmp	r3, #9
 8007172:	d867      	bhi.n	8007244 <_dtoa_r+0x2a4>
 8007174:	2b05      	cmp	r3, #5
 8007176:	bfc4      	itt	gt
 8007178:	3b04      	subgt	r3, #4
 800717a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800717c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800717e:	bfc8      	it	gt
 8007180:	2400      	movgt	r4, #0
 8007182:	f1a3 0302 	sub.w	r3, r3, #2
 8007186:	bfd8      	it	le
 8007188:	2401      	movle	r4, #1
 800718a:	2b03      	cmp	r3, #3
 800718c:	f200 8086 	bhi.w	800729c <_dtoa_r+0x2fc>
 8007190:	e8df f003 	tbb	[pc, r3]
 8007194:	5637392c 	.word	0x5637392c
 8007198:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800719c:	441c      	add	r4, r3
 800719e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	bfc1      	itttt	gt
 80071a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80071ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80071b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80071b6:	bfd6      	itet	le
 80071b8:	f1c3 0320 	rsble	r3, r3, #32
 80071bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80071c0:	fa06 f003 	lslle.w	r0, r6, r3
 80071c4:	f7f9 f90e 	bl	80003e4 <__aeabi_ui2d>
 80071c8:	2201      	movs	r2, #1
 80071ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80071ce:	3c01      	subs	r4, #1
 80071d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80071d2:	e76f      	b.n	80070b4 <_dtoa_r+0x114>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7b3      	b.n	8007140 <_dtoa_r+0x1a0>
 80071d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80071da:	e7b2      	b.n	8007142 <_dtoa_r+0x1a2>
 80071dc:	f1cb 0300 	rsb	r3, fp, #0
 80071e0:	930a      	str	r3, [sp, #40]	; 0x28
 80071e2:	2300      	movs	r3, #0
 80071e4:	eba9 090b 	sub.w	r9, r9, fp
 80071e8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ea:	e7c0      	b.n	800716e <_dtoa_r+0x1ce>
 80071ec:	2300      	movs	r3, #0
 80071ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dc55      	bgt.n	80072a2 <_dtoa_r+0x302>
 80071f6:	2301      	movs	r3, #1
 80071f8:	461a      	mov	r2, r3
 80071fa:	9306      	str	r3, [sp, #24]
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007200:	e00b      	b.n	800721a <_dtoa_r+0x27a>
 8007202:	2301      	movs	r3, #1
 8007204:	e7f3      	b.n	80071ee <_dtoa_r+0x24e>
 8007206:	2300      	movs	r3, #0
 8007208:	930b      	str	r3, [sp, #44]	; 0x2c
 800720a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800720c:	445b      	add	r3, fp
 800720e:	9306      	str	r3, [sp, #24]
 8007210:	3301      	adds	r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	9308      	str	r3, [sp, #32]
 8007216:	bfb8      	it	lt
 8007218:	2301      	movlt	r3, #1
 800721a:	2100      	movs	r1, #0
 800721c:	2204      	movs	r2, #4
 800721e:	69e8      	ldr	r0, [r5, #28]
 8007220:	f102 0614 	add.w	r6, r2, #20
 8007224:	429e      	cmp	r6, r3
 8007226:	d940      	bls.n	80072aa <_dtoa_r+0x30a>
 8007228:	6041      	str	r1, [r0, #4]
 800722a:	4628      	mov	r0, r5
 800722c:	f000 fd98 	bl	8007d60 <_Balloc>
 8007230:	9003      	str	r0, [sp, #12]
 8007232:	2800      	cmp	r0, #0
 8007234:	d13c      	bne.n	80072b0 <_dtoa_r+0x310>
 8007236:	4602      	mov	r2, r0
 8007238:	f240 11af 	movw	r1, #431	; 0x1af
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <_dtoa_r+0x2f8>)
 800723e:	e6c3      	b.n	8006fc8 <_dtoa_r+0x28>
 8007240:	2301      	movs	r3, #1
 8007242:	e7e1      	b.n	8007208 <_dtoa_r+0x268>
 8007244:	2401      	movs	r4, #1
 8007246:	2300      	movs	r3, #0
 8007248:	940b      	str	r4, [sp, #44]	; 0x2c
 800724a:	9322      	str	r3, [sp, #136]	; 0x88
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	2200      	movs	r2, #0
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	9308      	str	r3, [sp, #32]
 8007256:	2312      	movs	r3, #18
 8007258:	e7d1      	b.n	80071fe <_dtoa_r+0x25e>
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w
 8007260:	636f4361 	.word	0x636f4361
 8007264:	3fd287a7 	.word	0x3fd287a7
 8007268:	8b60c8b3 	.word	0x8b60c8b3
 800726c:	3fc68a28 	.word	0x3fc68a28
 8007270:	509f79fb 	.word	0x509f79fb
 8007274:	3fd34413 	.word	0x3fd34413
 8007278:	080091fd 	.word	0x080091fd
 800727c:	08009214 	.word	0x08009214
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	080091f9 	.word	0x080091f9
 8007288:	080091f0 	.word	0x080091f0
 800728c:	080091cd 	.word	0x080091cd
 8007290:	3ff80000 	.word	0x3ff80000
 8007294:	08009300 	.word	0x08009300
 8007298:	0800926c 	.word	0x0800926c
 800729c:	2301      	movs	r3, #1
 800729e:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a0:	e7d4      	b.n	800724c <_dtoa_r+0x2ac>
 80072a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072a4:	9306      	str	r3, [sp, #24]
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	e7b7      	b.n	800721a <_dtoa_r+0x27a>
 80072aa:	3101      	adds	r1, #1
 80072ac:	0052      	lsls	r2, r2, #1
 80072ae:	e7b7      	b.n	8007220 <_dtoa_r+0x280>
 80072b0:	69eb      	ldr	r3, [r5, #28]
 80072b2:	9a03      	ldr	r2, [sp, #12]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	9b08      	ldr	r3, [sp, #32]
 80072b8:	2b0e      	cmp	r3, #14
 80072ba:	f200 80a8 	bhi.w	800740e <_dtoa_r+0x46e>
 80072be:	2c00      	cmp	r4, #0
 80072c0:	f000 80a5 	beq.w	800740e <_dtoa_r+0x46e>
 80072c4:	f1bb 0f00 	cmp.w	fp, #0
 80072c8:	dd34      	ble.n	8007334 <_dtoa_r+0x394>
 80072ca:	4b9a      	ldr	r3, [pc, #616]	; (8007534 <_dtoa_r+0x594>)
 80072cc:	f00b 020f 	and.w	r2, fp, #15
 80072d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80072e4:	d016      	beq.n	8007314 <_dtoa_r+0x374>
 80072e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072ea:	4b93      	ldr	r3, [pc, #588]	; (8007538 <_dtoa_r+0x598>)
 80072ec:	2703      	movs	r7, #3
 80072ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072f2:	f7f9 fa1b 	bl	800072c <__aeabi_ddiv>
 80072f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072fa:	f004 040f 	and.w	r4, r4, #15
 80072fe:	4e8e      	ldr	r6, [pc, #568]	; (8007538 <_dtoa_r+0x598>)
 8007300:	b954      	cbnz	r4, 8007318 <_dtoa_r+0x378>
 8007302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800730a:	f7f9 fa0f 	bl	800072c <__aeabi_ddiv>
 800730e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007312:	e029      	b.n	8007368 <_dtoa_r+0x3c8>
 8007314:	2702      	movs	r7, #2
 8007316:	e7f2      	b.n	80072fe <_dtoa_r+0x35e>
 8007318:	07e1      	lsls	r1, r4, #31
 800731a:	d508      	bpl.n	800732e <_dtoa_r+0x38e>
 800731c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007320:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007324:	f7f9 f8d8 	bl	80004d8 <__aeabi_dmul>
 8007328:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800732c:	3701      	adds	r7, #1
 800732e:	1064      	asrs	r4, r4, #1
 8007330:	3608      	adds	r6, #8
 8007332:	e7e5      	b.n	8007300 <_dtoa_r+0x360>
 8007334:	f000 80a5 	beq.w	8007482 <_dtoa_r+0x4e2>
 8007338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800733c:	f1cb 0400 	rsb	r4, fp, #0
 8007340:	4b7c      	ldr	r3, [pc, #496]	; (8007534 <_dtoa_r+0x594>)
 8007342:	f004 020f 	and.w	r2, r4, #15
 8007346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f9 f8c3 	bl	80004d8 <__aeabi_dmul>
 8007352:	2702      	movs	r7, #2
 8007354:	2300      	movs	r3, #0
 8007356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800735a:	4e77      	ldr	r6, [pc, #476]	; (8007538 <_dtoa_r+0x598>)
 800735c:	1124      	asrs	r4, r4, #4
 800735e:	2c00      	cmp	r4, #0
 8007360:	f040 8084 	bne.w	800746c <_dtoa_r+0x4cc>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1d2      	bne.n	800730e <_dtoa_r+0x36e>
 8007368:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800736c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8087 	beq.w	8007486 <_dtoa_r+0x4e6>
 8007378:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800737c:	2200      	movs	r2, #0
 800737e:	4b6f      	ldr	r3, [pc, #444]	; (800753c <_dtoa_r+0x59c>)
 8007380:	f7f9 fb1c 	bl	80009bc <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	d07e      	beq.n	8007486 <_dtoa_r+0x4e6>
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d07b      	beq.n	8007486 <_dtoa_r+0x4e6>
 800738e:	9b06      	ldr	r3, [sp, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dd38      	ble.n	8007406 <_dtoa_r+0x466>
 8007394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007398:	2200      	movs	r2, #0
 800739a:	4b69      	ldr	r3, [pc, #420]	; (8007540 <_dtoa_r+0x5a0>)
 800739c:	f7f9 f89c 	bl	80004d8 <__aeabi_dmul>
 80073a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a4:	9c06      	ldr	r4, [sp, #24]
 80073a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80073aa:	3701      	adds	r7, #1
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7f9 f829 	bl	8000404 <__aeabi_i2d>
 80073b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b6:	f7f9 f88f 	bl	80004d8 <__aeabi_dmul>
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <_dtoa_r+0x5a4>)
 80073be:	f7f8 fed5 	bl	800016c <__adddf3>
 80073c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80073c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ca:	9611      	str	r6, [sp, #68]	; 0x44
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d15d      	bne.n	800748c <_dtoa_r+0x4ec>
 80073d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d4:	2200      	movs	r2, #0
 80073d6:	4b5c      	ldr	r3, [pc, #368]	; (8007548 <_dtoa_r+0x5a8>)
 80073d8:	f7f8 fec6 	bl	8000168 <__aeabi_dsub>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073e4:	4633      	mov	r3, r6
 80073e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073e8:	f7f9 fb06 	bl	80009f8 <__aeabi_dcmpgt>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f040 8295 	bne.w	800791c <_dtoa_r+0x97c>
 80073f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073fc:	f7f9 fade 	bl	80009bc <__aeabi_dcmplt>
 8007400:	2800      	cmp	r0, #0
 8007402:	f040 8289 	bne.w	8007918 <_dtoa_r+0x978>
 8007406:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800740a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800740e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007410:	2b00      	cmp	r3, #0
 8007412:	f2c0 8151 	blt.w	80076b8 <_dtoa_r+0x718>
 8007416:	f1bb 0f0e 	cmp.w	fp, #14
 800741a:	f300 814d 	bgt.w	80076b8 <_dtoa_r+0x718>
 800741e:	4b45      	ldr	r3, [pc, #276]	; (8007534 <_dtoa_r+0x594>)
 8007420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007424:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007428:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800742c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f280 80da 	bge.w	80075e8 <_dtoa_r+0x648>
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f300 80d6 	bgt.w	80075e8 <_dtoa_r+0x648>
 800743c:	f040 826b 	bne.w	8007916 <_dtoa_r+0x976>
 8007440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007444:	2200      	movs	r2, #0
 8007446:	4b40      	ldr	r3, [pc, #256]	; (8007548 <_dtoa_r+0x5a8>)
 8007448:	f7f9 f846 	bl	80004d8 <__aeabi_dmul>
 800744c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007450:	f7f9 fac8 	bl	80009e4 <__aeabi_dcmpge>
 8007454:	9c08      	ldr	r4, [sp, #32]
 8007456:	4626      	mov	r6, r4
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 8241 	bne.w	80078e0 <_dtoa_r+0x940>
 800745e:	2331      	movs	r3, #49	; 0x31
 8007460:	9f03      	ldr	r7, [sp, #12]
 8007462:	f10b 0b01 	add.w	fp, fp, #1
 8007466:	f807 3b01 	strb.w	r3, [r7], #1
 800746a:	e23d      	b.n	80078e8 <_dtoa_r+0x948>
 800746c:	07e2      	lsls	r2, r4, #31
 800746e:	d505      	bpl.n	800747c <_dtoa_r+0x4dc>
 8007470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	2301      	movs	r3, #1
 800747a:	3701      	adds	r7, #1
 800747c:	1064      	asrs	r4, r4, #1
 800747e:	3608      	adds	r6, #8
 8007480:	e76d      	b.n	800735e <_dtoa_r+0x3be>
 8007482:	2702      	movs	r7, #2
 8007484:	e770      	b.n	8007368 <_dtoa_r+0x3c8>
 8007486:	46d8      	mov	r8, fp
 8007488:	9c08      	ldr	r4, [sp, #32]
 800748a:	e78f      	b.n	80073ac <_dtoa_r+0x40c>
 800748c:	9903      	ldr	r1, [sp, #12]
 800748e:	4b29      	ldr	r3, [pc, #164]	; (8007534 <_dtoa_r+0x594>)
 8007490:	4421      	add	r1, r4
 8007492:	9112      	str	r1, [sp, #72]	; 0x48
 8007494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007496:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800749a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800749e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d054      	beq.n	8007550 <_dtoa_r+0x5b0>
 80074a6:	2000      	movs	r0, #0
 80074a8:	4928      	ldr	r1, [pc, #160]	; (800754c <_dtoa_r+0x5ac>)
 80074aa:	f7f9 f93f 	bl	800072c <__aeabi_ddiv>
 80074ae:	463b      	mov	r3, r7
 80074b0:	4632      	mov	r2, r6
 80074b2:	f7f8 fe59 	bl	8000168 <__aeabi_dsub>
 80074b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074ba:	9f03      	ldr	r7, [sp, #12]
 80074bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c0:	f7f9 faba 	bl	8000a38 <__aeabi_d2iz>
 80074c4:	4604      	mov	r4, r0
 80074c6:	f7f8 ff9d 	bl	8000404 <__aeabi_i2d>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d2:	f7f8 fe49 	bl	8000168 <__aeabi_dsub>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	3430      	adds	r4, #48	; 0x30
 80074dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074e4:	f807 4b01 	strb.w	r4, [r7], #1
 80074e8:	f7f9 fa68 	bl	80009bc <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d173      	bne.n	80075d8 <_dtoa_r+0x638>
 80074f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f4:	2000      	movs	r0, #0
 80074f6:	4911      	ldr	r1, [pc, #68]	; (800753c <_dtoa_r+0x59c>)
 80074f8:	f7f8 fe36 	bl	8000168 <__aeabi_dsub>
 80074fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007500:	f7f9 fa5c 	bl	80009bc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 80b6 	bne.w	8007676 <_dtoa_r+0x6d6>
 800750a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800750c:	429f      	cmp	r7, r3
 800750e:	f43f af7a 	beq.w	8007406 <_dtoa_r+0x466>
 8007512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007516:	2200      	movs	r2, #0
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <_dtoa_r+0x5a0>)
 800751a:	f7f8 ffdd 	bl	80004d8 <__aeabi_dmul>
 800751e:	2200      	movs	r2, #0
 8007520:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <_dtoa_r+0x5a0>)
 800752a:	f7f8 ffd5 	bl	80004d8 <__aeabi_dmul>
 800752e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007532:	e7c3      	b.n	80074bc <_dtoa_r+0x51c>
 8007534:	08009300 	.word	0x08009300
 8007538:	080092d8 	.word	0x080092d8
 800753c:	3ff00000 	.word	0x3ff00000
 8007540:	40240000 	.word	0x40240000
 8007544:	401c0000 	.word	0x401c0000
 8007548:	40140000 	.word	0x40140000
 800754c:	3fe00000 	.word	0x3fe00000
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f8 ffc0 	bl	80004d8 <__aeabi_dmul>
 8007558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800755a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800755e:	9c03      	ldr	r4, [sp, #12]
 8007560:	9314      	str	r3, [sp, #80]	; 0x50
 8007562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007566:	f7f9 fa67 	bl	8000a38 <__aeabi_d2iz>
 800756a:	9015      	str	r0, [sp, #84]	; 0x54
 800756c:	f7f8 ff4a 	bl	8000404 <__aeabi_i2d>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007578:	f7f8 fdf6 	bl	8000168 <__aeabi_dsub>
 800757c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800757e:	4606      	mov	r6, r0
 8007580:	3330      	adds	r3, #48	; 0x30
 8007582:	f804 3b01 	strb.w	r3, [r4], #1
 8007586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007588:	460f      	mov	r7, r1
 800758a:	429c      	cmp	r4, r3
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	d124      	bne.n	80075dc <_dtoa_r+0x63c>
 8007592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007596:	4baf      	ldr	r3, [pc, #700]	; (8007854 <_dtoa_r+0x8b4>)
 8007598:	f7f8 fde8 	bl	800016c <__adddf3>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4630      	mov	r0, r6
 80075a2:	4639      	mov	r1, r7
 80075a4:	f7f9 fa28 	bl	80009f8 <__aeabi_dcmpgt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d163      	bne.n	8007674 <_dtoa_r+0x6d4>
 80075ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075b0:	2000      	movs	r0, #0
 80075b2:	49a8      	ldr	r1, [pc, #672]	; (8007854 <_dtoa_r+0x8b4>)
 80075b4:	f7f8 fdd8 	bl	8000168 <__aeabi_dsub>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 f9fc 	bl	80009bc <__aeabi_dcmplt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f af1e 	beq.w	8007406 <_dtoa_r+0x466>
 80075ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075cc:	1e7b      	subs	r3, r7, #1
 80075ce:	9314      	str	r3, [sp, #80]	; 0x50
 80075d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80075d4:	2b30      	cmp	r3, #48	; 0x30
 80075d6:	d0f8      	beq.n	80075ca <_dtoa_r+0x62a>
 80075d8:	46c3      	mov	fp, r8
 80075da:	e03b      	b.n	8007654 <_dtoa_r+0x6b4>
 80075dc:	4b9e      	ldr	r3, [pc, #632]	; (8007858 <_dtoa_r+0x8b8>)
 80075de:	f7f8 ff7b 	bl	80004d8 <__aeabi_dmul>
 80075e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e6:	e7bc      	b.n	8007562 <_dtoa_r+0x5c2>
 80075e8:	9f03      	ldr	r7, [sp, #12]
 80075ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80075ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f9 f899 	bl	800072c <__aeabi_ddiv>
 80075fa:	f7f9 fa1d 	bl	8000a38 <__aeabi_d2iz>
 80075fe:	4604      	mov	r4, r0
 8007600:	f7f8 ff00 	bl	8000404 <__aeabi_i2d>
 8007604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007608:	f7f8 ff66 	bl	80004d8 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4640      	mov	r0, r8
 8007612:	4649      	mov	r1, r9
 8007614:	f7f8 fda8 	bl	8000168 <__aeabi_dsub>
 8007618:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800761c:	f807 6b01 	strb.w	r6, [r7], #1
 8007620:	9e03      	ldr	r6, [sp, #12]
 8007622:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007626:	1bbe      	subs	r6, r7, r6
 8007628:	45b4      	cmp	ip, r6
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	d136      	bne.n	800769e <_dtoa_r+0x6fe>
 8007630:	f7f8 fd9c 	bl	800016c <__adddf3>
 8007634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007638:	4680      	mov	r8, r0
 800763a:	4689      	mov	r9, r1
 800763c:	f7f9 f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8007640:	bb58      	cbnz	r0, 800769a <_dtoa_r+0x6fa>
 8007642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	f7f9 f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800764e:	b108      	cbz	r0, 8007654 <_dtoa_r+0x6b4>
 8007650:	07e3      	lsls	r3, r4, #31
 8007652:	d422      	bmi.n	800769a <_dtoa_r+0x6fa>
 8007654:	4651      	mov	r1, sl
 8007656:	4628      	mov	r0, r5
 8007658:	f000 fbc2 	bl	8007de0 <_Bfree>
 800765c:	2300      	movs	r3, #0
 800765e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007660:	703b      	strb	r3, [r7, #0]
 8007662:	f10b 0301 	add.w	r3, fp, #1
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800766a:	2b00      	cmp	r3, #0
 800766c:	f43f ace6 	beq.w	800703c <_dtoa_r+0x9c>
 8007670:	601f      	str	r7, [r3, #0]
 8007672:	e4e3      	b.n	800703c <_dtoa_r+0x9c>
 8007674:	4627      	mov	r7, r4
 8007676:	463b      	mov	r3, r7
 8007678:	461f      	mov	r7, r3
 800767a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d107      	bne.n	8007692 <_dtoa_r+0x6f2>
 8007682:	9a03      	ldr	r2, [sp, #12]
 8007684:	429a      	cmp	r2, r3
 8007686:	d1f7      	bne.n	8007678 <_dtoa_r+0x6d8>
 8007688:	2230      	movs	r2, #48	; 0x30
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	f108 0801 	add.w	r8, r8, #1
 8007690:	700a      	strb	r2, [r1, #0]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	3201      	adds	r2, #1
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e79e      	b.n	80075d8 <_dtoa_r+0x638>
 800769a:	46d8      	mov	r8, fp
 800769c:	e7eb      	b.n	8007676 <_dtoa_r+0x6d6>
 800769e:	2200      	movs	r2, #0
 80076a0:	4b6d      	ldr	r3, [pc, #436]	; (8007858 <_dtoa_r+0x8b8>)
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	f7f9 f97b 	bl	80009a8 <__aeabi_dcmpeq>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d09b      	beq.n	80075ee <_dtoa_r+0x64e>
 80076b6:	e7cd      	b.n	8007654 <_dtoa_r+0x6b4>
 80076b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	f000 80c4 	beq.w	8007848 <_dtoa_r+0x8a8>
 80076c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076c2:	2a01      	cmp	r2, #1
 80076c4:	f300 80a8 	bgt.w	8007818 <_dtoa_r+0x878>
 80076c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	f000 80a0 	beq.w	8007810 <_dtoa_r+0x870>
 80076d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076d4:	464f      	mov	r7, r9
 80076d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076da:	2101      	movs	r1, #1
 80076dc:	441a      	add	r2, r3
 80076de:	4628      	mov	r0, r5
 80076e0:	4499      	add	r9, r3
 80076e2:	9209      	str	r2, [sp, #36]	; 0x24
 80076e4:	f000 fc32 	bl	8007f4c <__i2b>
 80076e8:	4606      	mov	r6, r0
 80076ea:	b15f      	cbz	r7, 8007704 <_dtoa_r+0x764>
 80076ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dd08      	ble.n	8007704 <_dtoa_r+0x764>
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	bfa8      	it	ge
 80076f6:	463b      	movge	r3, r7
 80076f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fa:	eba9 0903 	sub.w	r9, r9, r3
 80076fe:	1aff      	subs	r7, r7, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	9309      	str	r3, [sp, #36]	; 0x24
 8007704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007706:	b1f3      	cbz	r3, 8007746 <_dtoa_r+0x7a6>
 8007708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80a0 	beq.w	8007850 <_dtoa_r+0x8b0>
 8007710:	2c00      	cmp	r4, #0
 8007712:	dd10      	ble.n	8007736 <_dtoa_r+0x796>
 8007714:	4631      	mov	r1, r6
 8007716:	4622      	mov	r2, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f000 fcd5 	bl	80080c8 <__pow5mult>
 800771e:	4652      	mov	r2, sl
 8007720:	4601      	mov	r1, r0
 8007722:	4606      	mov	r6, r0
 8007724:	4628      	mov	r0, r5
 8007726:	f000 fc27 	bl	8007f78 <__multiply>
 800772a:	4680      	mov	r8, r0
 800772c:	4651      	mov	r1, sl
 800772e:	4628      	mov	r0, r5
 8007730:	f000 fb56 	bl	8007de0 <_Bfree>
 8007734:	46c2      	mov	sl, r8
 8007736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007738:	1b1a      	subs	r2, r3, r4
 800773a:	d004      	beq.n	8007746 <_dtoa_r+0x7a6>
 800773c:	4651      	mov	r1, sl
 800773e:	4628      	mov	r0, r5
 8007740:	f000 fcc2 	bl	80080c8 <__pow5mult>
 8007744:	4682      	mov	sl, r0
 8007746:	2101      	movs	r1, #1
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fbff 	bl	8007f4c <__i2b>
 800774e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007750:	4604      	mov	r4, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	f340 8082 	ble.w	800785c <_dtoa_r+0x8bc>
 8007758:	461a      	mov	r2, r3
 800775a:	4601      	mov	r1, r0
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fcb3 	bl	80080c8 <__pow5mult>
 8007762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007764:	4604      	mov	r4, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	dd7b      	ble.n	8007862 <_dtoa_r+0x8c2>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007774:	6918      	ldr	r0, [r3, #16]
 8007776:	f000 fb9b 	bl	8007eb0 <__hi0bits>
 800777a:	f1c0 0020 	rsb	r0, r0, #32
 800777e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007780:	4418      	add	r0, r3
 8007782:	f010 001f 	ands.w	r0, r0, #31
 8007786:	f000 8092 	beq.w	80078ae <_dtoa_r+0x90e>
 800778a:	f1c0 0320 	rsb	r3, r0, #32
 800778e:	2b04      	cmp	r3, #4
 8007790:	f340 8085 	ble.w	800789e <_dtoa_r+0x8fe>
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	f1c0 001c 	rsb	r0, r0, #28
 800779a:	4403      	add	r3, r0
 800779c:	4481      	add	r9, r0
 800779e:	4407      	add	r7, r0
 80077a0:	9309      	str	r3, [sp, #36]	; 0x24
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	dd05      	ble.n	80077b4 <_dtoa_r+0x814>
 80077a8:	4651      	mov	r1, sl
 80077aa:	464a      	mov	r2, r9
 80077ac:	4628      	mov	r0, r5
 80077ae:	f000 fce5 	bl	800817c <__lshift>
 80077b2:	4682      	mov	sl, r0
 80077b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd05      	ble.n	80077c6 <_dtoa_r+0x826>
 80077ba:	4621      	mov	r1, r4
 80077bc:	461a      	mov	r2, r3
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 fcdc 	bl	800817c <__lshift>
 80077c4:	4604      	mov	r4, r0
 80077c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d072      	beq.n	80078b2 <_dtoa_r+0x912>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4650      	mov	r0, sl
 80077d0:	f000 fd40 	bl	8008254 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	da6c      	bge.n	80078b2 <_dtoa_r+0x912>
 80077d8:	2300      	movs	r3, #0
 80077da:	4651      	mov	r1, sl
 80077dc:	220a      	movs	r2, #10
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fb20 	bl	8007e24 <__multadd>
 80077e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e6:	4682      	mov	sl, r0
 80077e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 81ac 	beq.w	8007b4a <_dtoa_r+0xbaa>
 80077f2:	2300      	movs	r3, #0
 80077f4:	4631      	mov	r1, r6
 80077f6:	220a      	movs	r2, #10
 80077f8:	4628      	mov	r0, r5
 80077fa:	f000 fb13 	bl	8007e24 <__multadd>
 80077fe:	9b06      	ldr	r3, [sp, #24]
 8007800:	4606      	mov	r6, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f300 8093 	bgt.w	800792e <_dtoa_r+0x98e>
 8007808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780a:	2b02      	cmp	r3, #2
 800780c:	dc59      	bgt.n	80078c2 <_dtoa_r+0x922>
 800780e:	e08e      	b.n	800792e <_dtoa_r+0x98e>
 8007810:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007812:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007816:	e75d      	b.n	80076d4 <_dtoa_r+0x734>
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	1e5c      	subs	r4, r3, #1
 800781c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781e:	42a3      	cmp	r3, r4
 8007820:	bfbf      	itttt	lt
 8007822:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007824:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007826:	1ae3      	sublt	r3, r4, r3
 8007828:	18d2      	addlt	r2, r2, r3
 800782a:	bfa8      	it	ge
 800782c:	1b1c      	subge	r4, r3, r4
 800782e:	9b08      	ldr	r3, [sp, #32]
 8007830:	bfbe      	ittt	lt
 8007832:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007834:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007836:	2400      	movlt	r4, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfb5      	itete	lt
 800783c:	eba9 0703 	sublt.w	r7, r9, r3
 8007840:	464f      	movge	r7, r9
 8007842:	2300      	movlt	r3, #0
 8007844:	9b08      	ldrge	r3, [sp, #32]
 8007846:	e747      	b.n	80076d8 <_dtoa_r+0x738>
 8007848:	464f      	mov	r7, r9
 800784a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800784c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800784e:	e74c      	b.n	80076ea <_dtoa_r+0x74a>
 8007850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007852:	e773      	b.n	800773c <_dtoa_r+0x79c>
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	40240000 	.word	0x40240000
 800785c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800785e:	2b01      	cmp	r3, #1
 8007860:	dc18      	bgt.n	8007894 <_dtoa_r+0x8f4>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	b9b3      	cbnz	r3, 8007894 <_dtoa_r+0x8f4>
 8007866:	9b05      	ldr	r3, [sp, #20]
 8007868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786c:	b993      	cbnz	r3, 8007894 <_dtoa_r+0x8f4>
 800786e:	9b05      	ldr	r3, [sp, #20]
 8007870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007874:	0d1b      	lsrs	r3, r3, #20
 8007876:	051b      	lsls	r3, r3, #20
 8007878:	b17b      	cbz	r3, 800789a <_dtoa_r+0x8fa>
 800787a:	f04f 0801 	mov.w	r8, #1
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	f109 0901 	add.w	r9, r9, #1
 8007884:	3301      	adds	r3, #1
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	f47f af6f 	bne.w	800776e <_dtoa_r+0x7ce>
 8007890:	2001      	movs	r0, #1
 8007892:	e774      	b.n	800777e <_dtoa_r+0x7de>
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	e7f6      	b.n	8007888 <_dtoa_r+0x8e8>
 800789a:	4698      	mov	r8, r3
 800789c:	e7f4      	b.n	8007888 <_dtoa_r+0x8e8>
 800789e:	d080      	beq.n	80077a2 <_dtoa_r+0x802>
 80078a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a2:	331c      	adds	r3, #28
 80078a4:	441a      	add	r2, r3
 80078a6:	4499      	add	r9, r3
 80078a8:	441f      	add	r7, r3
 80078aa:	9209      	str	r2, [sp, #36]	; 0x24
 80078ac:	e779      	b.n	80077a2 <_dtoa_r+0x802>
 80078ae:	4603      	mov	r3, r0
 80078b0:	e7f6      	b.n	80078a0 <_dtoa_r+0x900>
 80078b2:	9b08      	ldr	r3, [sp, #32]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dc34      	bgt.n	8007922 <_dtoa_r+0x982>
 80078b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	dd31      	ble.n	8007922 <_dtoa_r+0x982>
 80078be:	9b08      	ldr	r3, [sp, #32]
 80078c0:	9306      	str	r3, [sp, #24]
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	b963      	cbnz	r3, 80078e0 <_dtoa_r+0x940>
 80078c6:	4621      	mov	r1, r4
 80078c8:	2205      	movs	r2, #5
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 faaa 	bl	8007e24 <__multadd>
 80078d0:	4601      	mov	r1, r0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4650      	mov	r0, sl
 80078d6:	f000 fcbd 	bl	8008254 <__mcmp>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f73f adbf 	bgt.w	800745e <_dtoa_r+0x4be>
 80078e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078e2:	9f03      	ldr	r7, [sp, #12]
 80078e4:	ea6f 0b03 	mvn.w	fp, r3
 80078e8:	f04f 0800 	mov.w	r8, #0
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 fa76 	bl	8007de0 <_Bfree>
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	f43f aead 	beq.w	8007654 <_dtoa_r+0x6b4>
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	d005      	beq.n	800790c <_dtoa_r+0x96c>
 8007900:	45b0      	cmp	r8, r6
 8007902:	d003      	beq.n	800790c <_dtoa_r+0x96c>
 8007904:	4641      	mov	r1, r8
 8007906:	4628      	mov	r0, r5
 8007908:	f000 fa6a 	bl	8007de0 <_Bfree>
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	f000 fa66 	bl	8007de0 <_Bfree>
 8007914:	e69e      	b.n	8007654 <_dtoa_r+0x6b4>
 8007916:	2400      	movs	r4, #0
 8007918:	4626      	mov	r6, r4
 800791a:	e7e1      	b.n	80078e0 <_dtoa_r+0x940>
 800791c:	46c3      	mov	fp, r8
 800791e:	4626      	mov	r6, r4
 8007920:	e59d      	b.n	800745e <_dtoa_r+0x4be>
 8007922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80c8 	beq.w	8007aba <_dtoa_r+0xb1a>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	9306      	str	r3, [sp, #24]
 800792e:	2f00      	cmp	r7, #0
 8007930:	dd05      	ble.n	800793e <_dtoa_r+0x99e>
 8007932:	4631      	mov	r1, r6
 8007934:	463a      	mov	r2, r7
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fc20 	bl	800817c <__lshift>
 800793c:	4606      	mov	r6, r0
 800793e:	f1b8 0f00 	cmp.w	r8, #0
 8007942:	d05b      	beq.n	80079fc <_dtoa_r+0xa5c>
 8007944:	4628      	mov	r0, r5
 8007946:	6871      	ldr	r1, [r6, #4]
 8007948:	f000 fa0a 	bl	8007d60 <_Balloc>
 800794c:	4607      	mov	r7, r0
 800794e:	b928      	cbnz	r0, 800795c <_dtoa_r+0x9bc>
 8007950:	4602      	mov	r2, r0
 8007952:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007956:	4b81      	ldr	r3, [pc, #516]	; (8007b5c <_dtoa_r+0xbbc>)
 8007958:	f7ff bb36 	b.w	8006fc8 <_dtoa_r+0x28>
 800795c:	6932      	ldr	r2, [r6, #16]
 800795e:	f106 010c 	add.w	r1, r6, #12
 8007962:	3202      	adds	r2, #2
 8007964:	0092      	lsls	r2, r2, #2
 8007966:	300c      	adds	r0, #12
 8007968:	f000 ff9e 	bl	80088a8 <memcpy>
 800796c:	2201      	movs	r2, #1
 800796e:	4639      	mov	r1, r7
 8007970:	4628      	mov	r0, r5
 8007972:	f000 fc03 	bl	800817c <__lshift>
 8007976:	46b0      	mov	r8, r6
 8007978:	4606      	mov	r6, r0
 800797a:	9b03      	ldr	r3, [sp, #12]
 800797c:	9a03      	ldr	r2, [sp, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	9308      	str	r3, [sp, #32]
 8007982:	9b06      	ldr	r3, [sp, #24]
 8007984:	4413      	add	r3, r2
 8007986:	930b      	str	r3, [sp, #44]	; 0x2c
 8007988:	9b04      	ldr	r3, [sp, #16]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	930a      	str	r3, [sp, #40]	; 0x28
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	4621      	mov	r1, r4
 8007994:	3b01      	subs	r3, #1
 8007996:	4650      	mov	r0, sl
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	f7ff fa78 	bl	8006e8e <quorem>
 800799e:	4641      	mov	r1, r8
 80079a0:	9006      	str	r0, [sp, #24]
 80079a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079a6:	4650      	mov	r0, sl
 80079a8:	f000 fc54 	bl	8008254 <__mcmp>
 80079ac:	4632      	mov	r2, r6
 80079ae:	9009      	str	r0, [sp, #36]	; 0x24
 80079b0:	4621      	mov	r1, r4
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 fc6a 	bl	800828c <__mdiff>
 80079b8:	68c2      	ldr	r2, [r0, #12]
 80079ba:	4607      	mov	r7, r0
 80079bc:	bb02      	cbnz	r2, 8007a00 <_dtoa_r+0xa60>
 80079be:	4601      	mov	r1, r0
 80079c0:	4650      	mov	r0, sl
 80079c2:	f000 fc47 	bl	8008254 <__mcmp>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4639      	mov	r1, r7
 80079ca:	4628      	mov	r0, r5
 80079cc:	920c      	str	r2, [sp, #48]	; 0x30
 80079ce:	f000 fa07 	bl	8007de0 <_Bfree>
 80079d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079d6:	9f08      	ldr	r7, [sp, #32]
 80079d8:	ea43 0102 	orr.w	r1, r3, r2
 80079dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079de:	4319      	orrs	r1, r3
 80079e0:	d110      	bne.n	8007a04 <_dtoa_r+0xa64>
 80079e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80079e6:	d029      	beq.n	8007a3c <_dtoa_r+0xa9c>
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd02      	ble.n	80079f4 <_dtoa_r+0xa54>
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	f883 9000 	strb.w	r9, [r3]
 80079fa:	e777      	b.n	80078ec <_dtoa_r+0x94c>
 80079fc:	4630      	mov	r0, r6
 80079fe:	e7ba      	b.n	8007976 <_dtoa_r+0x9d6>
 8007a00:	2201      	movs	r2, #1
 8007a02:	e7e1      	b.n	80079c8 <_dtoa_r+0xa28>
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	db04      	blt.n	8007a14 <_dtoa_r+0xa74>
 8007a0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a10:	430b      	orrs	r3, r1
 8007a12:	d120      	bne.n	8007a56 <_dtoa_r+0xab6>
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	dded      	ble.n	80079f4 <_dtoa_r+0xa54>
 8007a18:	4651      	mov	r1, sl
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 fbad 	bl	800817c <__lshift>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4682      	mov	sl, r0
 8007a26:	f000 fc15 	bl	8008254 <__mcmp>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dc03      	bgt.n	8007a36 <_dtoa_r+0xa96>
 8007a2e:	d1e1      	bne.n	80079f4 <_dtoa_r+0xa54>
 8007a30:	f019 0f01 	tst.w	r9, #1
 8007a34:	d0de      	beq.n	80079f4 <_dtoa_r+0xa54>
 8007a36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a3a:	d1d8      	bne.n	80079ee <_dtoa_r+0xa4e>
 8007a3c:	2339      	movs	r3, #57	; 0x39
 8007a3e:	9a04      	ldr	r2, [sp, #16]
 8007a40:	7013      	strb	r3, [r2, #0]
 8007a42:	463b      	mov	r3, r7
 8007a44:	461f      	mov	r7, r3
 8007a46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2a39      	cmp	r2, #57	; 0x39
 8007a4e:	d06b      	beq.n	8007b28 <_dtoa_r+0xb88>
 8007a50:	3201      	adds	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e74a      	b.n	80078ec <_dtoa_r+0x94c>
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	dd07      	ble.n	8007a6a <_dtoa_r+0xaca>
 8007a5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a5e:	d0ed      	beq.n	8007a3c <_dtoa_r+0xa9c>
 8007a60:	9a04      	ldr	r2, [sp, #16]
 8007a62:	f109 0301 	add.w	r3, r9, #1
 8007a66:	7013      	strb	r3, [r2, #0]
 8007a68:	e740      	b.n	80078ec <_dtoa_r+0x94c>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d042      	beq.n	8007afc <_dtoa_r+0xb5c>
 8007a76:	4651      	mov	r1, sl
 8007a78:	2300      	movs	r3, #0
 8007a7a:	220a      	movs	r2, #10
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 f9d1 	bl	8007e24 <__multadd>
 8007a82:	45b0      	cmp	r8, r6
 8007a84:	4682      	mov	sl, r0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	f04f 020a 	mov.w	r2, #10
 8007a8e:	4641      	mov	r1, r8
 8007a90:	4628      	mov	r0, r5
 8007a92:	d107      	bne.n	8007aa4 <_dtoa_r+0xb04>
 8007a94:	f000 f9c6 	bl	8007e24 <__multadd>
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	e775      	b.n	8007990 <_dtoa_r+0x9f0>
 8007aa4:	f000 f9be 	bl	8007e24 <__multadd>
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4680      	mov	r8, r0
 8007aac:	2300      	movs	r3, #0
 8007aae:	220a      	movs	r2, #10
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f9b7 	bl	8007e24 <__multadd>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	e7f0      	b.n	8007a9c <_dtoa_r+0xafc>
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	9306      	str	r3, [sp, #24]
 8007abe:	9f03      	ldr	r7, [sp, #12]
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	f7ff f9e3 	bl	8006e8e <quorem>
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ace:	f807 9b01 	strb.w	r9, [r7], #1
 8007ad2:	1afa      	subs	r2, r7, r3
 8007ad4:	9b06      	ldr	r3, [sp, #24]
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	dd07      	ble.n	8007aea <_dtoa_r+0xb4a>
 8007ada:	4651      	mov	r1, sl
 8007adc:	2300      	movs	r3, #0
 8007ade:	220a      	movs	r2, #10
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f99f 	bl	8007e24 <__multadd>
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	e7ea      	b.n	8007ac0 <_dtoa_r+0xb20>
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfcc      	ite	gt
 8007af4:	461f      	movgt	r7, r3
 8007af6:	2701      	movle	r7, #1
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	441f      	add	r7, r3
 8007afc:	4651      	mov	r1, sl
 8007afe:	2201      	movs	r2, #1
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 fb3b 	bl	800817c <__lshift>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4682      	mov	sl, r0
 8007b0a:	f000 fba3 	bl	8008254 <__mcmp>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	dc97      	bgt.n	8007a42 <_dtoa_r+0xaa2>
 8007b12:	d102      	bne.n	8007b1a <_dtoa_r+0xb7a>
 8007b14:	f019 0f01 	tst.w	r9, #1
 8007b18:	d193      	bne.n	8007a42 <_dtoa_r+0xaa2>
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	461f      	mov	r7, r3
 8007b1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b22:	2a30      	cmp	r2, #48	; 0x30
 8007b24:	d0fa      	beq.n	8007b1c <_dtoa_r+0xb7c>
 8007b26:	e6e1      	b.n	80078ec <_dtoa_r+0x94c>
 8007b28:	9a03      	ldr	r2, [sp, #12]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d18a      	bne.n	8007a44 <_dtoa_r+0xaa4>
 8007b2e:	2331      	movs	r3, #49	; 0x31
 8007b30:	f10b 0b01 	add.w	fp, fp, #1
 8007b34:	e797      	b.n	8007a66 <_dtoa_r+0xac6>
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <_dtoa_r+0xbc0>)
 8007b38:	f7ff ba9f 	b.w	800707a <_dtoa_r+0xda>
 8007b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f47f aa77 	bne.w	8007032 <_dtoa_r+0x92>
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <_dtoa_r+0xbc4>)
 8007b46:	f7ff ba98 	b.w	800707a <_dtoa_r+0xda>
 8007b4a:	9b06      	ldr	r3, [sp, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dcb6      	bgt.n	8007abe <_dtoa_r+0xb1e>
 8007b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	f73f aeb5 	bgt.w	80078c2 <_dtoa_r+0x922>
 8007b58:	e7b1      	b.n	8007abe <_dtoa_r+0xb1e>
 8007b5a:	bf00      	nop
 8007b5c:	0800926c 	.word	0x0800926c
 8007b60:	080091cc 	.word	0x080091cc
 8007b64:	080091f0 	.word	0x080091f0

08007b68 <_free_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d040      	beq.n	8007bf2 <_free_r+0x8a>
 8007b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b74:	1f0c      	subs	r4, r1, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfb8      	it	lt
 8007b7a:	18e4      	addlt	r4, r4, r3
 8007b7c:	f000 f8e4 	bl	8007d48 <__malloc_lock>
 8007b80:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <_free_r+0x8c>)
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	b933      	cbnz	r3, 8007b94 <_free_r+0x2c>
 8007b86:	6063      	str	r3, [r4, #4]
 8007b88:	6014      	str	r4, [r2, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b90:	f000 b8e0 	b.w	8007d54 <__malloc_unlock>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d908      	bls.n	8007baa <_free_r+0x42>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	bf01      	itttt	eq
 8007ba0:	6819      	ldreq	r1, [r3, #0]
 8007ba2:	685b      	ldreq	r3, [r3, #4]
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	e7ed      	b.n	8007b86 <_free_r+0x1e>
 8007baa:	461a      	mov	r2, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b10b      	cbz	r3, 8007bb4 <_free_r+0x4c>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d9fa      	bls.n	8007baa <_free_r+0x42>
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	1850      	adds	r0, r2, r1
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d10b      	bne.n	8007bd4 <_free_r+0x6c>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	4401      	add	r1, r0
 8007bc0:	1850      	adds	r0, r2, r1
 8007bc2:	4283      	cmp	r3, r0
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	d1e0      	bne.n	8007b8a <_free_r+0x22>
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4408      	add	r0, r1
 8007bce:	6010      	str	r0, [r2, #0]
 8007bd0:	6053      	str	r3, [r2, #4]
 8007bd2:	e7da      	b.n	8007b8a <_free_r+0x22>
 8007bd4:	d902      	bls.n	8007bdc <_free_r+0x74>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	e7d6      	b.n	8007b8a <_free_r+0x22>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	1821      	adds	r1, r4, r0
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf01      	itttt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	1809      	addeq	r1, r1, r0
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6054      	str	r4, [r2, #4]
 8007bf0:	e7cb      	b.n	8007b8a <_free_r+0x22>
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200004e0 	.word	0x200004e0

08007bf8 <malloc>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <malloc+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 b823 	b.w	8007c48 <_malloc_r>
 8007c02:	bf00      	nop
 8007c04:	20000068 	.word	0x20000068

08007c08 <sbrk_aligned>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4e0e      	ldr	r6, [pc, #56]	; (8007c44 <sbrk_aligned+0x3c>)
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6831      	ldr	r1, [r6, #0]
 8007c10:	4605      	mov	r5, r0
 8007c12:	b911      	cbnz	r1, 8007c1a <sbrk_aligned+0x12>
 8007c14:	f000 fe38 	bl	8008888 <_sbrk_r>
 8007c18:	6030      	str	r0, [r6, #0]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 fe33 	bl	8008888 <_sbrk_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <sbrk_aligned+0x34>
 8007c26:	1cc4      	adds	r4, r0, #3
 8007c28:	f024 0403 	bic.w	r4, r4, #3
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d007      	beq.n	8007c40 <sbrk_aligned+0x38>
 8007c30:	1a21      	subs	r1, r4, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 fe28 	bl	8008888 <_sbrk_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d101      	bne.n	8007c40 <sbrk_aligned+0x38>
 8007c3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c40:	4620      	mov	r0, r4
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	200004e4 	.word	0x200004e4

08007c48 <_malloc_r>:
 8007c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	db01      	blt.n	8007c64 <_malloc_r+0x1c>
 8007c60:	42a9      	cmp	r1, r5
 8007c62:	d905      	bls.n	8007c70 <_malloc_r+0x28>
 8007c64:	230c      	movs	r3, #12
 8007c66:	2600      	movs	r6, #0
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d44 <_malloc_r+0xfc>
 8007c74:	f000 f868 	bl	8007d48 <__malloc_lock>
 8007c78:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7c:	461c      	mov	r4, r3
 8007c7e:	bb5c      	cbnz	r4, 8007cd8 <_malloc_r+0x90>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ffc0 	bl	8007c08 <sbrk_aligned>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	d155      	bne.n	8007d3a <_malloc_r+0xf2>
 8007c8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c92:	4626      	mov	r6, r4
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	d145      	bne.n	8007d24 <_malloc_r+0xdc>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d048      	beq.n	8007d2e <_malloc_r+0xe6>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	eb04 0903 	add.w	r9, r4, r3
 8007ca6:	f000 fdef 	bl	8008888 <_sbrk_r>
 8007caa:	4581      	cmp	r9, r0
 8007cac:	d13f      	bne.n	8007d2e <_malloc_r+0xe6>
 8007cae:	6821      	ldr	r1, [r4, #0]
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	1a6d      	subs	r5, r5, r1
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7ff ffa7 	bl	8007c08 <sbrk_aligned>
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d037      	beq.n	8007d2e <_malloc_r+0xe6>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	442b      	add	r3, r5
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d038      	beq.n	8007d3e <_malloc_r+0xf6>
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	42a2      	cmp	r2, r4
 8007cd0:	d12b      	bne.n	8007d2a <_malloc_r+0xe2>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	e00f      	b.n	8007cf8 <_malloc_r+0xb0>
 8007cd8:	6822      	ldr	r2, [r4, #0]
 8007cda:	1b52      	subs	r2, r2, r5
 8007cdc:	d41f      	bmi.n	8007d1e <_malloc_r+0xd6>
 8007cde:	2a0b      	cmp	r2, #11
 8007ce0:	d917      	bls.n	8007d12 <_malloc_r+0xca>
 8007ce2:	1961      	adds	r1, r4, r5
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	6025      	str	r5, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	6059      	strne	r1, [r3, #4]
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	bf08      	it	eq
 8007cf0:	f8c8 1000 	streq.w	r1, [r8]
 8007cf4:	5162      	str	r2, [r4, r5]
 8007cf6:	604b      	str	r3, [r1, #4]
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f104 060b 	add.w	r6, r4, #11
 8007cfe:	f000 f829 	bl	8007d54 <__malloc_unlock>
 8007d02:	f026 0607 	bic.w	r6, r6, #7
 8007d06:	1d23      	adds	r3, r4, #4
 8007d08:	1af2      	subs	r2, r6, r3
 8007d0a:	d0ae      	beq.n	8007c6a <_malloc_r+0x22>
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	50a3      	str	r3, [r4, r2]
 8007d10:	e7ab      	b.n	8007c6a <_malloc_r+0x22>
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	6862      	ldr	r2, [r4, #4]
 8007d16:	d1dd      	bne.n	8007cd4 <_malloc_r+0x8c>
 8007d18:	f8c8 2000 	str.w	r2, [r8]
 8007d1c:	e7ec      	b.n	8007cf8 <_malloc_r+0xb0>
 8007d1e:	4623      	mov	r3, r4
 8007d20:	6864      	ldr	r4, [r4, #4]
 8007d22:	e7ac      	b.n	8007c7e <_malloc_r+0x36>
 8007d24:	4634      	mov	r4, r6
 8007d26:	6876      	ldr	r6, [r6, #4]
 8007d28:	e7b4      	b.n	8007c94 <_malloc_r+0x4c>
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	e7cc      	b.n	8007cc8 <_malloc_r+0x80>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	4638      	mov	r0, r7
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	f000 f80e 	bl	8007d54 <__malloc_unlock>
 8007d38:	e797      	b.n	8007c6a <_malloc_r+0x22>
 8007d3a:	6025      	str	r5, [r4, #0]
 8007d3c:	e7dc      	b.n	8007cf8 <_malloc_r+0xb0>
 8007d3e:	605b      	str	r3, [r3, #4]
 8007d40:	deff      	udf	#255	; 0xff
 8007d42:	bf00      	nop
 8007d44:	200004e0 	.word	0x200004e0

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f7ff b890 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200004dc 	.word	0x200004dc

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f7ff b88b 	b.w	8006e70 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	200004dc 	.word	0x200004dc

08007d60 <_Balloc>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	69c6      	ldr	r6, [r0, #28]
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	b976      	cbnz	r6, 8007d88 <_Balloc+0x28>
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f7ff ff44 	bl	8007bf8 <malloc>
 8007d70:	4602      	mov	r2, r0
 8007d72:	61e0      	str	r0, [r4, #28]
 8007d74:	b920      	cbnz	r0, 8007d80 <_Balloc+0x20>
 8007d76:	216b      	movs	r1, #107	; 0x6b
 8007d78:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <_Balloc+0x78>)
 8007d7a:	4818      	ldr	r0, [pc, #96]	; (8007ddc <_Balloc+0x7c>)
 8007d7c:	f000 fda2 	bl	80088c4 <__assert_func>
 8007d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d84:	6006      	str	r6, [r0, #0]
 8007d86:	60c6      	str	r6, [r0, #12]
 8007d88:	69e6      	ldr	r6, [r4, #28]
 8007d8a:	68f3      	ldr	r3, [r6, #12]
 8007d8c:	b183      	cbz	r3, 8007db0 <_Balloc+0x50>
 8007d8e:	69e3      	ldr	r3, [r4, #28]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d96:	b9b8      	cbnz	r0, 8007dc8 <_Balloc+0x68>
 8007d98:	2101      	movs	r1, #1
 8007d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d9e:	1d72      	adds	r2, r6, #5
 8007da0:	4620      	mov	r0, r4
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	f000 fdac 	bl	8008900 <_calloc_r>
 8007da8:	b160      	cbz	r0, 8007dc4 <_Balloc+0x64>
 8007daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dae:	e00e      	b.n	8007dce <_Balloc+0x6e>
 8007db0:	2221      	movs	r2, #33	; 0x21
 8007db2:	2104      	movs	r1, #4
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fda3 	bl	8008900 <_calloc_r>
 8007dba:	69e3      	ldr	r3, [r4, #28]
 8007dbc:	60f0      	str	r0, [r6, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e4      	bne.n	8007d8e <_Balloc+0x2e>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	6802      	ldr	r2, [r0, #0]
 8007dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dd4:	e7f7      	b.n	8007dc6 <_Balloc+0x66>
 8007dd6:	bf00      	nop
 8007dd8:	080091fd 	.word	0x080091fd
 8007ddc:	0800927d 	.word	0x0800927d

08007de0 <_Bfree>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	69c6      	ldr	r6, [r0, #28]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b976      	cbnz	r6, 8007e08 <_Bfree+0x28>
 8007dea:	2010      	movs	r0, #16
 8007dec:	f7ff ff04 	bl	8007bf8 <malloc>
 8007df0:	4602      	mov	r2, r0
 8007df2:	61e8      	str	r0, [r5, #28]
 8007df4:	b920      	cbnz	r0, 8007e00 <_Bfree+0x20>
 8007df6:	218f      	movs	r1, #143	; 0x8f
 8007df8:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <_Bfree+0x3c>)
 8007dfa:	4809      	ldr	r0, [pc, #36]	; (8007e20 <_Bfree+0x40>)
 8007dfc:	f000 fd62 	bl	80088c4 <__assert_func>
 8007e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e04:	6006      	str	r6, [r0, #0]
 8007e06:	60c6      	str	r6, [r0, #12]
 8007e08:	b13c      	cbz	r4, 8007e1a <_Bfree+0x3a>
 8007e0a:	69eb      	ldr	r3, [r5, #28]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e14:	6021      	str	r1, [r4, #0]
 8007e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	080091fd 	.word	0x080091fd
 8007e20:	0800927d 	.word	0x0800927d

08007e24 <__multadd>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4607      	mov	r7, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	461e      	mov	r6, r3
 8007e2e:	2000      	movs	r0, #0
 8007e30:	690d      	ldr	r5, [r1, #16]
 8007e32:	f101 0c14 	add.w	ip, r1, #20
 8007e36:	f8dc 3000 	ldr.w	r3, [ip]
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	b299      	uxth	r1, r3
 8007e3e:	fb02 6101 	mla	r1, r2, r1, r6
 8007e42:	0c1e      	lsrs	r6, r3, #16
 8007e44:	0c0b      	lsrs	r3, r1, #16
 8007e46:	fb02 3306 	mla	r3, r2, r6, r3
 8007e4a:	b289      	uxth	r1, r1
 8007e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e50:	4285      	cmp	r5, r0
 8007e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e56:	f84c 1b04 	str.w	r1, [ip], #4
 8007e5a:	dcec      	bgt.n	8007e36 <__multadd+0x12>
 8007e5c:	b30e      	cbz	r6, 8007ea2 <__multadd+0x7e>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc19      	bgt.n	8007e98 <__multadd+0x74>
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4638      	mov	r0, r7
 8007e68:	3101      	adds	r1, #1
 8007e6a:	f7ff ff79 	bl	8007d60 <_Balloc>
 8007e6e:	4680      	mov	r8, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__multadd+0x5a>
 8007e72:	4602      	mov	r2, r0
 8007e74:	21ba      	movs	r1, #186	; 0xba
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <__multadd+0x84>)
 8007e78:	480c      	ldr	r0, [pc, #48]	; (8007eac <__multadd+0x88>)
 8007e7a:	f000 fd23 	bl	80088c4 <__assert_func>
 8007e7e:	6922      	ldr	r2, [r4, #16]
 8007e80:	f104 010c 	add.w	r1, r4, #12
 8007e84:	3202      	adds	r2, #2
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	300c      	adds	r0, #12
 8007e8a:	f000 fd0d 	bl	80088a8 <memcpy>
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ffa5 	bl	8007de0 <_Bfree>
 8007e96:	4644      	mov	r4, r8
 8007e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	615e      	str	r6, [r3, #20]
 8007ea0:	6125      	str	r5, [r4, #16]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea8:	0800926c 	.word	0x0800926c
 8007eac:	0800927d 	.word	0x0800927d

08007eb0 <__hi0bits>:
 8007eb0:	0c02      	lsrs	r2, r0, #16
 8007eb2:	0412      	lsls	r2, r2, #16
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	b9ca      	cbnz	r2, 8007eec <__hi0bits+0x3c>
 8007eb8:	0403      	lsls	r3, r0, #16
 8007eba:	2010      	movs	r0, #16
 8007ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ec0:	bf04      	itt	eq
 8007ec2:	021b      	lsleq	r3, r3, #8
 8007ec4:	3008      	addeq	r0, #8
 8007ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007eca:	bf04      	itt	eq
 8007ecc:	011b      	lsleq	r3, r3, #4
 8007ece:	3004      	addeq	r0, #4
 8007ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ed4:	bf04      	itt	eq
 8007ed6:	009b      	lsleq	r3, r3, #2
 8007ed8:	3002      	addeq	r0, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db05      	blt.n	8007eea <__hi0bits+0x3a>
 8007ede:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ee2:	f100 0001 	add.w	r0, r0, #1
 8007ee6:	bf08      	it	eq
 8007ee8:	2020      	moveq	r0, #32
 8007eea:	4770      	bx	lr
 8007eec:	2000      	movs	r0, #0
 8007eee:	e7e5      	b.n	8007ebc <__hi0bits+0xc>

08007ef0 <__lo0bits>:
 8007ef0:	6803      	ldr	r3, [r0, #0]
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	f013 0007 	ands.w	r0, r3, #7
 8007ef8:	d00b      	beq.n	8007f12 <__lo0bits+0x22>
 8007efa:	07d9      	lsls	r1, r3, #31
 8007efc:	d421      	bmi.n	8007f42 <__lo0bits+0x52>
 8007efe:	0798      	lsls	r0, r3, #30
 8007f00:	bf49      	itett	mi
 8007f02:	085b      	lsrmi	r3, r3, #1
 8007f04:	089b      	lsrpl	r3, r3, #2
 8007f06:	2001      	movmi	r0, #1
 8007f08:	6013      	strmi	r3, [r2, #0]
 8007f0a:	bf5c      	itt	pl
 8007f0c:	2002      	movpl	r0, #2
 8007f0e:	6013      	strpl	r3, [r2, #0]
 8007f10:	4770      	bx	lr
 8007f12:	b299      	uxth	r1, r3
 8007f14:	b909      	cbnz	r1, 8007f1a <__lo0bits+0x2a>
 8007f16:	2010      	movs	r0, #16
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	b2d9      	uxtb	r1, r3
 8007f1c:	b909      	cbnz	r1, 8007f22 <__lo0bits+0x32>
 8007f1e:	3008      	adds	r0, #8
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	0719      	lsls	r1, r3, #28
 8007f24:	bf04      	itt	eq
 8007f26:	091b      	lsreq	r3, r3, #4
 8007f28:	3004      	addeq	r0, #4
 8007f2a:	0799      	lsls	r1, r3, #30
 8007f2c:	bf04      	itt	eq
 8007f2e:	089b      	lsreq	r3, r3, #2
 8007f30:	3002      	addeq	r0, #2
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d403      	bmi.n	8007f3e <__lo0bits+0x4e>
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	f100 0001 	add.w	r0, r0, #1
 8007f3c:	d003      	beq.n	8007f46 <__lo0bits+0x56>
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	4770      	bx	lr
 8007f42:	2000      	movs	r0, #0
 8007f44:	4770      	bx	lr
 8007f46:	2020      	movs	r0, #32
 8007f48:	4770      	bx	lr
	...

08007f4c <__i2b>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	460c      	mov	r4, r1
 8007f50:	2101      	movs	r1, #1
 8007f52:	f7ff ff05 	bl	8007d60 <_Balloc>
 8007f56:	4602      	mov	r2, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <__i2b+0x1a>
 8007f5a:	f240 1145 	movw	r1, #325	; 0x145
 8007f5e:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <__i2b+0x24>)
 8007f60:	4804      	ldr	r0, [pc, #16]	; (8007f74 <__i2b+0x28>)
 8007f62:	f000 fcaf 	bl	80088c4 <__assert_func>
 8007f66:	2301      	movs	r3, #1
 8007f68:	6144      	str	r4, [r0, #20]
 8007f6a:	6103      	str	r3, [r0, #16]
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	bf00      	nop
 8007f70:	0800926c 	.word	0x0800926c
 8007f74:	0800927d 	.word	0x0800927d

08007f78 <__multiply>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	4691      	mov	r9, r2
 8007f7e:	690a      	ldr	r2, [r1, #16]
 8007f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f84:	460c      	mov	r4, r1
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bfbe      	ittt	lt
 8007f8a:	460b      	movlt	r3, r1
 8007f8c:	464c      	movlt	r4, r9
 8007f8e:	4699      	movlt	r9, r3
 8007f90:	6927      	ldr	r7, [r4, #16]
 8007f92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	6861      	ldr	r1, [r4, #4]
 8007f9a:	eb07 060a 	add.w	r6, r7, sl
 8007f9e:	42b3      	cmp	r3, r6
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	bfb8      	it	lt
 8007fa4:	3101      	addlt	r1, #1
 8007fa6:	f7ff fedb 	bl	8007d60 <_Balloc>
 8007faa:	b930      	cbnz	r0, 8007fba <__multiply+0x42>
 8007fac:	4602      	mov	r2, r0
 8007fae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007fb2:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <__multiply+0x148>)
 8007fb4:	4843      	ldr	r0, [pc, #268]	; (80080c4 <__multiply+0x14c>)
 8007fb6:	f000 fc85 	bl	80088c4 <__assert_func>
 8007fba:	f100 0514 	add.w	r5, r0, #20
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fc6:	4543      	cmp	r3, r8
 8007fc8:	d321      	bcc.n	800800e <__multiply+0x96>
 8007fca:	f104 0314 	add.w	r3, r4, #20
 8007fce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007fd2:	f109 0314 	add.w	r3, r9, #20
 8007fd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007fda:	9202      	str	r2, [sp, #8]
 8007fdc:	1b3a      	subs	r2, r7, r4
 8007fde:	3a15      	subs	r2, #21
 8007fe0:	f022 0203 	bic.w	r2, r2, #3
 8007fe4:	3204      	adds	r2, #4
 8007fe6:	f104 0115 	add.w	r1, r4, #21
 8007fea:	428f      	cmp	r7, r1
 8007fec:	bf38      	it	cc
 8007fee:	2204      	movcc	r2, #4
 8007ff0:	9201      	str	r2, [sp, #4]
 8007ff2:	9a02      	ldr	r2, [sp, #8]
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d80c      	bhi.n	8008014 <__multiply+0x9c>
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	dd03      	ble.n	8008006 <__multiply+0x8e>
 8007ffe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008002:	2b00      	cmp	r3, #0
 8008004:	d05a      	beq.n	80080bc <__multiply+0x144>
 8008006:	6106      	str	r6, [r0, #16]
 8008008:	b005      	add	sp, #20
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	f843 2b04 	str.w	r2, [r3], #4
 8008012:	e7d8      	b.n	8007fc6 <__multiply+0x4e>
 8008014:	f8b3 a000 	ldrh.w	sl, [r3]
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	d023      	beq.n	8008066 <__multiply+0xee>
 800801e:	46a9      	mov	r9, r5
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	f104 0e14 	add.w	lr, r4, #20
 8008028:	f85e 2b04 	ldr.w	r2, [lr], #4
 800802c:	f8d9 1000 	ldr.w	r1, [r9]
 8008030:	fa1f fb82 	uxth.w	fp, r2
 8008034:	b289      	uxth	r1, r1
 8008036:	fb0a 110b 	mla	r1, sl, fp, r1
 800803a:	4461      	add	r1, ip
 800803c:	f8d9 c000 	ldr.w	ip, [r9]
 8008040:	0c12      	lsrs	r2, r2, #16
 8008042:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008046:	fb0a c202 	mla	r2, sl, r2, ip
 800804a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800804e:	b289      	uxth	r1, r1
 8008050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008054:	4577      	cmp	r7, lr
 8008056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800805a:	f849 1b04 	str.w	r1, [r9], #4
 800805e:	d8e3      	bhi.n	8008028 <__multiply+0xb0>
 8008060:	9a01      	ldr	r2, [sp, #4]
 8008062:	f845 c002 	str.w	ip, [r5, r2]
 8008066:	9a03      	ldr	r2, [sp, #12]
 8008068:	3304      	adds	r3, #4
 800806a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800806e:	f1b9 0f00 	cmp.w	r9, #0
 8008072:	d021      	beq.n	80080b8 <__multiply+0x140>
 8008074:	46ae      	mov	lr, r5
 8008076:	f04f 0a00 	mov.w	sl, #0
 800807a:	6829      	ldr	r1, [r5, #0]
 800807c:	f104 0c14 	add.w	ip, r4, #20
 8008080:	f8bc b000 	ldrh.w	fp, [ip]
 8008084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008088:	b289      	uxth	r1, r1
 800808a:	fb09 220b 	mla	r2, r9, fp, r2
 800808e:	4452      	add	r2, sl
 8008090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008094:	f84e 1b04 	str.w	r1, [lr], #4
 8008098:	f85c 1b04 	ldr.w	r1, [ip], #4
 800809c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080a0:	f8be 1000 	ldrh.w	r1, [lr]
 80080a4:	4567      	cmp	r7, ip
 80080a6:	fb09 110a 	mla	r1, r9, sl, r1
 80080aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80080ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080b2:	d8e5      	bhi.n	8008080 <__multiply+0x108>
 80080b4:	9a01      	ldr	r2, [sp, #4]
 80080b6:	50a9      	str	r1, [r5, r2]
 80080b8:	3504      	adds	r5, #4
 80080ba:	e79a      	b.n	8007ff2 <__multiply+0x7a>
 80080bc:	3e01      	subs	r6, #1
 80080be:	e79c      	b.n	8007ffa <__multiply+0x82>
 80080c0:	0800926c 	.word	0x0800926c
 80080c4:	0800927d 	.word	0x0800927d

080080c8 <__pow5mult>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4615      	mov	r5, r2
 80080ce:	f012 0203 	ands.w	r2, r2, #3
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	d007      	beq.n	80080e8 <__pow5mult+0x20>
 80080d8:	4c25      	ldr	r4, [pc, #148]	; (8008170 <__pow5mult+0xa8>)
 80080da:	3a01      	subs	r2, #1
 80080dc:	2300      	movs	r3, #0
 80080de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080e2:	f7ff fe9f 	bl	8007e24 <__multadd>
 80080e6:	4607      	mov	r7, r0
 80080e8:	10ad      	asrs	r5, r5, #2
 80080ea:	d03d      	beq.n	8008168 <__pow5mult+0xa0>
 80080ec:	69f4      	ldr	r4, [r6, #28]
 80080ee:	b97c      	cbnz	r4, 8008110 <__pow5mult+0x48>
 80080f0:	2010      	movs	r0, #16
 80080f2:	f7ff fd81 	bl	8007bf8 <malloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	61f0      	str	r0, [r6, #28]
 80080fa:	b928      	cbnz	r0, 8008108 <__pow5mult+0x40>
 80080fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008100:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <__pow5mult+0xac>)
 8008102:	481d      	ldr	r0, [pc, #116]	; (8008178 <__pow5mult+0xb0>)
 8008104:	f000 fbde 	bl	80088c4 <__assert_func>
 8008108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008118:	b94c      	cbnz	r4, 800812e <__pow5mult+0x66>
 800811a:	f240 2171 	movw	r1, #625	; 0x271
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ff14 	bl	8007f4c <__i2b>
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	f8c8 0008 	str.w	r0, [r8, #8]
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	07eb      	lsls	r3, r5, #31
 8008134:	d50a      	bpl.n	800814c <__pow5mult+0x84>
 8008136:	4639      	mov	r1, r7
 8008138:	4622      	mov	r2, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff ff1c 	bl	8007f78 <__multiply>
 8008140:	4680      	mov	r8, r0
 8008142:	4639      	mov	r1, r7
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff fe4b 	bl	8007de0 <_Bfree>
 800814a:	4647      	mov	r7, r8
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	d00b      	beq.n	8008168 <__pow5mult+0xa0>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	b938      	cbnz	r0, 8008164 <__pow5mult+0x9c>
 8008154:	4622      	mov	r2, r4
 8008156:	4621      	mov	r1, r4
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ff0d 	bl	8007f78 <__multiply>
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f8c0 9000 	str.w	r9, [r0]
 8008164:	4604      	mov	r4, r0
 8008166:	e7e4      	b.n	8008132 <__pow5mult+0x6a>
 8008168:	4638      	mov	r0, r7
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	bf00      	nop
 8008170:	080093c8 	.word	0x080093c8
 8008174:	080091fd 	.word	0x080091fd
 8008178:	0800927d 	.word	0x0800927d

0800817c <__lshift>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	4607      	mov	r7, r0
 8008184:	4691      	mov	r9, r2
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	6849      	ldr	r1, [r1, #4]
 800818a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008194:	f108 0601 	add.w	r6, r8, #1
 8008198:	42b3      	cmp	r3, r6
 800819a:	db0b      	blt.n	80081b4 <__lshift+0x38>
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff fddf 	bl	8007d60 <_Balloc>
 80081a2:	4605      	mov	r5, r0
 80081a4:	b948      	cbnz	r0, 80081ba <__lshift+0x3e>
 80081a6:	4602      	mov	r2, r0
 80081a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80081ac:	4b27      	ldr	r3, [pc, #156]	; (800824c <__lshift+0xd0>)
 80081ae:	4828      	ldr	r0, [pc, #160]	; (8008250 <__lshift+0xd4>)
 80081b0:	f000 fb88 	bl	80088c4 <__assert_func>
 80081b4:	3101      	adds	r1, #1
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e7ee      	b.n	8008198 <__lshift+0x1c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f100 0114 	add.w	r1, r0, #20
 80081c0:	f100 0210 	add.w	r2, r0, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	4553      	cmp	r3, sl
 80081c8:	db33      	blt.n	8008232 <__lshift+0xb6>
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d0:	f104 0314 	add.w	r3, r4, #20
 80081d4:	f019 091f 	ands.w	r9, r9, #31
 80081d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e0:	d02b      	beq.n	800823a <__lshift+0xbe>
 80081e2:	468a      	mov	sl, r1
 80081e4:	2200      	movs	r2, #0
 80081e6:	f1c9 0e20 	rsb	lr, r9, #32
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	fa00 f009 	lsl.w	r0, r0, r9
 80081f0:	4310      	orrs	r0, r2
 80081f2:	f84a 0b04 	str.w	r0, [sl], #4
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	459c      	cmp	ip, r3
 80081fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008200:	d8f3      	bhi.n	80081ea <__lshift+0x6e>
 8008202:	ebac 0304 	sub.w	r3, ip, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	f104 0015 	add.w	r0, r4, #21
 8008212:	4584      	cmp	ip, r0
 8008214:	bf38      	it	cc
 8008216:	2304      	movcc	r3, #4
 8008218:	50ca      	str	r2, [r1, r3]
 800821a:	b10a      	cbz	r2, 8008220 <__lshift+0xa4>
 800821c:	f108 0602 	add.w	r6, r8, #2
 8008220:	3e01      	subs	r6, #1
 8008222:	4638      	mov	r0, r7
 8008224:	4621      	mov	r1, r4
 8008226:	612e      	str	r6, [r5, #16]
 8008228:	f7ff fdda 	bl	8007de0 <_Bfree>
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f842 0f04 	str.w	r0, [r2, #4]!
 8008236:	3301      	adds	r3, #1
 8008238:	e7c5      	b.n	80081c6 <__lshift+0x4a>
 800823a:	3904      	subs	r1, #4
 800823c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008240:	459c      	cmp	ip, r3
 8008242:	f841 2f04 	str.w	r2, [r1, #4]!
 8008246:	d8f9      	bhi.n	800823c <__lshift+0xc0>
 8008248:	e7ea      	b.n	8008220 <__lshift+0xa4>
 800824a:	bf00      	nop
 800824c:	0800926c 	.word	0x0800926c
 8008250:	0800927d 	.word	0x0800927d

08008254 <__mcmp>:
 8008254:	4603      	mov	r3, r0
 8008256:	690a      	ldr	r2, [r1, #16]
 8008258:	6900      	ldr	r0, [r0, #16]
 800825a:	b530      	push	{r4, r5, lr}
 800825c:	1a80      	subs	r0, r0, r2
 800825e:	d10d      	bne.n	800827c <__mcmp+0x28>
 8008260:	3314      	adds	r3, #20
 8008262:	3114      	adds	r1, #20
 8008264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800826c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008274:	4295      	cmp	r5, r2
 8008276:	d002      	beq.n	800827e <__mcmp+0x2a>
 8008278:	d304      	bcc.n	8008284 <__mcmp+0x30>
 800827a:	2001      	movs	r0, #1
 800827c:	bd30      	pop	{r4, r5, pc}
 800827e:	42a3      	cmp	r3, r4
 8008280:	d3f4      	bcc.n	800826c <__mcmp+0x18>
 8008282:	e7fb      	b.n	800827c <__mcmp+0x28>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e7f8      	b.n	800827c <__mcmp+0x28>
	...

0800828c <__mdiff>:
 800828c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	460d      	mov	r5, r1
 8008292:	4607      	mov	r7, r0
 8008294:	4611      	mov	r1, r2
 8008296:	4628      	mov	r0, r5
 8008298:	4614      	mov	r4, r2
 800829a:	f7ff ffdb 	bl	8008254 <__mcmp>
 800829e:	1e06      	subs	r6, r0, #0
 80082a0:	d111      	bne.n	80082c6 <__mdiff+0x3a>
 80082a2:	4631      	mov	r1, r6
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff fd5b 	bl	8007d60 <_Balloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__mdiff+0x2e>
 80082ae:	f240 2137 	movw	r1, #567	; 0x237
 80082b2:	4b3a      	ldr	r3, [pc, #232]	; (800839c <__mdiff+0x110>)
 80082b4:	483a      	ldr	r0, [pc, #232]	; (80083a0 <__mdiff+0x114>)
 80082b6:	f000 fb05 	bl	80088c4 <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80082c0:	4610      	mov	r0, r2
 80082c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	bfa4      	itt	ge
 80082c8:	4623      	movge	r3, r4
 80082ca:	462c      	movge	r4, r5
 80082cc:	4638      	mov	r0, r7
 80082ce:	6861      	ldr	r1, [r4, #4]
 80082d0:	bfa6      	itte	ge
 80082d2:	461d      	movge	r5, r3
 80082d4:	2600      	movge	r6, #0
 80082d6:	2601      	movlt	r6, #1
 80082d8:	f7ff fd42 	bl	8007d60 <_Balloc>
 80082dc:	4602      	mov	r2, r0
 80082de:	b918      	cbnz	r0, 80082e8 <__mdiff+0x5c>
 80082e0:	f240 2145 	movw	r1, #581	; 0x245
 80082e4:	4b2d      	ldr	r3, [pc, #180]	; (800839c <__mdiff+0x110>)
 80082e6:	e7e5      	b.n	80082b4 <__mdiff+0x28>
 80082e8:	f102 0814 	add.w	r8, r2, #20
 80082ec:	46c2      	mov	sl, r8
 80082ee:	f04f 0c00 	mov.w	ip, #0
 80082f2:	6927      	ldr	r7, [r4, #16]
 80082f4:	60c6      	str	r6, [r0, #12]
 80082f6:	692e      	ldr	r6, [r5, #16]
 80082f8:	f104 0014 	add.w	r0, r4, #20
 80082fc:	f105 0914 	add.w	r9, r5, #20
 8008300:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008308:	3410      	adds	r4, #16
 800830a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800830e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008312:	fa1f f18b 	uxth.w	r1, fp
 8008316:	4461      	add	r1, ip
 8008318:	fa1f fc83 	uxth.w	ip, r3
 800831c:	0c1b      	lsrs	r3, r3, #16
 800831e:	eba1 010c 	sub.w	r1, r1, ip
 8008322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800832a:	b289      	uxth	r1, r1
 800832c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008330:	454e      	cmp	r6, r9
 8008332:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008336:	f84a 1b04 	str.w	r1, [sl], #4
 800833a:	d8e6      	bhi.n	800830a <__mdiff+0x7e>
 800833c:	1b73      	subs	r3, r6, r5
 800833e:	3b15      	subs	r3, #21
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	3515      	adds	r5, #21
 8008346:	3304      	adds	r3, #4
 8008348:	42ae      	cmp	r6, r5
 800834a:	bf38      	it	cc
 800834c:	2304      	movcc	r3, #4
 800834e:	4418      	add	r0, r3
 8008350:	4443      	add	r3, r8
 8008352:	461e      	mov	r6, r3
 8008354:	4605      	mov	r5, r0
 8008356:	4575      	cmp	r5, lr
 8008358:	d30e      	bcc.n	8008378 <__mdiff+0xec>
 800835a:	f10e 0103 	add.w	r1, lr, #3
 800835e:	1a09      	subs	r1, r1, r0
 8008360:	f021 0103 	bic.w	r1, r1, #3
 8008364:	3803      	subs	r0, #3
 8008366:	4586      	cmp	lr, r0
 8008368:	bf38      	it	cc
 800836a:	2100      	movcc	r1, #0
 800836c:	440b      	add	r3, r1
 800836e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008372:	b189      	cbz	r1, 8008398 <__mdiff+0x10c>
 8008374:	6117      	str	r7, [r2, #16]
 8008376:	e7a3      	b.n	80082c0 <__mdiff+0x34>
 8008378:	f855 8b04 	ldr.w	r8, [r5], #4
 800837c:	fa1f f188 	uxth.w	r1, r8
 8008380:	4461      	add	r1, ip
 8008382:	140c      	asrs	r4, r1, #16
 8008384:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008388:	b289      	uxth	r1, r1
 800838a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800838e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008392:	f846 1b04 	str.w	r1, [r6], #4
 8008396:	e7de      	b.n	8008356 <__mdiff+0xca>
 8008398:	3f01      	subs	r7, #1
 800839a:	e7e8      	b.n	800836e <__mdiff+0xe2>
 800839c:	0800926c 	.word	0x0800926c
 80083a0:	0800927d 	.word	0x0800927d

080083a4 <__d2b>:
 80083a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083a6:	2101      	movs	r1, #1
 80083a8:	4617      	mov	r7, r2
 80083aa:	461c      	mov	r4, r3
 80083ac:	9e08      	ldr	r6, [sp, #32]
 80083ae:	f7ff fcd7 	bl	8007d60 <_Balloc>
 80083b2:	4605      	mov	r5, r0
 80083b4:	b930      	cbnz	r0, 80083c4 <__d2b+0x20>
 80083b6:	4602      	mov	r2, r0
 80083b8:	f240 310f 	movw	r1, #783	; 0x30f
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <__d2b+0xa4>)
 80083be:	4823      	ldr	r0, [pc, #140]	; (800844c <__d2b+0xa8>)
 80083c0:	f000 fa80 	bl	80088c4 <__assert_func>
 80083c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80083c8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80083cc:	bb24      	cbnz	r4, 8008418 <__d2b+0x74>
 80083ce:	2f00      	cmp	r7, #0
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	d026      	beq.n	8008422 <__d2b+0x7e>
 80083d4:	4668      	mov	r0, sp
 80083d6:	9700      	str	r7, [sp, #0]
 80083d8:	f7ff fd8a 	bl	8007ef0 <__lo0bits>
 80083dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083e0:	b1e8      	cbz	r0, 800841e <__d2b+0x7a>
 80083e2:	f1c0 0320 	rsb	r3, r0, #32
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	430b      	orrs	r3, r1
 80083ec:	40c2      	lsrs	r2, r0
 80083ee:	616b      	str	r3, [r5, #20]
 80083f0:	9201      	str	r2, [sp, #4]
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bf14      	ite	ne
 80083f8:	2102      	movne	r1, #2
 80083fa:	2101      	moveq	r1, #1
 80083fc:	61ab      	str	r3, [r5, #24]
 80083fe:	6129      	str	r1, [r5, #16]
 8008400:	b1bc      	cbz	r4, 8008432 <__d2b+0x8e>
 8008402:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008406:	4404      	add	r4, r0
 8008408:	6034      	str	r4, [r6, #0]
 800840a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800840e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008410:	6018      	str	r0, [r3, #0]
 8008412:	4628      	mov	r0, r5
 8008414:	b003      	add	sp, #12
 8008416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800841c:	e7d7      	b.n	80083ce <__d2b+0x2a>
 800841e:	6169      	str	r1, [r5, #20]
 8008420:	e7e7      	b.n	80083f2 <__d2b+0x4e>
 8008422:	a801      	add	r0, sp, #4
 8008424:	f7ff fd64 	bl	8007ef0 <__lo0bits>
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	2101      	movs	r1, #1
 800842c:	616b      	str	r3, [r5, #20]
 800842e:	3020      	adds	r0, #32
 8008430:	e7e5      	b.n	80083fe <__d2b+0x5a>
 8008432:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008436:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800843a:	6030      	str	r0, [r6, #0]
 800843c:	6918      	ldr	r0, [r3, #16]
 800843e:	f7ff fd37 	bl	8007eb0 <__hi0bits>
 8008442:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008446:	e7e2      	b.n	800840e <__d2b+0x6a>
 8008448:	0800926c 	.word	0x0800926c
 800844c:	0800927d 	.word	0x0800927d

08008450 <__ssputs_r>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	461f      	mov	r7, r3
 8008456:	688e      	ldr	r6, [r1, #8]
 8008458:	4682      	mov	sl, r0
 800845a:	42be      	cmp	r6, r7
 800845c:	460c      	mov	r4, r1
 800845e:	4690      	mov	r8, r2
 8008460:	680b      	ldr	r3, [r1, #0]
 8008462:	d82c      	bhi.n	80084be <__ssputs_r+0x6e>
 8008464:	898a      	ldrh	r2, [r1, #12]
 8008466:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800846a:	d026      	beq.n	80084ba <__ssputs_r+0x6a>
 800846c:	6965      	ldr	r5, [r4, #20]
 800846e:	6909      	ldr	r1, [r1, #16]
 8008470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008474:	eba3 0901 	sub.w	r9, r3, r1
 8008478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800847c:	1c7b      	adds	r3, r7, #1
 800847e:	444b      	add	r3, r9
 8008480:	106d      	asrs	r5, r5, #1
 8008482:	429d      	cmp	r5, r3
 8008484:	bf38      	it	cc
 8008486:	461d      	movcc	r5, r3
 8008488:	0553      	lsls	r3, r2, #21
 800848a:	d527      	bpl.n	80084dc <__ssputs_r+0x8c>
 800848c:	4629      	mov	r1, r5
 800848e:	f7ff fbdb 	bl	8007c48 <_malloc_r>
 8008492:	4606      	mov	r6, r0
 8008494:	b360      	cbz	r0, 80084f0 <__ssputs_r+0xa0>
 8008496:	464a      	mov	r2, r9
 8008498:	6921      	ldr	r1, [r4, #16]
 800849a:	f000 fa05 	bl	80088a8 <memcpy>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	6126      	str	r6, [r4, #16]
 80084ac:	444e      	add	r6, r9
 80084ae:	6026      	str	r6, [r4, #0]
 80084b0:	463e      	mov	r6, r7
 80084b2:	6165      	str	r5, [r4, #20]
 80084b4:	eba5 0509 	sub.w	r5, r5, r9
 80084b8:	60a5      	str	r5, [r4, #8]
 80084ba:	42be      	cmp	r6, r7
 80084bc:	d900      	bls.n	80084c0 <__ssputs_r+0x70>
 80084be:	463e      	mov	r6, r7
 80084c0:	4632      	mov	r2, r6
 80084c2:	4641      	mov	r1, r8
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	f000 f9c5 	bl	8008854 <memmove>
 80084ca:	2000      	movs	r0, #0
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	1b9b      	subs	r3, r3, r6
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	4433      	add	r3, r6
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	462a      	mov	r2, r5
 80084de:	f000 fa35 	bl	800894c <_realloc_r>
 80084e2:	4606      	mov	r6, r0
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1e0      	bne.n	80084aa <__ssputs_r+0x5a>
 80084e8:	4650      	mov	r0, sl
 80084ea:	6921      	ldr	r1, [r4, #16]
 80084ec:	f7ff fb3c 	bl	8007b68 <_free_r>
 80084f0:	230c      	movs	r3, #12
 80084f2:	f8ca 3000 	str.w	r3, [sl]
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e7e9      	b.n	80084d8 <__ssputs_r+0x88>

08008504 <_svfiprintf_r>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4698      	mov	r8, r3
 800850a:	898b      	ldrh	r3, [r1, #12]
 800850c:	4607      	mov	r7, r0
 800850e:	061b      	lsls	r3, r3, #24
 8008510:	460d      	mov	r5, r1
 8008512:	4614      	mov	r4, r2
 8008514:	b09d      	sub	sp, #116	; 0x74
 8008516:	d50e      	bpl.n	8008536 <_svfiprintf_r+0x32>
 8008518:	690b      	ldr	r3, [r1, #16]
 800851a:	b963      	cbnz	r3, 8008536 <_svfiprintf_r+0x32>
 800851c:	2140      	movs	r1, #64	; 0x40
 800851e:	f7ff fb93 	bl	8007c48 <_malloc_r>
 8008522:	6028      	str	r0, [r5, #0]
 8008524:	6128      	str	r0, [r5, #16]
 8008526:	b920      	cbnz	r0, 8008532 <_svfiprintf_r+0x2e>
 8008528:	230c      	movs	r3, #12
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e0d0      	b.n	80086d4 <_svfiprintf_r+0x1d0>
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	616b      	str	r3, [r5, #20]
 8008536:	2300      	movs	r3, #0
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	2320      	movs	r3, #32
 800853c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008540:	2330      	movs	r3, #48	; 0x30
 8008542:	f04f 0901 	mov.w	r9, #1
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80086ec <_svfiprintf_r+0x1e8>
 800854e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008552:	4623      	mov	r3, r4
 8008554:	469a      	mov	sl, r3
 8008556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855a:	b10a      	cbz	r2, 8008560 <_svfiprintf_r+0x5c>
 800855c:	2a25      	cmp	r2, #37	; 0x25
 800855e:	d1f9      	bne.n	8008554 <_svfiprintf_r+0x50>
 8008560:	ebba 0b04 	subs.w	fp, sl, r4
 8008564:	d00b      	beq.n	800857e <_svfiprintf_r+0x7a>
 8008566:	465b      	mov	r3, fp
 8008568:	4622      	mov	r2, r4
 800856a:	4629      	mov	r1, r5
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff ff6f 	bl	8008450 <__ssputs_r>
 8008572:	3001      	adds	r0, #1
 8008574:	f000 80a9 	beq.w	80086ca <_svfiprintf_r+0x1c6>
 8008578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857a:	445a      	add	r2, fp
 800857c:	9209      	str	r2, [sp, #36]	; 0x24
 800857e:	f89a 3000 	ldrb.w	r3, [sl]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80a1 	beq.w	80086ca <_svfiprintf_r+0x1c6>
 8008588:	2300      	movs	r3, #0
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008592:	f10a 0a01 	add.w	sl, sl, #1
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859e:	931a      	str	r3, [sp, #104]	; 0x68
 80085a0:	4654      	mov	r4, sl
 80085a2:	2205      	movs	r2, #5
 80085a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a8:	4850      	ldr	r0, [pc, #320]	; (80086ec <_svfiprintf_r+0x1e8>)
 80085aa:	f7fe fc62 	bl	8006e72 <memchr>
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	b9d8      	cbnz	r0, 80085ea <_svfiprintf_r+0xe6>
 80085b2:	06d0      	lsls	r0, r2, #27
 80085b4:	bf44      	itt	mi
 80085b6:	2320      	movmi	r3, #32
 80085b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085bc:	0711      	lsls	r1, r2, #28
 80085be:	bf44      	itt	mi
 80085c0:	232b      	movmi	r3, #43	; 0x2b
 80085c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ca:	2b2a      	cmp	r3, #42	; 0x2a
 80085cc:	d015      	beq.n	80085fa <_svfiprintf_r+0xf6>
 80085ce:	4654      	mov	r4, sl
 80085d0:	2000      	movs	r0, #0
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	9a07      	ldr	r2, [sp, #28]
 80085d8:	4621      	mov	r1, r4
 80085da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085de:	3b30      	subs	r3, #48	; 0x30
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	d94d      	bls.n	8008680 <_svfiprintf_r+0x17c>
 80085e4:	b1b0      	cbz	r0, 8008614 <_svfiprintf_r+0x110>
 80085e6:	9207      	str	r2, [sp, #28]
 80085e8:	e014      	b.n	8008614 <_svfiprintf_r+0x110>
 80085ea:	eba0 0308 	sub.w	r3, r0, r8
 80085ee:	fa09 f303 	lsl.w	r3, r9, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	46a2      	mov	sl, r4
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	e7d2      	b.n	80085a0 <_svfiprintf_r+0x9c>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	1d19      	adds	r1, r3, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	9103      	str	r1, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfbb      	ittet	lt
 8008606:	425b      	neglt	r3, r3
 8008608:	f042 0202 	orrlt.w	r2, r2, #2
 800860c:	9307      	strge	r3, [sp, #28]
 800860e:	9307      	strlt	r3, [sp, #28]
 8008610:	bfb8      	it	lt
 8008612:	9204      	strlt	r2, [sp, #16]
 8008614:	7823      	ldrb	r3, [r4, #0]
 8008616:	2b2e      	cmp	r3, #46	; 0x2e
 8008618:	d10c      	bne.n	8008634 <_svfiprintf_r+0x130>
 800861a:	7863      	ldrb	r3, [r4, #1]
 800861c:	2b2a      	cmp	r3, #42	; 0x2a
 800861e:	d134      	bne.n	800868a <_svfiprintf_r+0x186>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	3402      	adds	r4, #2
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9203      	str	r2, [sp, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfb8      	it	lt
 800862e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008632:	9305      	str	r3, [sp, #20]
 8008634:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80086f0 <_svfiprintf_r+0x1ec>
 8008638:	2203      	movs	r2, #3
 800863a:	4650      	mov	r0, sl
 800863c:	7821      	ldrb	r1, [r4, #0]
 800863e:	f7fe fc18 	bl	8006e72 <memchr>
 8008642:	b138      	cbz	r0, 8008654 <_svfiprintf_r+0x150>
 8008644:	2240      	movs	r2, #64	; 0x40
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	4082      	lsls	r2, r0
 800864e:	4313      	orrs	r3, r2
 8008650:	3401      	adds	r4, #1
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008658:	2206      	movs	r2, #6
 800865a:	4826      	ldr	r0, [pc, #152]	; (80086f4 <_svfiprintf_r+0x1f0>)
 800865c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008660:	f7fe fc07 	bl	8006e72 <memchr>
 8008664:	2800      	cmp	r0, #0
 8008666:	d038      	beq.n	80086da <_svfiprintf_r+0x1d6>
 8008668:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <_svfiprintf_r+0x1f4>)
 800866a:	bb1b      	cbnz	r3, 80086b4 <_svfiprintf_r+0x1b0>
 800866c:	9b03      	ldr	r3, [sp, #12]
 800866e:	3307      	adds	r3, #7
 8008670:	f023 0307 	bic.w	r3, r3, #7
 8008674:	3308      	adds	r3, #8
 8008676:	9303      	str	r3, [sp, #12]
 8008678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867a:	4433      	add	r3, r6
 800867c:	9309      	str	r3, [sp, #36]	; 0x24
 800867e:	e768      	b.n	8008552 <_svfiprintf_r+0x4e>
 8008680:	460c      	mov	r4, r1
 8008682:	2001      	movs	r0, #1
 8008684:	fb0c 3202 	mla	r2, ip, r2, r3
 8008688:	e7a6      	b.n	80085d8 <_svfiprintf_r+0xd4>
 800868a:	2300      	movs	r3, #0
 800868c:	f04f 0c0a 	mov.w	ip, #10
 8008690:	4619      	mov	r1, r3
 8008692:	3401      	adds	r4, #1
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	4620      	mov	r0, r4
 8008698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869c:	3a30      	subs	r2, #48	; 0x30
 800869e:	2a09      	cmp	r2, #9
 80086a0:	d903      	bls.n	80086aa <_svfiprintf_r+0x1a6>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0c6      	beq.n	8008634 <_svfiprintf_r+0x130>
 80086a6:	9105      	str	r1, [sp, #20]
 80086a8:	e7c4      	b.n	8008634 <_svfiprintf_r+0x130>
 80086aa:	4604      	mov	r4, r0
 80086ac:	2301      	movs	r3, #1
 80086ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b2:	e7f0      	b.n	8008696 <_svfiprintf_r+0x192>
 80086b4:	ab03      	add	r3, sp, #12
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	462a      	mov	r2, r5
 80086ba:	4638      	mov	r0, r7
 80086bc:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <_svfiprintf_r+0x1f8>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	f7fd fe70 	bl	80063a4 <_printf_float>
 80086c4:	1c42      	adds	r2, r0, #1
 80086c6:	4606      	mov	r6, r0
 80086c8:	d1d6      	bne.n	8008678 <_svfiprintf_r+0x174>
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	065b      	lsls	r3, r3, #25
 80086ce:	f53f af2d 	bmi.w	800852c <_svfiprintf_r+0x28>
 80086d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d4:	b01d      	add	sp, #116	; 0x74
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086da:	ab03      	add	r3, sp, #12
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	462a      	mov	r2, r5
 80086e0:	4638      	mov	r0, r7
 80086e2:	4b06      	ldr	r3, [pc, #24]	; (80086fc <_svfiprintf_r+0x1f8>)
 80086e4:	a904      	add	r1, sp, #16
 80086e6:	f7fe f8fd 	bl	80068e4 <_printf_i>
 80086ea:	e7eb      	b.n	80086c4 <_svfiprintf_r+0x1c0>
 80086ec:	080093d4 	.word	0x080093d4
 80086f0:	080093da 	.word	0x080093da
 80086f4:	080093de 	.word	0x080093de
 80086f8:	080063a5 	.word	0x080063a5
 80086fc:	08008451 	.word	0x08008451

08008700 <__sflush_r>:
 8008700:	898a      	ldrh	r2, [r1, #12]
 8008702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008704:	4605      	mov	r5, r0
 8008706:	0710      	lsls	r0, r2, #28
 8008708:	460c      	mov	r4, r1
 800870a:	d457      	bmi.n	80087bc <__sflush_r+0xbc>
 800870c:	684b      	ldr	r3, [r1, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	dc04      	bgt.n	800871c <__sflush_r+0x1c>
 8008712:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	dc01      	bgt.n	800871c <__sflush_r+0x1c>
 8008718:	2000      	movs	r0, #0
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800871e:	2e00      	cmp	r6, #0
 8008720:	d0fa      	beq.n	8008718 <__sflush_r+0x18>
 8008722:	2300      	movs	r3, #0
 8008724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008728:	682f      	ldr	r7, [r5, #0]
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	d032      	beq.n	8008796 <__sflush_r+0x96>
 8008730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	075a      	lsls	r2, r3, #29
 8008736:	d505      	bpl.n	8008744 <__sflush_r+0x44>
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	1ac0      	subs	r0, r0, r3
 800873c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800873e:	b10b      	cbz	r3, 8008744 <__sflush_r+0x44>
 8008740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008742:	1ac0      	subs	r0, r0, r3
 8008744:	2300      	movs	r3, #0
 8008746:	4602      	mov	r2, r0
 8008748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874a:	4628      	mov	r0, r5
 800874c:	6a21      	ldr	r1, [r4, #32]
 800874e:	47b0      	blx	r6
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	d106      	bne.n	8008764 <__sflush_r+0x64>
 8008756:	6829      	ldr	r1, [r5, #0]
 8008758:	291d      	cmp	r1, #29
 800875a:	d82b      	bhi.n	80087b4 <__sflush_r+0xb4>
 800875c:	4a28      	ldr	r2, [pc, #160]	; (8008800 <__sflush_r+0x100>)
 800875e:	410a      	asrs	r2, r1
 8008760:	07d6      	lsls	r6, r2, #31
 8008762:	d427      	bmi.n	80087b4 <__sflush_r+0xb4>
 8008764:	2200      	movs	r2, #0
 8008766:	6062      	str	r2, [r4, #4]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	04d9      	lsls	r1, r3, #19
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	d504      	bpl.n	800877a <__sflush_r+0x7a>
 8008770:	1c42      	adds	r2, r0, #1
 8008772:	d101      	bne.n	8008778 <__sflush_r+0x78>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b903      	cbnz	r3, 800877a <__sflush_r+0x7a>
 8008778:	6560      	str	r0, [r4, #84]	; 0x54
 800877a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877c:	602f      	str	r7, [r5, #0]
 800877e:	2900      	cmp	r1, #0
 8008780:	d0ca      	beq.n	8008718 <__sflush_r+0x18>
 8008782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008786:	4299      	cmp	r1, r3
 8008788:	d002      	beq.n	8008790 <__sflush_r+0x90>
 800878a:	4628      	mov	r0, r5
 800878c:	f7ff f9ec 	bl	8007b68 <_free_r>
 8008790:	2000      	movs	r0, #0
 8008792:	6360      	str	r0, [r4, #52]	; 0x34
 8008794:	e7c1      	b.n	800871a <__sflush_r+0x1a>
 8008796:	2301      	movs	r3, #1
 8008798:	4628      	mov	r0, r5
 800879a:	47b0      	blx	r6
 800879c:	1c41      	adds	r1, r0, #1
 800879e:	d1c8      	bne.n	8008732 <__sflush_r+0x32>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0c5      	beq.n	8008732 <__sflush_r+0x32>
 80087a6:	2b1d      	cmp	r3, #29
 80087a8:	d001      	beq.n	80087ae <__sflush_r+0xae>
 80087aa:	2b16      	cmp	r3, #22
 80087ac:	d101      	bne.n	80087b2 <__sflush_r+0xb2>
 80087ae:	602f      	str	r7, [r5, #0]
 80087b0:	e7b2      	b.n	8008718 <__sflush_r+0x18>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	e7ae      	b.n	800871a <__sflush_r+0x1a>
 80087bc:	690f      	ldr	r7, [r1, #16]
 80087be:	2f00      	cmp	r7, #0
 80087c0:	d0aa      	beq.n	8008718 <__sflush_r+0x18>
 80087c2:	0793      	lsls	r3, r2, #30
 80087c4:	bf18      	it	ne
 80087c6:	2300      	movne	r3, #0
 80087c8:	680e      	ldr	r6, [r1, #0]
 80087ca:	bf08      	it	eq
 80087cc:	694b      	ldreq	r3, [r1, #20]
 80087ce:	1bf6      	subs	r6, r6, r7
 80087d0:	600f      	str	r7, [r1, #0]
 80087d2:	608b      	str	r3, [r1, #8]
 80087d4:	2e00      	cmp	r6, #0
 80087d6:	dd9f      	ble.n	8008718 <__sflush_r+0x18>
 80087d8:	4633      	mov	r3, r6
 80087da:	463a      	mov	r2, r7
 80087dc:	4628      	mov	r0, r5
 80087de:	6a21      	ldr	r1, [r4, #32]
 80087e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80087e4:	47e0      	blx	ip
 80087e6:	2800      	cmp	r0, #0
 80087e8:	dc06      	bgt.n	80087f8 <__sflush_r+0xf8>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e790      	b.n	800871a <__sflush_r+0x1a>
 80087f8:	4407      	add	r7, r0
 80087fa:	1a36      	subs	r6, r6, r0
 80087fc:	e7ea      	b.n	80087d4 <__sflush_r+0xd4>
 80087fe:	bf00      	nop
 8008800:	dfbffffe 	.word	0xdfbffffe

08008804 <_fflush_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	690b      	ldr	r3, [r1, #16]
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b913      	cbnz	r3, 8008814 <_fflush_r+0x10>
 800880e:	2500      	movs	r5, #0
 8008810:	4628      	mov	r0, r5
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	b118      	cbz	r0, 800881e <_fflush_r+0x1a>
 8008816:	6a03      	ldr	r3, [r0, #32]
 8008818:	b90b      	cbnz	r3, 800881e <_fflush_r+0x1a>
 800881a:	f7fe fa11 	bl	8006c40 <__sinit>
 800881e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f3      	beq.n	800880e <_fflush_r+0xa>
 8008826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008828:	07d0      	lsls	r0, r2, #31
 800882a:	d404      	bmi.n	8008836 <_fflush_r+0x32>
 800882c:	0599      	lsls	r1, r3, #22
 800882e:	d402      	bmi.n	8008836 <_fflush_r+0x32>
 8008830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008832:	f7fe fb1c 	bl	8006e6e <__retarget_lock_acquire_recursive>
 8008836:	4628      	mov	r0, r5
 8008838:	4621      	mov	r1, r4
 800883a:	f7ff ff61 	bl	8008700 <__sflush_r>
 800883e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008840:	4605      	mov	r5, r0
 8008842:	07da      	lsls	r2, r3, #31
 8008844:	d4e4      	bmi.n	8008810 <_fflush_r+0xc>
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	059b      	lsls	r3, r3, #22
 800884a:	d4e1      	bmi.n	8008810 <_fflush_r+0xc>
 800884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884e:	f7fe fb0f 	bl	8006e70 <__retarget_lock_release_recursive>
 8008852:	e7dd      	b.n	8008810 <_fflush_r+0xc>

08008854 <memmove>:
 8008854:	4288      	cmp	r0, r1
 8008856:	b510      	push	{r4, lr}
 8008858:	eb01 0402 	add.w	r4, r1, r2
 800885c:	d902      	bls.n	8008864 <memmove+0x10>
 800885e:	4284      	cmp	r4, r0
 8008860:	4623      	mov	r3, r4
 8008862:	d807      	bhi.n	8008874 <memmove+0x20>
 8008864:	1e43      	subs	r3, r0, #1
 8008866:	42a1      	cmp	r1, r4
 8008868:	d008      	beq.n	800887c <memmove+0x28>
 800886a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800886e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008872:	e7f8      	b.n	8008866 <memmove+0x12>
 8008874:	4601      	mov	r1, r0
 8008876:	4402      	add	r2, r0
 8008878:	428a      	cmp	r2, r1
 800887a:	d100      	bne.n	800887e <memmove+0x2a>
 800887c:	bd10      	pop	{r4, pc}
 800887e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008886:	e7f7      	b.n	8008878 <memmove+0x24>

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	2300      	movs	r3, #0
 800888c:	4d05      	ldr	r5, [pc, #20]	; (80088a4 <_sbrk_r+0x1c>)
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	f7f9 fb44 	bl	8001f20 <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	200004d8 	.word	0x200004d8

080088a8 <memcpy>:
 80088a8:	440a      	add	r2, r1
 80088aa:	4291      	cmp	r1, r2
 80088ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b0:	d100      	bne.n	80088b4 <memcpy+0xc>
 80088b2:	4770      	bx	lr
 80088b4:	b510      	push	{r4, lr}
 80088b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ba:	4291      	cmp	r1, r2
 80088bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c0:	d1f9      	bne.n	80088b6 <memcpy+0xe>
 80088c2:	bd10      	pop	{r4, pc}

080088c4 <__assert_func>:
 80088c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c6:	4614      	mov	r4, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <__assert_func+0x2c>)
 80088cc:	4605      	mov	r5, r0
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68d8      	ldr	r0, [r3, #12]
 80088d2:	b14c      	cbz	r4, 80088e8 <__assert_func+0x24>
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <__assert_func+0x30>)
 80088d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088da:	9100      	str	r1, [sp, #0]
 80088dc:	462b      	mov	r3, r5
 80088de:	4906      	ldr	r1, [pc, #24]	; (80088f8 <__assert_func+0x34>)
 80088e0:	f000 f870 	bl	80089c4 <fiprintf>
 80088e4:	f000 f880 	bl	80089e8 <abort>
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <__assert_func+0x38>)
 80088ea:	461c      	mov	r4, r3
 80088ec:	e7f3      	b.n	80088d6 <__assert_func+0x12>
 80088ee:	bf00      	nop
 80088f0:	20000068 	.word	0x20000068
 80088f4:	080093ef 	.word	0x080093ef
 80088f8:	080093fc 	.word	0x080093fc
 80088fc:	0800942a 	.word	0x0800942a

08008900 <_calloc_r>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	fba1 5402 	umull	r5, r4, r1, r2
 8008906:	b934      	cbnz	r4, 8008916 <_calloc_r+0x16>
 8008908:	4629      	mov	r1, r5
 800890a:	f7ff f99d 	bl	8007c48 <_malloc_r>
 800890e:	4606      	mov	r6, r0
 8008910:	b928      	cbnz	r0, 800891e <_calloc_r+0x1e>
 8008912:	4630      	mov	r0, r6
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	220c      	movs	r2, #12
 8008918:	2600      	movs	r6, #0
 800891a:	6002      	str	r2, [r0, #0]
 800891c:	e7f9      	b.n	8008912 <_calloc_r+0x12>
 800891e:	462a      	mov	r2, r5
 8008920:	4621      	mov	r1, r4
 8008922:	f7fe fa26 	bl	8006d72 <memset>
 8008926:	e7f4      	b.n	8008912 <_calloc_r+0x12>

08008928 <__ascii_mbtowc>:
 8008928:	b082      	sub	sp, #8
 800892a:	b901      	cbnz	r1, 800892e <__ascii_mbtowc+0x6>
 800892c:	a901      	add	r1, sp, #4
 800892e:	b142      	cbz	r2, 8008942 <__ascii_mbtowc+0x1a>
 8008930:	b14b      	cbz	r3, 8008946 <__ascii_mbtowc+0x1e>
 8008932:	7813      	ldrb	r3, [r2, #0]
 8008934:	600b      	str	r3, [r1, #0]
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	1e10      	subs	r0, r2, #0
 800893a:	bf18      	it	ne
 800893c:	2001      	movne	r0, #1
 800893e:	b002      	add	sp, #8
 8008940:	4770      	bx	lr
 8008942:	4610      	mov	r0, r2
 8008944:	e7fb      	b.n	800893e <__ascii_mbtowc+0x16>
 8008946:	f06f 0001 	mvn.w	r0, #1
 800894a:	e7f8      	b.n	800893e <__ascii_mbtowc+0x16>

0800894c <_realloc_r>:
 800894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	4680      	mov	r8, r0
 8008952:	4614      	mov	r4, r2
 8008954:	460e      	mov	r6, r1
 8008956:	b921      	cbnz	r1, 8008962 <_realloc_r+0x16>
 8008958:	4611      	mov	r1, r2
 800895a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800895e:	f7ff b973 	b.w	8007c48 <_malloc_r>
 8008962:	b92a      	cbnz	r2, 8008970 <_realloc_r+0x24>
 8008964:	f7ff f900 	bl	8007b68 <_free_r>
 8008968:	4625      	mov	r5, r4
 800896a:	4628      	mov	r0, r5
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	f000 f841 	bl	80089f6 <_malloc_usable_size_r>
 8008974:	4284      	cmp	r4, r0
 8008976:	4607      	mov	r7, r0
 8008978:	d802      	bhi.n	8008980 <_realloc_r+0x34>
 800897a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800897e:	d812      	bhi.n	80089a6 <_realloc_r+0x5a>
 8008980:	4621      	mov	r1, r4
 8008982:	4640      	mov	r0, r8
 8008984:	f7ff f960 	bl	8007c48 <_malloc_r>
 8008988:	4605      	mov	r5, r0
 800898a:	2800      	cmp	r0, #0
 800898c:	d0ed      	beq.n	800896a <_realloc_r+0x1e>
 800898e:	42bc      	cmp	r4, r7
 8008990:	4622      	mov	r2, r4
 8008992:	4631      	mov	r1, r6
 8008994:	bf28      	it	cs
 8008996:	463a      	movcs	r2, r7
 8008998:	f7ff ff86 	bl	80088a8 <memcpy>
 800899c:	4631      	mov	r1, r6
 800899e:	4640      	mov	r0, r8
 80089a0:	f7ff f8e2 	bl	8007b68 <_free_r>
 80089a4:	e7e1      	b.n	800896a <_realloc_r+0x1e>
 80089a6:	4635      	mov	r5, r6
 80089a8:	e7df      	b.n	800896a <_realloc_r+0x1e>

080089aa <__ascii_wctomb>:
 80089aa:	4603      	mov	r3, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	b141      	cbz	r1, 80089c2 <__ascii_wctomb+0x18>
 80089b0:	2aff      	cmp	r2, #255	; 0xff
 80089b2:	d904      	bls.n	80089be <__ascii_wctomb+0x14>
 80089b4:	228a      	movs	r2, #138	; 0x8a
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	4770      	bx	lr
 80089be:	2001      	movs	r0, #1
 80089c0:	700a      	strb	r2, [r1, #0]
 80089c2:	4770      	bx	lr

080089c4 <fiprintf>:
 80089c4:	b40e      	push	{r1, r2, r3}
 80089c6:	b503      	push	{r0, r1, lr}
 80089c8:	4601      	mov	r1, r0
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	4805      	ldr	r0, [pc, #20]	; (80089e4 <fiprintf+0x20>)
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	6800      	ldr	r0, [r0, #0]
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f000 f83d 	bl	8008a54 <_vfiprintf_r>
 80089da:	b002      	add	sp, #8
 80089dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e0:	b003      	add	sp, #12
 80089e2:	4770      	bx	lr
 80089e4:	20000068 	.word	0x20000068

080089e8 <abort>:
 80089e8:	2006      	movs	r0, #6
 80089ea:	b508      	push	{r3, lr}
 80089ec:	f000 fa0a 	bl	8008e04 <raise>
 80089f0:	2001      	movs	r0, #1
 80089f2:	f7f9 fa22 	bl	8001e3a <_exit>

080089f6 <_malloc_usable_size_r>:
 80089f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089fa:	1f18      	subs	r0, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bfbc      	itt	lt
 8008a00:	580b      	ldrlt	r3, [r1, r0]
 8008a02:	18c0      	addlt	r0, r0, r3
 8008a04:	4770      	bx	lr

08008a06 <__sfputc_r>:
 8008a06:	6893      	ldr	r3, [r2, #8]
 8008a08:	b410      	push	{r4}
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	6093      	str	r3, [r2, #8]
 8008a10:	da07      	bge.n	8008a22 <__sfputc_r+0x1c>
 8008a12:	6994      	ldr	r4, [r2, #24]
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	db01      	blt.n	8008a1c <__sfputc_r+0x16>
 8008a18:	290a      	cmp	r1, #10
 8008a1a:	d102      	bne.n	8008a22 <__sfputc_r+0x1c>
 8008a1c:	bc10      	pop	{r4}
 8008a1e:	f000 b933 	b.w	8008c88 <__swbuf_r>
 8008a22:	6813      	ldr	r3, [r2, #0]
 8008a24:	1c58      	adds	r0, r3, #1
 8008a26:	6010      	str	r0, [r2, #0]
 8008a28:	7019      	strb	r1, [r3, #0]
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	bc10      	pop	{r4}
 8008a2e:	4770      	bx	lr

08008a30 <__sfputs_r>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	4606      	mov	r6, r0
 8008a34:	460f      	mov	r7, r1
 8008a36:	4614      	mov	r4, r2
 8008a38:	18d5      	adds	r5, r2, r3
 8008a3a:	42ac      	cmp	r4, r5
 8008a3c:	d101      	bne.n	8008a42 <__sfputs_r+0x12>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e007      	b.n	8008a52 <__sfputs_r+0x22>
 8008a42:	463a      	mov	r2, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4a:	f7ff ffdc 	bl	8008a06 <__sfputc_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d1f3      	bne.n	8008a3a <__sfputs_r+0xa>
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a54 <_vfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	460d      	mov	r5, r1
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	4606      	mov	r6, r0
 8008a60:	b09d      	sub	sp, #116	; 0x74
 8008a62:	b118      	cbz	r0, 8008a6c <_vfiprintf_r+0x18>
 8008a64:	6a03      	ldr	r3, [r0, #32]
 8008a66:	b90b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x18>
 8008a68:	f7fe f8ea 	bl	8006c40 <__sinit>
 8008a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a6e:	07d9      	lsls	r1, r3, #31
 8008a70:	d405      	bmi.n	8008a7e <_vfiprintf_r+0x2a>
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	059a      	lsls	r2, r3, #22
 8008a76:	d402      	bmi.n	8008a7e <_vfiprintf_r+0x2a>
 8008a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7a:	f7fe f9f8 	bl	8006e6e <__retarget_lock_acquire_recursive>
 8008a7e:	89ab      	ldrh	r3, [r5, #12]
 8008a80:	071b      	lsls	r3, r3, #28
 8008a82:	d501      	bpl.n	8008a88 <_vfiprintf_r+0x34>
 8008a84:	692b      	ldr	r3, [r5, #16]
 8008a86:	b99b      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x5c>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f000 f93a 	bl	8008d04 <__swsetup_r>
 8008a90:	b170      	cbz	r0, 8008ab0 <_vfiprintf_r+0x5c>
 8008a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a94:	07dc      	lsls	r4, r3, #31
 8008a96:	d504      	bpl.n	8008aa2 <_vfiprintf_r+0x4e>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	b01d      	add	sp, #116	; 0x74
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	0598      	lsls	r0, r3, #22
 8008aa6:	d4f7      	bmi.n	8008a98 <_vfiprintf_r+0x44>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aaa:	f7fe f9e1 	bl	8006e70 <__retarget_lock_release_recursive>
 8008aae:	e7f3      	b.n	8008a98 <_vfiprintf_r+0x44>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aba:	2330      	movs	r3, #48	; 0x30
 8008abc:	f04f 0901 	mov.w	r9, #1
 8008ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c74 <_vfiprintf_r+0x220>
 8008ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008acc:	4623      	mov	r3, r4
 8008ace:	469a      	mov	sl, r3
 8008ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad4:	b10a      	cbz	r2, 8008ada <_vfiprintf_r+0x86>
 8008ad6:	2a25      	cmp	r2, #37	; 0x25
 8008ad8:	d1f9      	bne.n	8008ace <_vfiprintf_r+0x7a>
 8008ada:	ebba 0b04 	subs.w	fp, sl, r4
 8008ade:	d00b      	beq.n	8008af8 <_vfiprintf_r+0xa4>
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ffa2 	bl	8008a30 <__sfputs_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	f000 80a9 	beq.w	8008c44 <_vfiprintf_r+0x1f0>
 8008af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af4:	445a      	add	r2, fp
 8008af6:	9209      	str	r2, [sp, #36]	; 0x24
 8008af8:	f89a 3000 	ldrb.w	r3, [sl]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80a1 	beq.w	8008c44 <_vfiprintf_r+0x1f0>
 8008b02:	2300      	movs	r3, #0
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0c:	f10a 0a01 	add.w	sl, sl, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b18:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1a:	4654      	mov	r4, sl
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	4854      	ldr	r0, [pc, #336]	; (8008c74 <_vfiprintf_r+0x220>)
 8008b24:	f7fe f9a5 	bl	8006e72 <memchr>
 8008b28:	9a04      	ldr	r2, [sp, #16]
 8008b2a:	b9d8      	cbnz	r0, 8008b64 <_vfiprintf_r+0x110>
 8008b2c:	06d1      	lsls	r1, r2, #27
 8008b2e:	bf44      	itt	mi
 8008b30:	2320      	movmi	r3, #32
 8008b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b36:	0713      	lsls	r3, r2, #28
 8008b38:	bf44      	itt	mi
 8008b3a:	232b      	movmi	r3, #43	; 0x2b
 8008b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b40:	f89a 3000 	ldrb.w	r3, [sl]
 8008b44:	2b2a      	cmp	r3, #42	; 0x2a
 8008b46:	d015      	beq.n	8008b74 <_vfiprintf_r+0x120>
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	9a07      	ldr	r2, [sp, #28]
 8008b52:	4621      	mov	r1, r4
 8008b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b58:	3b30      	subs	r3, #48	; 0x30
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d94d      	bls.n	8008bfa <_vfiprintf_r+0x1a6>
 8008b5e:	b1b0      	cbz	r0, 8008b8e <_vfiprintf_r+0x13a>
 8008b60:	9207      	str	r2, [sp, #28]
 8008b62:	e014      	b.n	8008b8e <_vfiprintf_r+0x13a>
 8008b64:	eba0 0308 	sub.w	r3, r0, r8
 8008b68:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	46a2      	mov	sl, r4
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	e7d2      	b.n	8008b1a <_vfiprintf_r+0xc6>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1d19      	adds	r1, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	9103      	str	r1, [sp, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfbb      	ittet	lt
 8008b80:	425b      	neglt	r3, r3
 8008b82:	f042 0202 	orrlt.w	r2, r2, #2
 8008b86:	9307      	strge	r3, [sp, #28]
 8008b88:	9307      	strlt	r3, [sp, #28]
 8008b8a:	bfb8      	it	lt
 8008b8c:	9204      	strlt	r2, [sp, #16]
 8008b8e:	7823      	ldrb	r3, [r4, #0]
 8008b90:	2b2e      	cmp	r3, #46	; 0x2e
 8008b92:	d10c      	bne.n	8008bae <_vfiprintf_r+0x15a>
 8008b94:	7863      	ldrb	r3, [r4, #1]
 8008b96:	2b2a      	cmp	r3, #42	; 0x2a
 8008b98:	d134      	bne.n	8008c04 <_vfiprintf_r+0x1b0>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3402      	adds	r4, #2
 8008b9e:	1d1a      	adds	r2, r3, #4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	9203      	str	r2, [sp, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfb8      	it	lt
 8008ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c78 <_vfiprintf_r+0x224>
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	7821      	ldrb	r1, [r4, #0]
 8008bb8:	f7fe f95b 	bl	8006e72 <memchr>
 8008bbc:	b138      	cbz	r0, 8008bce <_vfiprintf_r+0x17a>
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	eba0 000a 	sub.w	r0, r0, sl
 8008bc6:	4082      	lsls	r2, r0
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	3401      	adds	r4, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	2206      	movs	r2, #6
 8008bd4:	4829      	ldr	r0, [pc, #164]	; (8008c7c <_vfiprintf_r+0x228>)
 8008bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bda:	f7fe f94a 	bl	8006e72 <memchr>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d03f      	beq.n	8008c62 <_vfiprintf_r+0x20e>
 8008be2:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <_vfiprintf_r+0x22c>)
 8008be4:	bb1b      	cbnz	r3, 8008c2e <_vfiprintf_r+0x1da>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	3307      	adds	r3, #7
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	3308      	adds	r3, #8
 8008bf0:	9303      	str	r3, [sp, #12]
 8008bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf4:	443b      	add	r3, r7
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e768      	b.n	8008acc <_vfiprintf_r+0x78>
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c02:	e7a6      	b.n	8008b52 <_vfiprintf_r+0xfe>
 8008c04:	2300      	movs	r3, #0
 8008c06:	f04f 0c0a 	mov.w	ip, #10
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	3401      	adds	r4, #1
 8008c0e:	9305      	str	r3, [sp, #20]
 8008c10:	4620      	mov	r0, r4
 8008c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c16:	3a30      	subs	r2, #48	; 0x30
 8008c18:	2a09      	cmp	r2, #9
 8008c1a:	d903      	bls.n	8008c24 <_vfiprintf_r+0x1d0>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0c6      	beq.n	8008bae <_vfiprintf_r+0x15a>
 8008c20:	9105      	str	r1, [sp, #20]
 8008c22:	e7c4      	b.n	8008bae <_vfiprintf_r+0x15a>
 8008c24:	4604      	mov	r4, r0
 8008c26:	2301      	movs	r3, #1
 8008c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c2c:	e7f0      	b.n	8008c10 <_vfiprintf_r+0x1bc>
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <_vfiprintf_r+0x230>)
 8008c38:	a904      	add	r1, sp, #16
 8008c3a:	f7fd fbb3 	bl	80063a4 <_printf_float>
 8008c3e:	4607      	mov	r7, r0
 8008c40:	1c78      	adds	r0, r7, #1
 8008c42:	d1d6      	bne.n	8008bf2 <_vfiprintf_r+0x19e>
 8008c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c46:	07d9      	lsls	r1, r3, #31
 8008c48:	d405      	bmi.n	8008c56 <_vfiprintf_r+0x202>
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	059a      	lsls	r2, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <_vfiprintf_r+0x202>
 8008c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c52:	f7fe f90d 	bl	8006e70 <__retarget_lock_release_recursive>
 8008c56:	89ab      	ldrh	r3, [r5, #12]
 8008c58:	065b      	lsls	r3, r3, #25
 8008c5a:	f53f af1d 	bmi.w	8008a98 <_vfiprintf_r+0x44>
 8008c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c60:	e71c      	b.n	8008a9c <_vfiprintf_r+0x48>
 8008c62:	ab03      	add	r3, sp, #12
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	462a      	mov	r2, r5
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <_vfiprintf_r+0x230>)
 8008c6c:	a904      	add	r1, sp, #16
 8008c6e:	f7fd fe39 	bl	80068e4 <_printf_i>
 8008c72:	e7e4      	b.n	8008c3e <_vfiprintf_r+0x1ea>
 8008c74:	080093d4 	.word	0x080093d4
 8008c78:	080093da 	.word	0x080093da
 8008c7c:	080093de 	.word	0x080093de
 8008c80:	080063a5 	.word	0x080063a5
 8008c84:	08008a31 	.word	0x08008a31

08008c88 <__swbuf_r>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	460e      	mov	r6, r1
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	4605      	mov	r5, r0
 8008c90:	b118      	cbz	r0, 8008c9a <__swbuf_r+0x12>
 8008c92:	6a03      	ldr	r3, [r0, #32]
 8008c94:	b90b      	cbnz	r3, 8008c9a <__swbuf_r+0x12>
 8008c96:	f7fd ffd3 	bl	8006c40 <__sinit>
 8008c9a:	69a3      	ldr	r3, [r4, #24]
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	071a      	lsls	r2, r3, #28
 8008ca2:	d525      	bpl.n	8008cf0 <__swbuf_r+0x68>
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	b31b      	cbz	r3, 8008cf0 <__swbuf_r+0x68>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	6922      	ldr	r2, [r4, #16]
 8008cac:	b2f6      	uxtb	r6, r6
 8008cae:	1a98      	subs	r0, r3, r2
 8008cb0:	6963      	ldr	r3, [r4, #20]
 8008cb2:	4637      	mov	r7, r6
 8008cb4:	4283      	cmp	r3, r0
 8008cb6:	dc04      	bgt.n	8008cc2 <__swbuf_r+0x3a>
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7ff fda2 	bl	8008804 <_fflush_r>
 8008cc0:	b9e0      	cbnz	r0, 8008cfc <__swbuf_r+0x74>
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	60a3      	str	r3, [r4, #8]
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	6022      	str	r2, [r4, #0]
 8008cce:	701e      	strb	r6, [r3, #0]
 8008cd0:	6962      	ldr	r2, [r4, #20]
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d004      	beq.n	8008ce2 <__swbuf_r+0x5a>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	07db      	lsls	r3, r3, #31
 8008cdc:	d506      	bpl.n	8008cec <__swbuf_r+0x64>
 8008cde:	2e0a      	cmp	r6, #10
 8008ce0:	d104      	bne.n	8008cec <__swbuf_r+0x64>
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f7ff fd8d 	bl	8008804 <_fflush_r>
 8008cea:	b938      	cbnz	r0, 8008cfc <__swbuf_r+0x74>
 8008cec:	4638      	mov	r0, r7
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f806 	bl	8008d04 <__swsetup_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d0d5      	beq.n	8008ca8 <__swbuf_r+0x20>
 8008cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8008d00:	e7f4      	b.n	8008cec <__swbuf_r+0x64>
	...

08008d04 <__swsetup_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <__swsetup_r+0xac>)
 8008d08:	4605      	mov	r5, r0
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	b118      	cbz	r0, 8008d18 <__swsetup_r+0x14>
 8008d10:	6a03      	ldr	r3, [r0, #32]
 8008d12:	b90b      	cbnz	r3, 8008d18 <__swsetup_r+0x14>
 8008d14:	f7fd ff94 	bl	8006c40 <__sinit>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d1e:	0718      	lsls	r0, r3, #28
 8008d20:	d422      	bmi.n	8008d68 <__swsetup_r+0x64>
 8008d22:	06d9      	lsls	r1, r3, #27
 8008d24:	d407      	bmi.n	8008d36 <__swsetup_r+0x32>
 8008d26:	2309      	movs	r3, #9
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	e034      	b.n	8008da0 <__swsetup_r+0x9c>
 8008d36:	0758      	lsls	r0, r3, #29
 8008d38:	d512      	bpl.n	8008d60 <__swsetup_r+0x5c>
 8008d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3c:	b141      	cbz	r1, 8008d50 <__swsetup_r+0x4c>
 8008d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d002      	beq.n	8008d4c <__swsetup_r+0x48>
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7fe ff0e 	bl	8007b68 <_free_r>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f043 0308 	orr.w	r3, r3, #8
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	b94b      	cbnz	r3, 8008d80 <__swsetup_r+0x7c>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d76:	d003      	beq.n	8008d80 <__swsetup_r+0x7c>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f883 	bl	8008e86 <__smakebuf_r>
 8008d80:	89a0      	ldrh	r0, [r4, #12]
 8008d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d86:	f010 0301 	ands.w	r3, r0, #1
 8008d8a:	d00a      	beq.n	8008da2 <__swsetup_r+0x9e>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	6963      	ldr	r3, [r4, #20]
 8008d92:	425b      	negs	r3, r3
 8008d94:	61a3      	str	r3, [r4, #24]
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	b943      	cbnz	r3, 8008dac <__swsetup_r+0xa8>
 8008d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d9e:	d1c4      	bne.n	8008d2a <__swsetup_r+0x26>
 8008da0:	bd38      	pop	{r3, r4, r5, pc}
 8008da2:	0781      	lsls	r1, r0, #30
 8008da4:	bf58      	it	pl
 8008da6:	6963      	ldrpl	r3, [r4, #20]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	e7f4      	b.n	8008d96 <__swsetup_r+0x92>
 8008dac:	2000      	movs	r0, #0
 8008dae:	e7f7      	b.n	8008da0 <__swsetup_r+0x9c>
 8008db0:	20000068 	.word	0x20000068

08008db4 <_raise_r>:
 8008db4:	291f      	cmp	r1, #31
 8008db6:	b538      	push	{r3, r4, r5, lr}
 8008db8:	4604      	mov	r4, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	d904      	bls.n	8008dc8 <_raise_r+0x14>
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008dca:	b112      	cbz	r2, 8008dd2 <_raise_r+0x1e>
 8008dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dd0:	b94b      	cbnz	r3, 8008de6 <_raise_r+0x32>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f830 	bl	8008e38 <_getpid_r>
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4601      	mov	r1, r0
 8008ddc:	4620      	mov	r0, r4
 8008dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de2:	f000 b817 	b.w	8008e14 <_kill_r>
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d00a      	beq.n	8008e00 <_raise_r+0x4c>
 8008dea:	1c59      	adds	r1, r3, #1
 8008dec:	d103      	bne.n	8008df6 <_raise_r+0x42>
 8008dee:	2316      	movs	r3, #22
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	2001      	movs	r0, #1
 8008df4:	e7e7      	b.n	8008dc6 <_raise_r+0x12>
 8008df6:	2400      	movs	r4, #0
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dfe:	4798      	blx	r3
 8008e00:	2000      	movs	r0, #0
 8008e02:	e7e0      	b.n	8008dc6 <_raise_r+0x12>

08008e04 <raise>:
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <raise+0xc>)
 8008e06:	4601      	mov	r1, r0
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f7ff bfd3 	b.w	8008db4 <_raise_r>
 8008e0e:	bf00      	nop
 8008e10:	20000068 	.word	0x20000068

08008e14 <_kill_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	2300      	movs	r3, #0
 8008e18:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_kill_r+0x20>)
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	f7f8 fffa 	bl	8001e1a <_kill>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d102      	bne.n	8008e30 <_kill_r+0x1c>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	b103      	cbz	r3, 8008e30 <_kill_r+0x1c>
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	bd38      	pop	{r3, r4, r5, pc}
 8008e32:	bf00      	nop
 8008e34:	200004d8 	.word	0x200004d8

08008e38 <_getpid_r>:
 8008e38:	f7f8 bfe8 	b.w	8001e0c <_getpid>

08008e3c <__swhatbuf_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	4615      	mov	r5, r2
 8008e46:	2900      	cmp	r1, #0
 8008e48:	461e      	mov	r6, r3
 8008e4a:	b096      	sub	sp, #88	; 0x58
 8008e4c:	da0c      	bge.n	8008e68 <__swhatbuf_r+0x2c>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	2100      	movs	r1, #0
 8008e52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e56:	bf0c      	ite	eq
 8008e58:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e5c:	2340      	movne	r3, #64	; 0x40
 8008e5e:	2000      	movs	r0, #0
 8008e60:	6031      	str	r1, [r6, #0]
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	b016      	add	sp, #88	; 0x58
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	466a      	mov	r2, sp
 8008e6a:	f000 f849 	bl	8008f00 <_fstat_r>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	dbed      	blt.n	8008e4e <__swhatbuf_r+0x12>
 8008e72:	9901      	ldr	r1, [sp, #4]
 8008e74:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e78:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e7c:	4259      	negs	r1, r3
 8008e7e:	4159      	adcs	r1, r3
 8008e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e84:	e7eb      	b.n	8008e5e <__swhatbuf_r+0x22>

08008e86 <__smakebuf_r>:
 8008e86:	898b      	ldrh	r3, [r1, #12]
 8008e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e8a:	079d      	lsls	r5, r3, #30
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	d507      	bpl.n	8008ea2 <__smakebuf_r+0x1c>
 8008e92:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	b002      	add	sp, #8
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	466a      	mov	r2, sp
 8008ea4:	ab01      	add	r3, sp, #4
 8008ea6:	f7ff ffc9 	bl	8008e3c <__swhatbuf_r>
 8008eaa:	9900      	ldr	r1, [sp, #0]
 8008eac:	4605      	mov	r5, r0
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7fe feca 	bl	8007c48 <_malloc_r>
 8008eb4:	b948      	cbnz	r0, 8008eca <__smakebuf_r+0x44>
 8008eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eba:	059a      	lsls	r2, r3, #22
 8008ebc:	d4ef      	bmi.n	8008e9e <__smakebuf_r+0x18>
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	e7e3      	b.n	8008e92 <__smakebuf_r+0xc>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	6020      	str	r0, [r4, #0]
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	6120      	str	r0, [r4, #16]
 8008ed8:	6163      	str	r3, [r4, #20]
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	b15b      	cbz	r3, 8008ef6 <__smakebuf_r+0x70>
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee4:	f000 f81e 	bl	8008f24 <_isatty_r>
 8008ee8:	b128      	cbz	r0, 8008ef6 <__smakebuf_r+0x70>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	431d      	orrs	r5, r3
 8008efa:	81a5      	strh	r5, [r4, #12]
 8008efc:	e7cf      	b.n	8008e9e <__smakebuf_r+0x18>
	...

08008f00 <_fstat_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	2300      	movs	r3, #0
 8008f04:	4d06      	ldr	r5, [pc, #24]	; (8008f20 <_fstat_r+0x20>)
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	f7f8 ffe2 	bl	8001ed6 <_fstat>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_fstat_r+0x1c>
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_fstat_r+0x1c>
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	200004d8 	.word	0x200004d8

08008f24 <_isatty_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	2300      	movs	r3, #0
 8008f28:	4d05      	ldr	r5, [pc, #20]	; (8008f40 <_isatty_r+0x1c>)
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f8 ffe0 	bl	8001ef4 <_isatty>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_isatty_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_isatty_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	200004d8 	.word	0x200004d8

08008f44 <_init>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	bf00      	nop
 8008f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4a:	bc08      	pop	{r3}
 8008f4c:	469e      	mov	lr, r3
 8008f4e:	4770      	bx	lr

08008f50 <_fini>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr
